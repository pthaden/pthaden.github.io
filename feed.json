{
  "version": "https://jsonfeed.org/version/1",
  "title": "Like A House Afire",
  "home_page_url": "http://www.likeahouseafire.com",
  "feed_url": "http://www.likeahouseafire.com/feed.json",
  "author": {
    "url": "https://twitter.com/pthaden",
    "name": "Paul Thaden"
  },
  "description": "a blog by Paul Thaden",
  "icon": "/apple-touch-icon.png",
  "favicon": "/favicon.ico",
  "expired": false,
  "items": [
  
    {
      "title": "Dynamic Gauge Colors for JET Visualizations",
      "date_published": "2018-01-05T00:00:00+00:00",
      "date_modified": "2018-01-05T00:00:00+00:00",
      "id": "/2018/01/05/dynamic-gauge-colors/",
      "url": "http://www.likeahouseafire.com/2018/01/05/dynamic-gauge-colors/",
      
      
      
      "tags": ["Oracle JET","DVT","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Ideas for prettying up the colors in Oracle JET visualizations",
      "content_text": "The gauges created by JET’s &lt;oj-status-meter-gauge&gt; are pretty, but I wanted to dress up the colors a bit.  I especially wanted to replicate the JustGage fade that smoothly goes from color to color:Oracle JET has some dynamic color capability for the gauge visualizations, but it revolves around setting a thresholds array with distinct boundaries.  The cookbook has example code that sets three levels for all gauges at 33, 67, and max, with red, yellow and green as the respective default threshold colors:...this.thresholdValues = [{max: 33}, {max: 67}, {}];...This array is used on the thresholds=\"[[thresholdValues]]\" attribute of the status meter in the cookbook’s HTML.  But we’re not limited to just three levels or colors, nor are we limited to just one thresholds array.  We can create unique thresholds and color schemes for each of our gauges.  This freedom is good when the default red-yellow-green colors don’t match your requirements, such as how showing red for a low temperature just doesn’t feel right.  In the JSFiddle below, notice how there’s a settings object for each gauge, including independent ranges and colors for the thresholds....self.thermometerScale = {  min: -20,  max: 120,  thresholds: [    {max: 0, color: &quot;deeppink&quot;},    {max: 10, color: &quot;magenta&quot;},    {max: 20, color: &quot;purple&quot;},     {max: 30, color: &quot;blue&quot;},    {max: 40, color: &quot;skyblue&quot;},    {max: 50, color: &quot;green&quot;},     {max: 60, color: &quot;yellowgreen&quot;},    {max: 70, color: &quot;yellow&quot;},    {max: 80, color: &quot;orange&quot;},    {max: 90, color: &quot;red&quot;},    {max: 100, color: &quot;firebrick&quot;},    {max: 120, color: &quot;maroon&quot;}  ]};self.barometerScale = {  min: 93.1,  max: 106.7,  thresholds: [    {max: 96.0, color: &quot;dimgray&quot;, shortDesc: &quot;stormy&quot;},    {max: 98.2, color: &quot;darkblue&quot;, shortDesc: &quot;rain&quot;},    {max: 101.2, color: &quot;lightskyblue&quot;, shortDesc: &quot;change&quot;},     {max: 104.0, color: &quot;deepskyblue&quot;, shortDesc: &quot;fair&quot;},    {max: 106.7, color: &quot;goldenrod&quot;, shortDesc: &quot;very dry&quot;}  ]};self.hygrometerScale = {  min: 0,  max: 100,  thresholds: [     {max: 40, color: &quot;khaki &quot;, shortDesc: &quot;dry&quot;},    {max: 60, color: &quot;darkseagreen&quot;, shortDesc: &quot;comfort&quot;},    {max: 100, color: &quot;aqua&quot;, shortDesc: &quot;wet&quot;}            ]};...Get me some of that sweet gradientSo this is fine for rough ranges: it gives us suitable colors matching the gauges’ purpose and lets us define the color-change points on the scale.  But the transitions are rather abrupt – you’re the same color up until just below the max of a range, and then suddenly you’re a different color.  We could soften our color choices and make them more similar to a gradient or perhaps set up tinier and tinier ranges, but why not get JET to figure out how to transition the colors smoothly?I’m sure smarter people than me can figure out a better algorithm, but one approach is to hook into the SVG rendering that JET does behind the scenes by adding an svg-style attribute to the &lt;oj-status-meter-gauge&gt;.  This attribute expects a JSON object of CSS styling that will get applied to the gauge when its SVG is generated.  Following the thoughts in the blog article Chart Custom Fill and Stroke, we could even pass in chunks of SVG – like a linearGradient definition – to achieve a smooth fade:&lt;svg height=&quot;0&quot; width=&quot;0&quot;&gt;    &lt;defs&gt;      &lt;linearGradient id=&quot;gradient&quot; x1=&quot;0%&quot;  y1=&quot;100%&quot;&gt;        &lt;stop offset=&quot;0%&quot; style=&quot;stop-color: #66ccff&quot;&gt;&lt;/stop&gt;        &lt;stop offset=&quot;80%&quot; style=&quot;stop-color: #0000FF&quot;&gt;&lt;/stop&gt;      &lt;/linearGradient&gt;    &lt;/defs&gt;  &lt;/svg&gt; &lt;oj-status-meter-gauge   id=&quot;barometer&quot;  min=[[thresholds.barometerMin]]  max=[[thresholds.barometerMax]]   data-title=&quot;Barometer&quot;  data-label=&quot;Pressure/kPa&quot;  value=&quot;{{barometer}}&quot;   orientation=&quot;circular&quot;  center.renderer=&quot;[[oj.KnockoutTemplateUtils.getRenderer(&#39;centerTemplate&#39;)]]&quot;  svg-style=&#39; {&quot;fill&quot;: &quot;url(#gradient)&quot;} &#39;  style=&quot;align:center;margin-top:5px;margin-bottom:5px;height:240px;width:25%;&quot;  class=&quot;oj-flex-item&quot;&gt;&lt;/oj-status-meter-gauge&gt;Another option is to hook up the svg-style with a function from the backing viewModel, one that can take parameters and return an object of style built from the current value and scaled to the min and max: Below is some code I’m not proud of, because what I really wanted to do is hook an event on the gauge’s value change or refactor out a generic, reusable function that all gauges could use, or something elegant like that.  But I couldn’t figure out a way to pass in the gauge’s context or an onchange event, and instead the function parameters are clunky and ham-handed.  Still, maybe this is the start of something, or maybe there’s a better way to approach dynamically styling the gauges as the values change?view.html&lt;oj-status-meter-gauge   id=&quot;thermometer&quot;  min=[[thresholds.thermometerMin]]  max=[[thresholds.thermometerMax]]   data-title=&quot;Thermometer&quot;  data-label=&quot;° Fahrenheit&quot;  value=&quot;{{thermometer}}&quot;   orientation=&quot;circular&quot;  center.renderer=&quot;[[oj.KnockoutTemplateUtils.getRenderer(&#39;centerTemplate&#39;)]]&quot;  svg-style=&quot;[[customSvgStyle(thermometer(), thresholds)]]&quot;  style=&quot;align:center;margin-top:5px;margin-bottom:5px;height:240px;width:25%;&quot;  class=&quot;oj-flex-item&quot;&gt;&lt;/oj-status-meter-gauge&gt;viewModel.js// don&#39;t forget to include dependencies for ojcolor and ojvalidationdefine([  ...,   &#39;ojs/ojvalidation-base&#39;,  &#39;ojs/ojcolor&#39; ],...self.customSvgStyle = function(value, thresholds){  return {           fill: getColorAtScalar(value, thresholds.max, thresholds.min)         }; };function getColorAtScalar(value, max, min) {  // create a color converter for output into rgb for svg fill style  var cf = oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_COLOR);  var convHsl = cf.createConverter({&quot;format&quot;: &quot;rgb&quot;}) ;  // get the starting and ending colors&#39; RGB values into an object  var lowColor = oj.Color[&#39;blue&#39;.toUpperCase()] ;   var lowColorObject = {                        r: lowColor.getRed(true),                         g: lowColor.getGreen(true),                         b: lowColor.getBlue(true)                      };  var highColor = oj.Color[&#39;firebrick&#39;.toUpperCase()] ;             var highColorObject = {                         r: highColor.getRed(true),                         g: highColor.getGreen(true),                         b: highColor.getBlue(true)                       };  // figure out the multiplier for the value&#39;s position in the range  var fraction = value / (max - min);  // create an RGB object with new values using the fraction multiplier  var scaledColorObject = {    r: lowColorObject.r + (fraction * (highColorObject.r - lowColorObject.r)),    g: lowColorObject.g + (fraction * (highColorObject.g - lowColorObject.g)),    b: lowColorObject.b + (fraction * (highColorObject.b - lowColorObject.b))  }  // create a Color out of that and return it in rgb() format  var scaledColor = new oj.Color(scaledColorObject)  return convHsl.format(scaledColor);}...",
      "content_html": "<p>The gauges created by JET’s <code>&lt;oj-status-meter-gauge&gt;</code> are pretty, but I wanted to dress up the colors a bit.  I especially wanted to replicate the <a href=\"http://justgage.com/\">JustGage</a> fade that smoothly goes from color to color:</p><figure class=\"full zoomable\"><img src=\"/images/20180105/justgage-fade.gif\" /></figure><p>Oracle JET has some dynamic color capability for the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html?component=home&amp;demo=rootVisualizations_childGauge\">gauge visualizations</a>, but it revolves around setting a <code>thresholds</code> array with distinct boundaries.  The <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html?component=statusMeterGauge&amp;demo=statusMeterGaugeHorizontal\">cookbook has example code that sets three levels</a> for all gauges at 33, 67, and max, with red, yellow and green as the respective default threshold colors:</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"p\">...</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">thresholdValues</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">33</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">67</span><span class=\"p\">},</span> <span class=\"p\">{}];</span><span class=\"p\">...</span></code></pre></div><p>This array is used on the <code>thresholds=\"[[thresholdValues]]\"</code> attribute of the status meter in the cookbook’s HTML.  But we’re not limited to just three levels or colors, nor are we limited to just one thresholds array.  We can create unique thresholds and color schemes for each of our gauges.  This freedom is good when the default red-yellow-green colors don’t match your requirements, such as how showing red for a low temperature just doesn’t feel right.  </p><p>In the JSFiddle below, notice how there’s a settings object for each gauge, including independent ranges and colors for the thresholds.</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"p\">...</span><span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">thermometerScale</span> <span class=\"o\">=</span> <span class=\"p\">{</span>  <span class=\"nx\">min</span><span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">20</span><span class=\"p\">,</span>  <span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">120</span><span class=\"p\">,</span>  <span class=\"nx\">thresholds</span><span class=\"o\">:</span> <span class=\"p\">[</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;deeppink&quot;</span><span class=\"p\">},</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;magenta&quot;</span><span class=\"p\">},</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;purple&quot;</span><span class=\"p\">},</span>     <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;blue&quot;</span><span class=\"p\">},</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;skyblue&quot;</span><span class=\"p\">},</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;green&quot;</span><span class=\"p\">},</span>     <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;yellowgreen&quot;</span><span class=\"p\">},</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;yellow&quot;</span><span class=\"p\">},</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;orange&quot;</span><span class=\"p\">},</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;red&quot;</span><span class=\"p\">},</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;firebrick&quot;</span><span class=\"p\">},</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;maroon&quot;</span><span class=\"p\">}</span>  <span class=\"p\">]</span><span class=\"p\">};</span><span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">barometerScale</span> <span class=\"o\">=</span> <span class=\"p\">{</span>  <span class=\"nx\">min</span><span class=\"o\">:</span> <span class=\"mf\">93.1</span><span class=\"p\">,</span>  <span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mf\">106.7</span><span class=\"p\">,</span>  <span class=\"nx\">thresholds</span><span class=\"o\">:</span> <span class=\"p\">[</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mf\">96.0</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;dimgray&quot;</span><span class=\"p\">,</span> <span class=\"nx\">shortDesc</span><span class=\"o\">:</span> <span class=\"s2\">&quot;stormy&quot;</span><span class=\"p\">},</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mf\">98.2</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;darkblue&quot;</span><span class=\"p\">,</span> <span class=\"nx\">shortDesc</span><span class=\"o\">:</span> <span class=\"s2\">&quot;rain&quot;</span><span class=\"p\">},</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mf\">101.2</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;lightskyblue&quot;</span><span class=\"p\">,</span> <span class=\"nx\">shortDesc</span><span class=\"o\">:</span> <span class=\"s2\">&quot;change&quot;</span><span class=\"p\">},</span>     <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mf\">104.0</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;deepskyblue&quot;</span><span class=\"p\">,</span> <span class=\"nx\">shortDesc</span><span class=\"o\">:</span> <span class=\"s2\">&quot;fair&quot;</span><span class=\"p\">},</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mf\">106.7</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;goldenrod&quot;</span><span class=\"p\">,</span> <span class=\"nx\">shortDesc</span><span class=\"o\">:</span> <span class=\"s2\">&quot;very dry&quot;</span><span class=\"p\">}</span>  <span class=\"p\">]</span><span class=\"p\">};</span><span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">hygrometerScale</span> <span class=\"o\">=</span> <span class=\"p\">{</span>  <span class=\"nx\">min</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>  <span class=\"nx\">thresholds</span><span class=\"o\">:</span> <span class=\"p\">[</span>     <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;khaki &quot;</span><span class=\"p\">,</span> <span class=\"nx\">shortDesc</span><span class=\"o\">:</span> <span class=\"s2\">&quot;dry&quot;</span><span class=\"p\">},</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;darkseagreen&quot;</span><span class=\"p\">,</span> <span class=\"nx\">shortDesc</span><span class=\"o\">:</span> <span class=\"s2\">&quot;comfort&quot;</span><span class=\"p\">},</span>    <span class=\"p\">{</span><span class=\"nx\">max</span><span class=\"o\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"nx\">color</span><span class=\"o\">:</span> <span class=\"s2\">&quot;aqua&quot;</span><span class=\"p\">,</span> <span class=\"nx\">shortDesc</span><span class=\"o\">:</span> <span class=\"s2\">&quot;wet&quot;</span><span class=\"p\">}</span>            <span class=\"p\">]</span><span class=\"p\">};</span><span class=\"p\">...</span></code></pre></div><script async=\"\" src=\"//jsfiddle.net/pthaden/evzatscd/embed/result,js,html,css/\"></script><h2 id=\"get-me-some-of-that-sweet-gradient\">Get me some of that sweet gradient</h2><p>So this is fine for rough ranges: it gives us suitable colors matching the gauges’ purpose and lets us define the color-change points on the scale.  But the transitions are rather abrupt – you’re the same color up until just below the max of a range, and then suddenly you’re a different color.  </p><p>We could soften our color choices and make them more similar to a gradient or perhaps set up tinier and tinier ranges, but why not get JET to figure out how to transition the colors smoothly?</p><p>I’m sure smarter people than me can figure out a better algorithm, but one approach is to hook into the SVG rendering that JET does behind the scenes by adding an <code>svg-style</code> attribute to the <code>&lt;oj-status-meter-gauge&gt;</code>.  This attribute expects a JSON object of CSS styling that will get applied to the gauge when its SVG is generated.  Following the thoughts in the blog article <a href=\"https://community.oracle.com/community/development_tools/oracle-jet/blog/2016/08/23/chart-custom-fill-and-stroke\">Chart Custom Fill and Stroke</a>, we could even pass in chunks of SVG – like a <code>linearGradient</code> definition – to achieve a smooth fade:</p><figure class=\"full zoomable\"><img src=\"/images/20180105/gradient-svg-fade.png\" /></figure><div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;svg</span> <span class=\"na\">height=</span><span class=\"s\">&quot;0&quot;</span> <span class=\"na\">width=</span><span class=\"s\">&quot;0&quot;</span><span class=\"nt\">&gt;</span>    <span class=\"nt\">&lt;defs&gt;</span>      <span class=\"nt\">&lt;linearGradient</span> <span class=\"na\">id=</span><span class=\"s\">&quot;gradient&quot;</span> <span class=\"na\">x1=</span><span class=\"s\">&quot;0%&quot;</span>  <span class=\"na\">y1=</span><span class=\"s\">&quot;100%&quot;</span><span class=\"nt\">&gt;</span>        <span class=\"nt\">&lt;stop</span> <span class=\"na\">offset=</span><span class=\"s\">&quot;0%&quot;</span> <span class=\"na\">style=</span><span class=\"s\">&quot;stop-color: #66ccff&quot;</span><span class=\"nt\">&gt;&lt;/stop&gt;</span>        <span class=\"nt\">&lt;stop</span> <span class=\"na\">offset=</span><span class=\"s\">&quot;80%&quot;</span> <span class=\"na\">style=</span><span class=\"s\">&quot;stop-color: #0000FF&quot;</span><span class=\"nt\">&gt;&lt;/stop&gt;</span>      <span class=\"nt\">&lt;/linearGradient&gt;</span>    <span class=\"nt\">&lt;/defs&gt;</span>  <span class=\"nt\">&lt;/svg&gt;</span> <span class=\"nt\">&lt;oj-status-meter-gauge</span>   <span class=\"na\">id=</span><span class=\"s\">&quot;barometer&quot;</span>  <span class=\"na\">min=</span><span class=\"s\">[[thresholds.barometerMin]]</span>  <span class=\"na\">max=</span><span class=\"s\">[[thresholds.barometerMax]]</span>   <span class=\"na\">data-title=</span><span class=\"s\">&quot;Barometer&quot;</span>  <span class=\"na\">data-label=</span><span class=\"s\">&quot;Pressure/kPa&quot;</span>  <span class=\"na\">value=</span><span class=\"s\">&quot;{{barometer}}&quot;</span>   <span class=\"na\">orientation=</span><span class=\"s\">&quot;circular&quot;</span>  <span class=\"na\">center</span><span class=\"err\">.</span><span class=\"na\">renderer=</span><span class=\"s\">&quot;[[oj.KnockoutTemplateUtils.getRenderer(&#39;centerTemplate&#39;)]]&quot;</span>  <span class=\"na\">svg-style=</span><span class=\"s\">&#39; {&quot;fill&quot;: &quot;url(#gradient)&quot;} &#39;</span>  <span class=\"na\">style=</span><span class=\"s\">&quot;align:center;margin-top:5px;margin-bottom:5px;height:240px;width:25%;&quot;</span>  <span class=\"na\">class=</span><span class=\"s\">&quot;oj-flex-item&quot;</span><span class=\"nt\">&gt;</span><span class=\"nt\">&lt;/oj-status-meter-gauge&gt;</span></code></pre></div><p>Another option is to hook up the <code>svg-style</code> with a function from the backing viewModel, one that can take parameters and return an object of style built from the current value and scaled to the min and max: </p><figure class=\"full zoomable\"><img src=\"/images/20180105/jet-fade.gif\" /></figure><p>Below is some code I’m not proud of, because what I really wanted to do is hook an event on the gauge’s value change or refactor out a generic, reusable function that all gauges could use, or something elegant like that.  But I couldn’t figure out a way to pass in the gauge’s context or an onchange event, and instead the function parameters are clunky and ham-handed.  Still, maybe this is the start of something, or maybe there’s a better way to approach dynamically styling the gauges as the values change?</p><h4 id=\"viewhtml\">view.html</h4><div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;oj-status-meter-gauge</span>   <span class=\"na\">id=</span><span class=\"s\">&quot;thermometer&quot;</span>  <span class=\"na\">min=</span><span class=\"s\">[[thresholds.thermometerMin]]</span>  <span class=\"na\">max=</span><span class=\"s\">[[thresholds.thermometerMax]]</span>   <span class=\"na\">data-title=</span><span class=\"s\">&quot;Thermometer&quot;</span>  <span class=\"na\">data-label=</span><span class=\"s\">&quot;° Fahrenheit&quot;</span>  <span class=\"na\">value=</span><span class=\"s\">&quot;{{thermometer}}&quot;</span>   <span class=\"na\">orientation=</span><span class=\"s\">&quot;circular&quot;</span>  <span class=\"na\">center</span><span class=\"err\">.</span><span class=\"na\">renderer=</span><span class=\"s\">&quot;[[oj.KnockoutTemplateUtils.getRenderer(&#39;centerTemplate&#39;)]]&quot;</span>  <span class=\"na\">svg-style=</span><span class=\"s\">&quot;[[customSvgStyle(thermometer(), thresholds)]]&quot;</span>  <span class=\"na\">style=</span><span class=\"s\">&quot;align:center;margin-top:5px;margin-bottom:5px;height:240px;width:25%;&quot;</span>  <span class=\"na\">class=</span><span class=\"s\">&quot;oj-flex-item&quot;</span><span class=\"nt\">&gt;</span><span class=\"nt\">&lt;/oj-status-meter-gauge&gt;</span></code></pre></div><h4 id=\"viewmodeljs\">viewModel.js</h4><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">// don&#39;t forget to include dependencies for ojcolor and ojvalidation</span><span class=\"nx\">define</span><span class=\"p\">([</span>  <span class=\"p\">...,</span>   <span class=\"s1\">&#39;ojs/ojvalidation-base&#39;</span><span class=\"p\">,</span>  <span class=\"s1\">&#39;ojs/ojcolor&#39;</span> <span class=\"p\">],</span><span class=\"p\">...</span><span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">customSvgStyle</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"nx\">thresholds</span><span class=\"p\">){</span>  <span class=\"k\">return</span> <span class=\"p\">{</span>           <span class=\"nx\">fill</span><span class=\"o\">:</span> <span class=\"nx\">getColorAtScalar</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"nx\">thresholds</span><span class=\"p\">.</span><span class=\"nx\">max</span><span class=\"p\">,</span> <span class=\"nx\">thresholds</span><span class=\"p\">.</span><span class=\"nx\">min</span><span class=\"p\">)</span>         <span class=\"p\">};</span> <span class=\"p\">};</span><span class=\"kd\">function</span> <span class=\"nx\">getColorAtScalar</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"nx\">max</span><span class=\"p\">,</span> <span class=\"nx\">min</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"c1\">// create a color converter for output into rgb for svg fill style</span>  <span class=\"kd\">var</span> <span class=\"nx\">cf</span> <span class=\"o\">=</span> <span class=\"nx\">oj</span><span class=\"p\">.</span><span class=\"nx\">Validation</span><span class=\"p\">.</span><span class=\"nx\">converterFactory</span><span class=\"p\">(</span><span class=\"nx\">oj</span><span class=\"p\">.</span><span class=\"nx\">ConverterFactory</span><span class=\"p\">.</span><span class=\"nx\">CONVERTER_TYPE_COLOR</span><span class=\"p\">);</span>  <span class=\"kd\">var</span> <span class=\"nx\">convHsl</span> <span class=\"o\">=</span> <span class=\"nx\">cf</span><span class=\"p\">.</span><span class=\"nx\">createConverter</span><span class=\"p\">({</span><span class=\"s2\">&quot;format&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;rgb&quot;</span><span class=\"p\">})</span> <span class=\"p\">;</span>  <span class=\"c1\">// get the starting and ending colors&#39; RGB values into an object</span>  <span class=\"kd\">var</span> <span class=\"nx\">lowColor</span> <span class=\"o\">=</span> <span class=\"nx\">oj</span><span class=\"p\">.</span><span class=\"nx\">Color</span><span class=\"p\">[</span><span class=\"s1\">&#39;blue&#39;</span><span class=\"p\">.</span><span class=\"nx\">toUpperCase</span><span class=\"p\">()]</span> <span class=\"p\">;</span>   <span class=\"kd\">var</span> <span class=\"nx\">lowColorObject</span> <span class=\"o\">=</span> <span class=\"p\">{</span>                        <span class=\"nx\">r</span><span class=\"o\">:</span> <span class=\"nx\">lowColor</span><span class=\"p\">.</span><span class=\"nx\">getRed</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">),</span>                         <span class=\"nx\">g</span><span class=\"o\">:</span> <span class=\"nx\">lowColor</span><span class=\"p\">.</span><span class=\"nx\">getGreen</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">),</span>                         <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"nx\">lowColor</span><span class=\"p\">.</span><span class=\"nx\">getBlue</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>                      <span class=\"p\">};</span>  <span class=\"kd\">var</span> <span class=\"nx\">highColor</span> <span class=\"o\">=</span> <span class=\"nx\">oj</span><span class=\"p\">.</span><span class=\"nx\">Color</span><span class=\"p\">[</span><span class=\"s1\">&#39;firebrick&#39;</span><span class=\"p\">.</span><span class=\"nx\">toUpperCase</span><span class=\"p\">()]</span> <span class=\"p\">;</span>             <span class=\"kd\">var</span> <span class=\"nx\">highColorObject</span> <span class=\"o\">=</span> <span class=\"p\">{</span>                         <span class=\"nx\">r</span><span class=\"o\">:</span> <span class=\"nx\">highColor</span><span class=\"p\">.</span><span class=\"nx\">getRed</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">),</span>                         <span class=\"nx\">g</span><span class=\"o\">:</span> <span class=\"nx\">highColor</span><span class=\"p\">.</span><span class=\"nx\">getGreen</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">),</span>                         <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"nx\">highColor</span><span class=\"p\">.</span><span class=\"nx\">getBlue</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>                       <span class=\"p\">};</span>  <span class=\"c1\">// figure out the multiplier for the value&#39;s position in the range</span>  <span class=\"kd\">var</span> <span class=\"nx\">fraction</span> <span class=\"o\">=</span> <span class=\"nx\">value</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"nx\">max</span> <span class=\"o\">-</span> <span class=\"nx\">min</span><span class=\"p\">);</span>  <span class=\"c1\">// create an RGB object with new values using the fraction multiplier</span>  <span class=\"kd\">var</span> <span class=\"nx\">scaledColorObject</span> <span class=\"o\">=</span> <span class=\"p\">{</span>    <span class=\"nx\">r</span><span class=\"o\">:</span> <span class=\"nx\">lowColorObject</span><span class=\"p\">.</span><span class=\"nx\">r</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nx\">fraction</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">highColorObject</span><span class=\"p\">.</span><span class=\"nx\">r</span> <span class=\"o\">-</span> <span class=\"nx\">lowColorObject</span><span class=\"p\">.</span><span class=\"nx\">r</span><span class=\"p\">)),</span>    <span class=\"nx\">g</span><span class=\"o\">:</span> <span class=\"nx\">lowColorObject</span><span class=\"p\">.</span><span class=\"nx\">g</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nx\">fraction</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">highColorObject</span><span class=\"p\">.</span><span class=\"nx\">g</span> <span class=\"o\">-</span> <span class=\"nx\">lowColorObject</span><span class=\"p\">.</span><span class=\"nx\">g</span><span class=\"p\">)),</span>    <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"nx\">lowColorObject</span><span class=\"p\">.</span><span class=\"nx\">b</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nx\">fraction</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">highColorObject</span><span class=\"p\">.</span><span class=\"nx\">b</span> <span class=\"o\">-</span> <span class=\"nx\">lowColorObject</span><span class=\"p\">.</span><span class=\"nx\">b</span><span class=\"p\">))</span>  <span class=\"p\">}</span>  <span class=\"c1\">// create a Color out of that and return it in rgb() format</span>  <span class=\"kd\">var</span> <span class=\"nx\">scaledColor</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">oj</span><span class=\"p\">.</span><span class=\"nx\">Color</span><span class=\"p\">(</span><span class=\"nx\">scaledColorObject</span><span class=\"p\">)</span>  <span class=\"k\">return</span> <span class=\"nx\">convHsl</span><span class=\"p\">.</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"nx\">scaledColor</span><span class=\"p\">);</span><span class=\"p\">}</span><span class=\"p\">...</span></code></pre></div>"
    },
  
    {
      "title": "Don't Forget Your oj.ColorConverter Dependencies",
      "date_published": "2018-01-03T00:00:00+00:00",
      "date_modified": "2018-01-03T00:00:00+00:00",
      "id": "/2018/01/03/dont-forget-ojvalidatation-ojcolor-dependencies/",
      "url": "http://www.likeahouseafire.com/2018/01/03/dont-forget-ojvalidatation-ojcolor-dependencies/",
      
      
      
      "tags": ["Oracle JET","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Whenever I try to convert JET colors, I never seem to get the dependencies right on the first try.  Plus I forget how to setup the converterFactory and pass in the right formats.",
      "content_text": "I mess this up every time I try to use it:If you’re attempting to leverage the Oracle JET color converter, you’ll get these errors in your browser console if you forget the dependencies at the top of your ojModule’s define() function:TypeError: Cannot read property 'converterFactory' of undefined    // you left out 'ojs/ojvalidation'orTypeError: oj.Color is not a constructor     // you left out 'ojs/ojcolor'Also, besides including  'ojs/ojvalidation' and 'ojs/ojcolor', watch to make sure you perform all the steps:  Create a ConverterFactory of type color  Pass in an options object for the format you want to output and create the converter itself  Make sure the input color is an ojColor object first (see below for a trick for using CSS Color Keywords directly)  Run it through the converterdefine([&#39;ojs/ojcore&#39;, &#39;knockout&#39;, &#39;jquery&#39;, &#39;ojs/ojvalidation&#39;, &#39;ojs/ojcolor&#39;],  function(oj, ko, $) {      ...    // Steps 1 &amp; 2 (one time only)     // Use a factory to create a converter for the output you want     var cf = oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_COLOR);    var convHsl = cf.createConverter({&quot;format&quot;: &quot;hsl&quot;}) ;    // Steps 3 &amp; 4    // Create a Color object first, then convert it    var rgbaOrig = new oj.Color(&quot;rgba(27,128,254,0.8)&quot;);    var convertedRgbaColor = convHsl.format(rgbaOrig);          // returns &quot;hsla(213, 99%, 55%, 0.8)&quot;    var hexOrig = new oj.Color(&quot;#fa8072&quot;);    var convertedHexColor = convHsl.format(hexOrig);        // returns &quot;hsl(6, 93%, 71%)&quot;     var objectOrig =  new oj.Color({h:310, s:50, v:80, a:0.8});    var convertedObjectColor = convHsl.format(objectOrig);         // returns &quot;hsla(310, 50%, 60%, 0.8)&quot;    // What if you want to use CSS3 color specification strings?    // Convert it in one fell swoop using object bracket notation    //  (but be advised the CSS3 color properties are in ALLCAPS     //   on the oj.Color object):     var convertedCSS3str = convHsl.format(oj.Color[&#39;deeppink&#39;.toUpperCase()]);          // returns &quot;hsl(328, 100%, 54%)&quot;    ...Here’s a little fun with converters as a bonus:",
      "content_html": "<p>I mess this up every time I try to use it:</p><p>If you’re attempting to leverage the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jsdocs/oj.ColorConverter.html\">Oracle JET color converter</a>, you’ll get these errors in your browser console if you forget the dependencies at the top of your ojModule’s <code>define()</code> function:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color: red;\">TypeError: Cannot read property 'converterFactory' of undefined</span>    // you left out 'ojs/ojvalidation'</code></pre></div><p>or</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span style=\"color: red;\">TypeError: oj.Color is not a constructor </span>    // you left out 'ojs/ojcolor'</code></pre></div><p>Also, besides including  <code>'ojs/ojvalidation'</code> and <code>'ojs/ojcolor'</code>, watch to make sure you perform all the steps:</p><ol>  <li>Create a ConverterFactory of type color</li>  <li>Pass in an options object for the format you want to output and create the converter itself</li>  <li>Make sure the input color is an ojColor object first (see below for a trick for using <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Color_keywords\">CSS Color Keywords</a> directly)</li>  <li>Run it through the converter</li></ol><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">define</span><span class=\"p\">([</span><span class=\"s1\">&#39;ojs/ojcore&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;knockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;jquery&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojvalidation&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojcolor&#39;</span><span class=\"p\">],</span>  <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">oj</span><span class=\"p\">,</span> <span class=\"nx\">ko</span><span class=\"p\">,</span> <span class=\"nx\">$</span><span class=\"p\">)</span> <span class=\"p\">{</span>      <span class=\"p\">...</span>    <span class=\"c1\">// Steps 1 &amp; 2 (one time only) </span>    <span class=\"c1\">// Use a factory to create a converter for the output you want </span>    <span class=\"kd\">var</span> <span class=\"nx\">cf</span> <span class=\"o\">=</span> <span class=\"nx\">oj</span><span class=\"p\">.</span><span class=\"nx\">Validation</span><span class=\"p\">.</span><span class=\"nx\">converterFactory</span><span class=\"p\">(</span><span class=\"nx\">oj</span><span class=\"p\">.</span><span class=\"nx\">ConverterFactory</span><span class=\"p\">.</span><span class=\"nx\">CONVERTER_TYPE_COLOR</span><span class=\"p\">);</span>    <span class=\"kd\">var</span> <span class=\"nx\">convHsl</span> <span class=\"o\">=</span> <span class=\"nx\">cf</span><span class=\"p\">.</span><span class=\"nx\">createConverter</span><span class=\"p\">({</span><span class=\"s2\">&quot;format&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;hsl&quot;</span><span class=\"p\">})</span> <span class=\"p\">;</span>    <span class=\"c1\">// Steps 3 &amp; 4</span>    <span class=\"c1\">// Create a Color object first, then convert it</span>    <span class=\"kd\">var</span> <span class=\"nx\">rgbaOrig</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">oj</span><span class=\"p\">.</span><span class=\"nx\">Color</span><span class=\"p\">(</span><span class=\"s2\">&quot;rgba(27,128,254,0.8)&quot;</span><span class=\"p\">);</span>    <span class=\"kd\">var</span> <span class=\"nx\">convertedRgbaColor</span> <span class=\"o\">=</span> <span class=\"nx\">convHsl</span><span class=\"p\">.</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"nx\">rgbaOrig</span><span class=\"p\">);</span>          <span class=\"c1\">// returns &quot;hsla(213, 99%, 55%, 0.8)&quot;</span>    <span class=\"kd\">var</span> <span class=\"nx\">hexOrig</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">oj</span><span class=\"p\">.</span><span class=\"nx\">Color</span><span class=\"p\">(</span><span class=\"s2\">&quot;#fa8072&quot;</span><span class=\"p\">);</span>    <span class=\"kd\">var</span> <span class=\"nx\">convertedHexColor</span> <span class=\"o\">=</span> <span class=\"nx\">convHsl</span><span class=\"p\">.</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"nx\">hexOrig</span><span class=\"p\">);</span>        <span class=\"c1\">// returns &quot;hsl(6, 93%, 71%)&quot; </span>    <span class=\"kd\">var</span> <span class=\"nx\">objectOrig</span> <span class=\"o\">=</span>  <span class=\"k\">new</span> <span class=\"nx\">oj</span><span class=\"p\">.</span><span class=\"nx\">Color</span><span class=\"p\">({</span><span class=\"nx\">h</span><span class=\"o\">:</span><span class=\"mi\">310</span><span class=\"p\">,</span> <span class=\"nx\">s</span><span class=\"o\">:</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"nx\">v</span><span class=\"o\">:</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">a</span><span class=\"o\">:</span><span class=\"mf\">0.8</span><span class=\"p\">});</span>    <span class=\"kd\">var</span> <span class=\"nx\">convertedObjectColor</span> <span class=\"o\">=</span> <span class=\"nx\">convHsl</span><span class=\"p\">.</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"nx\">objectOrig</span><span class=\"p\">);</span>         <span class=\"c1\">// returns &quot;hsla(310, 50%, 60%, 0.8)&quot;</span>    <span class=\"c1\">// What if you want to use CSS3 color specification strings?</span>    <span class=\"c1\">// Convert it in one fell swoop using object bracket notation</span>    <span class=\"c1\">//  (but be advised the CSS3 color properties are in ALLCAPS </span>    <span class=\"c1\">//   on the oj.Color object): </span>    <span class=\"kd\">var</span> <span class=\"nx\">convertedCSS3str</span> <span class=\"o\">=</span> <span class=\"nx\">convHsl</span><span class=\"p\">.</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"nx\">oj</span><span class=\"p\">.</span><span class=\"nx\">Color</span><span class=\"p\">[</span><span class=\"s1\">&#39;deeppink&#39;</span><span class=\"p\">.</span><span class=\"nx\">toUpperCase</span><span class=\"p\">()]);</span>          <span class=\"c1\">// returns &quot;hsl(328, 100%, 54%)&quot;</span>    <span class=\"p\">...</span></code></pre></div><p>Here’s a little fun with converters as a bonus:</p><iframe style=\"margin-left: -40px; margin-bottom: 50px; width: 680px;\" height=\"600\" src=\"//jsfiddle.net/pthaden/pp8fw4ew/embedded/result,js,html,css/\" allowpaymentrequest=\"\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>"
    },
  
    {
      "title": "Deliver JET via CDN",
      "date_published": "2018-01-01T00:00:00+00:00",
      "date_modified": "2018-01-01T00:00:00+00:00",
      "id": "/2018/01/01/jet-via-cdn/",
      "url": "http://www.likeahouseafire.com/2018/01/01/jet-via-cdn/",
      
      
      
      "tags": ["Oracle JET","IoT","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Configure Oracle JET to use a CDN and reduce the deployment footprint",
      "content_text": "While playing with some IoT devices such as the JavaScript-centric JohnnyFive Tessel 2 board, I wanted to deploy some JET code onto the microcontroller to be delivered by the board’s Express Node.js server.  In the Tessel tutorial there is sample code that uses the JustGage library to show sensor data streaming via Socket.io. The deployment steps in that tutorial describe how to ship the supporting node_modules over to the Tessel 2 board, but the more you add to your project the heavier the deployment becomes and the longer it takes to copy over.Gauges built with JustGage, which is deployed and served by the Node.js Express serverShipping all of the JET supporting modules and all of their dependencies is a whole lot heavier than only one library like JustGage.  Even if you take steps to whittle down the included JET module bundles or minimize the code that gets copied to web/js/libs/, it’s still a boatload of code to deploy to the Tessel – especially since it will all simply be served right back to a client and isn’t really needed to be resident on the board.Using a CDN insteadThe client machine running the JET code doesn’t really care where the Require.js, Knockout, oj, and other supporting code comes from, as long as it gets there fast.  Instead of serving these dependency libraries off of a low-power IoT board like the Tessel, we can rewrite our JET configs and use a content delivery network to serve up all the libraries when our client accesses the app we deploy to our Express server.Starting with v4.0.0, Oracle JET is available via a CDN and doesn’t have to be running from the same server that delivers your html and js files.The instructions in that documentation link are straightforward:  You change the path mappings for Require.js in main.js and main-release-paths.json and also point to the hosted Alta stylesheet and Require.js bootstrap in index.html.  In that same file I also had to remove the &lt;!-- injector:theme --&gt; comment pair because the build scripts would otherwise try to keep reinserting the local reference to the standard theme’s stylesheet instead of respecting the CDN-hosted Alta stylesheet.Deploying to a microcontroller’s node.jsWith the CDN-only version of my JET code, I was able to deploy the built index.html, main.js and appcontroller.js files from a ojet create --template=basic project to be delivered by the Express server running on my Tessel’s node.js.  Per the instructions in the J5IK tutorial, I slipped the assets in an app folder and mapped it as a static Express route.  But thanks to the CDN there was no need to add the JET dependencies from the node_modules folder into the .tesselinclude file.This way I “upgraded” the gauges to JET and was able to use websockets to stream the Tessel’s BME280 environmental sensors’ data to the JET visualizations.  The modified code up on GitHub also shows how to hook Socket.io into the Require.js framework for JET.Gauges built with JET's &lt;oj-status-meter-gauge&gt;Using the CDN for JSFiddles and CodePensWe had to use a similar idea in the past to deploy sample JET code to services such as JSFiddle and CodePen (which don’t have an option to dynamically load JET). Back then we set up links to raw GitHub files as a poor-man’s CDN, but with the official approach available now I’ve rewritten the CodePen and JSFiddle templates and you can fork these to prototype JET ideas or troubleshoot implementation issues.",
      "content_html": "<p>While playing with some IoT devices such as the JavaScript-centric <a href=\"https://www.sparkfun.com/j5ik\">JohnnyFive Tessel 2 board</a>, I wanted to deploy some JET code onto the microcontroller to be delivered by the board’s Express Node.js server.  </p><p>In the Tessel tutorial there is <a href=\"https://learn.sparkfun.com/tutorials/experiment-guide-for-the-johnny-five-inventors-kit/experiment-10-using-the-bme280\">sample code that uses the JustGage library</a> to show sensor data streaming via Socket.io. The deployment steps in that tutorial describe how to ship the supporting node_modules over to the Tessel 2 board, but the more you add to your project the heavier the deployment becomes and the longer it takes to copy over.</p><figure class=\"full zoomable\"><img src=\"/images/20180101/justgage-gauges.png\" /><figcaption>Gauges built with JustGage, which is deployed and served by the Node.js Express server</figcaption></figure><p>Shipping all of the JET supporting modules and all of their dependencies is a whole lot heavier than only one library like JustGage.  Even if you take steps to whittle down the included JET module bundles or minimize the code that gets copied to <code>web/js/libs/</code>, it’s still a boatload of code to deploy to the Tessel – especially since it will all simply be served right back to a client and isn’t really needed to be resident on the board.</p><h2 id=\"using-a-cdn-instead\">Using a CDN instead</h2><p>The client machine running the JET code doesn’t really care where the Require.js, Knockout, oj, and other supporting code comes from, as long as it gets there fast.  Instead of serving these dependency libraries off of a low-power IoT board like the Tessel, we can rewrite our JET configs and use a content delivery network to serve up all the libraries when our client accesses the app we deploy to our Express server.</p><p>Starting with v4.0.0, <a href=\"https://docs.oracle.com/middleware/jet410/jet/developer/GUID-219A636B-0D0B-4A78-975B-0528497A82DD.htm#JETDG-GUID-219A636B-0D0B-4A78-975B-0528497A82DD\">Oracle JET is available via a CDN</a> and doesn’t have to be running from the same server that delivers your html and js files.</p><p>The instructions in that documentation link are straightforward:  You change the path mappings for Require.js in <code>main.js</code> and <code>main-release-paths.json</code> and also point to the hosted Alta stylesheet and Require.js bootstrap in <code>index.html</code>.  In that same file I also had to remove the <code>&lt;!-- injector:theme --&gt;</code> comment pair because the build scripts would otherwise try to keep reinserting the local reference to the standard theme’s stylesheet instead of respecting the CDN-hosted Alta stylesheet.</p><h2 id=\"deploying-to-a-microcontrollers-nodejs\">Deploying to a microcontroller’s node.js</h2><p>With the CDN-only version of my JET code, I was able to deploy the built <code>index.html</code>, <code>main.js</code> and <code>appcontroller.js</code> files from a <code>ojet create --template=basic</code> project to be delivered by the Express server running on my Tessel’s node.js.  Per the instructions in the J5IK tutorial, I slipped the assets in an <code>app</code> folder and mapped it as a static Express route.  But thanks to the CDN there was no need to add the JET dependencies from the <code>node_modules</code> folder into the <code>.tesselinclude</code> file.</p><p>This way I “upgraded” the gauges to JET and was able to use websockets to stream the Tessel’s BME280 environmental sensors’ data to the JET visualizations.  The <a href=\"https://github.com/pthaden/j5ik-Experiment10\">modified code up on GitHub</a> also shows how to hook Socket.io into the Require.js framework for JET.</p><figure class=\"full zoomable\"><img src=\"/images/20180101/jet-gauges.png\" /><figcaption>Gauges built with JET's <code>&lt;oj-status-meter-gauge&gt;</code></figcaption></figure><h2 id=\"using-the-cdn-for-jsfiddles-and-codepens\">Using the CDN for JSFiddles and CodePens</h2><p>We had to use a similar idea in the past to deploy sample JET code to services such as JSFiddle and CodePen (which don’t have an option to dynamically load JET). <a href=\"/2016/09/27/jsfiddle-jet-base-for-2.1.0/\">Back then we set up links to raw GitHub files</a> as a poor-man’s CDN, but with the official approach available now I’ve rewritten the <a href=\"https://codepen.io/pthaden/pen/PEjWyo\">CodePen</a> and <a href=\"https://jsfiddle.net/pthaden/h77Logno/\">JSFiddle</a> templates and you can fork these to prototype JET ideas or troubleshoot implementation issues.</p>"
    },
  
    {
      "title": "Reprise: Using Grunt to Create a WAR file",
      "date_published": "2017-08-09T00:00:00+00:00",
      "date_modified": "2017-08-09T00:00:00+00:00",
      "id": "/2017/08/09/updated-using-grunt-to-create-war-jet3x/",
      "url": "http://www.likeahouseafire.com/2017/08/09/updated-using-grunt-to-create-war-jet3x/",
      
      
      
      "tags": ["Oracle JET","Grunt","JCS","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Updated for JET 3.x: Leveraging Oracle JET's Grunt setups to create a WAR file from the release:build process to deploy a JET project to Java Cloud",
      "content_text": "A long time ago, I drafted notes on how to tweak Oracle JET’s Grunt configurations to automatically build WAR files. This was in the days of JET 2.x, so those notes don’t work quite right anymore.  By the time JET 3.0.0 shipped, major changes to the Grunt tooling changed the way the grunt serve and grunt build commands worked internally.In the “old” days, the Oracle JET tooling was a series of Grunt tasks that were run in sequence, such as bowercopy and uglify.  These would run in order when you executed a command like grunt build:release.  But in the current version, these individual commands were replaced with a single npm module named oraclejet-tooling that runs all of the build or serve steps as a single Grunt task.  Although this task can be configured to act differently, we have to change the the way we extend our build process with additional steps if we want to do something like build an asset for deployment.Instead of modifying the tooling’s oraclejet-build steps, we’ll tack our WAR-creation step on the end of the build task.Installing grunt-warWe’ll use a clean JET 3.2.0 NavBar project as the basis.  If you don’t already have a JET project, scaffold one out at the command line:yo oraclejet 320navbar --template=navbarChange to the project folder and then install the grunt-war plugin same as before:npm install grunt-war --save-devCreating scripts/grunt/config/war.jsIf you look around in your 3.x project, you’ll see that the /scripts/grunt/ directory is pretty clean as compared to the JET 2.0.0 days.  In fact, there are only two files in the config directory: oraclejet-build.js and oraclejet-serve.js, and both of them are mostly commented out.  These files are the way you configure the behavior of the oraclejet-tooling, the details of which is now hidden away in the node_modules directory.But this directory is still the place where we put our configuration for the newly-added grunt-war module.  As before, since the plugin is named grunt-war, the config file should be named war.js.  Create a file named scripts/grunt/config/war.js:war.jsmodule.exports =  {   /*   * Build a WAR (web archive) without Maven or the JVM installed.   *   * Template strings in the &lt;%= %&gt; tags are set in the data section of Gruntfile.js,   *  or you can hardcode the strings here instead   */              target: {          options: {            war_dist_folder: &#39;&lt;%= distdir %&gt;&#39;,      /* Folder to generate the WAR into, set in data section of Gruntfile.js */            war_name: &#39;&lt;%= appname %&gt;&#39;,            /* The name for the WAR file (.war will be the extension) */            webxml_webapp_version: &#39;2.5&#39;, /* I needed this older version for JCS-SX */              war_extras: [ {filename: &#39;grunt-war-credits.txt&#39;, data: &#39;This line will appear in the file!\\n see http://likeahouseafire.com/2017/08/09/updated-using-grunt-to-create-war-jet3x/ &#39;},                           {filename: &#39;WEB-INF/weblogic.xml&#39;, data: &#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\\n&lt;weblogic-web-app xmlns=&quot;http://www.bea.com/ns/weblogic/90&quot; xmlns:j2ee=&quot;http://java.sun.com/xml/ns/j2ee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.bea.com/ns/weblogic/90 http://www.bea.com/ns/weblogic/90/weblogic-web-app.xsd&quot;&gt;\\n  &lt;jsp-descriptor&gt;\\n    &lt;keepgenerated&gt;true&lt;/keepgenerated&gt;\\n    &lt;debug&gt;true&lt;/debug&gt;\\n  &lt;/jsp-descriptor&gt;\\n  &lt;context-root&gt;/&lt;%= appname %&gt;&lt;/context-root&gt;\\n&lt;/weblogic-web-app&gt;&#39;}],                                          /* the war_extras are extra files to be generated, needed since grunt-war doesn&#39;t create a weblogic.xml */                                          /* also notice that we&#39;re using the &lt;%= appname %&gt; variable in there */              webxml_welcome: &#39;index.html&#39;, /* to point web.xml to the default page */            webxml_webapp_extras: [ &#39;&lt;login-config /&gt;\\n&#39;, &#39;&lt;session-config&gt;\\n    &lt;session-timeout&gt;\\n    30\\n    &lt;/session-timeout&gt;\\n&lt;/session-config&gt;\\n&#39; ]                                            /* some extra settings for web.xml to work with JCS-SX */          },          files: [            {              expand: true,              cwd: &#39;&lt;%= appdir %&gt;&#39;,             /* find the source files for the WAR in the /web folder, set in Gruntfile.js */              src: [&#39;**&#39;],              dest: &#39;&#39;            }          ]        }         };Note that this code has a bunch of fancy template string variables in &lt;%=  %&gt; tags.  This is so the WAR filename and context root can be set the same as the project directory name, as well as setting the build directory locations.  We’ll set these variables in the Gruntfile, below.Modifying Gruntfile.jsBefore, we added the war task to the build step by modifying a build.js file, but this doesn’t exist in our project source files anymore because the oraclejet-build step is encapsulated inside the node_modules directory.But we are still OK because we don’t really want to interject our WAR step in the middle of the oraclejet-build steps; we want it to come at the very end of the flow.  Since this is the case, we can add our war step to the project’s Gruntfile.js:Gruntfile.js&#39;use strict&#39;;var path = require(&#39;path&#39;);module.exports = function(grunt) {  require(&#39;load-grunt-config&#39;)(grunt, {    configPath: path.join(process.cwd(), &#39;scripts/grunt/config&#39;),    data: {      appname: path.basename(process.cwd()),  // same as project directory name, accessible with &#39;&lt;%= appname %&gt;&#39;      appdir: &#39;web&#39;,  // accessible with &#39;&lt;%= appdir %&gt;&#39;      distdir: &#39;dist&#39;  // accessible with &#39;&lt;%= distdir %&gt;&#39;    }  });  grunt.loadNpmTasks(&quot;grunt-oraclejet&quot;);  //grunt.loadNpmTasks(&quot;grunt-war&quot;);  grunt.registerTask(&quot;build&quot;, &quot;Public task. Calls oraclejet-build to build the oraclejet application. Can be customized with additional build tasks.&quot;, function (buildType) {    grunt.task.run([`oraclejet-build:${buildType}`, &#39;war&#39;]);  });  grunt.registerTask(&quot;serve&quot;, &quot;Public task. Calls oraclejet-serve to serve the oraclejet application. Can be customized with additional serve tasks.&quot;, function (buildType) {    grunt.task.run([`oraclejet-serve:${buildType}`]);  }); };Note that we simply add our war task to the end of the array in the “build” registerTask function:grunt.task.run([`oraclejet-build:${buildType}`, &#39;war&#39;]);Since we want it to happen after the oraclejet-build task is done, this will work perfect.Also note that the template string variables like &lt;%= appname %&gt; and &lt;%= distdir %&gt; are set here in the data section of this file, and that we can use Node.js functions like path.basename() to dynamically get the name of the directory.  These template strings could be used in other custom Grunt tasks as well.This is all we need to update our WAR file scripts.  Run grunt build:release and you’ll have a WAR file sitting in the /dist directory, suitable for deploying to JCS.  We could use this same idea to deploy to ACCS or other platforms that need a zipped deployment asset with manifest files by tweaking the settings in the war.js config file.But what if you did want to change the flow of oraclejet-build?With the details of the build and serve tasks hidden away in the node_modules directory, you might think you can’t change their behavior.  But JET makes provision for customizing some of the steps that these two tasks follow.See the Customize a Web Application’s Grunt Build Behavior section of the documentation for details on how JET dynamically merges together changes you make to the files scripts/grunt/config/oraclejet-build.js and oraclejet-serve.js with its own settings when you run Grunt.  Also, you can have a looky-see at the source code in node_modules/oraclejet-tooling, especially the node_modules/oraclejet-tooling/lib/defaultconfig.js file, for more insight on how the tooling works.  Just remember not to tweak the files under node_modules because that defeats the whole idea of a package manager. ",
      "content_html": "<p>A long time ago, I drafted <a href=\"http://likeahouseafire.com/2016/04/22/using-grunt-to-create-war/\">notes on how to tweak Oracle JET’s Grunt configurations to automatically build WAR files</a>. This was in the days of JET 2.x, so those notes don’t work quite right anymore.  By the time JET 3.0.0 shipped, <a href=\"http://www.oracle.com/webfolder/technetwork/jet-300/globalSupport-releaseNotes.html#tooling_changes\">major changes</a> to the Grunt tooling changed the way the <code>grunt serve</code> and <code>grunt build</code> commands worked internally.</p><p>In the “old” days, the Oracle JET tooling was a series of Grunt tasks that were run in sequence, such as <code>bowercopy</code> and <code>uglify</code>.  These would run in order when you executed a command like <code>grunt build:release</code>.  But in the current version, these individual commands were replaced with a single npm module named <code>oraclejet-tooling</code> that runs all of the build or serve steps as a single Grunt task.  Although this task can be configured to act differently, we have to change the the way we extend our build process with additional steps if we want to do something like build an asset for deployment.</p><p>Instead of modifying the tooling’s <code>oraclejet-build</code> steps, we’ll tack our WAR-creation step on the end of the build task.</p><h2 id=\"installing-grunt-war\">Installing grunt-war</h2><p>We’ll use a clean JET 3.2.0 NavBar project as the basis.  If you don’t already have a JET project, scaffold one out at the command line:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">yo oraclejet 320navbar --template<span class=\"o\">=</span>navbar</code></pre></div><p>Change to the project folder and then install the <a href=\"https://www.npmjs.com/package/grunt-war\">grunt-war plugin</a> same as before:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">npm install grunt-war --save-dev</code></pre></div><h2 id=\"creating-scriptsgruntconfigwarjs\">Creating scripts/grunt/config/war.js</h2><p>If you look around in your 3.x project, you’ll see that the <code>/scripts/grunt/</code> directory is pretty clean as compared to the JET 2.0.0 days.  In fact, there are only two files in the <code>config</code> directory: <code>oraclejet-build.js</code> and <code>oraclejet-serve.js</code>, and both of them are mostly commented out.  These files are the way you configure the behavior of the oraclejet-tooling, the details of which is now hidden away in the <code>node_modules</code> directory.</p><p>But this directory is still the place where we put our configuration for the newly-added <code>grunt-war</code> module.  As before, since the plugin is named grunt-<strong>war</strong>, the config file should be named <strong>war</strong>.js.  Create a file named <code>scripts/grunt/config/war.js</code>:</p><h4 id=\"warjs\">war.js</h4><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span>  <span class=\"p\">{</span>   <span class=\"cm\">/*</span><span class=\"cm\">   * Build a WAR (web archive) without Maven or the JVM installed.</span><span class=\"cm\">   *</span><span class=\"cm\">   * Template strings in the &lt;%= %&gt; tags are set in the data section of Gruntfile.js,</span><span class=\"cm\">   *  or you can hardcode the strings here instead</span><span class=\"cm\">   */</span>              <span class=\"nx\">target</span><span class=\"o\">:</span> <span class=\"p\">{</span>          <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>            <span class=\"nx\">war_dist_folder</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&lt;%= distdir %&gt;&#39;</span><span class=\"p\">,</span>      <span class=\"cm\">/* Folder to generate the WAR into, set in data section of Gruntfile.js */</span>            <span class=\"nx\">war_name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&lt;%= appname %&gt;&#39;</span><span class=\"p\">,</span>            <span class=\"cm\">/* The name for the WAR file (.war will be the extension) */</span>            <span class=\"nx\">webxml_webapp_version</span><span class=\"o\">:</span> <span class=\"s1\">&#39;2.5&#39;</span><span class=\"p\">,</span> <span class=\"cm\">/* I needed this older version for JCS-SX */</span>              <span class=\"nx\">war_extras</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"p\">{</span><span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;grunt-war-credits.txt&#39;</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"s1\">&#39;This line will appear in the file!\\n see http://likeahouseafire.com/2017/08/09/updated-using-grunt-to-create-war-jet3x/ &#39;</span><span class=\"p\">},</span>                           <span class=\"p\">{</span><span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;WEB-INF/weblogic.xml&#39;</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\\n&lt;weblogic-web-app xmlns=&quot;http://www.bea.com/ns/weblogic/90&quot; xmlns:j2ee=&quot;http://java.sun.com/xml/ns/j2ee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.bea.com/ns/weblogic/90 http://www.bea.com/ns/weblogic/90/weblogic-web-app.xsd&quot;&gt;\\n  &lt;jsp-descriptor&gt;\\n    &lt;keepgenerated&gt;true&lt;/keepgenerated&gt;\\n    &lt;debug&gt;true&lt;/debug&gt;\\n  &lt;/jsp-descriptor&gt;\\n  &lt;context-root&gt;/&lt;%= appname %&gt;&lt;/context-root&gt;\\n&lt;/weblogic-web-app&gt;&#39;</span><span class=\"p\">}],</span>                                          <span class=\"cm\">/* the war_extras are extra files to be generated, needed since grunt-war doesn&#39;t create a weblogic.xml */</span>                                          <span class=\"cm\">/* also notice that we&#39;re using the &lt;%= appname %&gt; variable in there */</span>              <span class=\"nx\">webxml_welcome</span><span class=\"o\">:</span> <span class=\"s1\">&#39;index.html&#39;</span><span class=\"p\">,</span> <span class=\"cm\">/* to point web.xml to the default page */</span>            <span class=\"nx\">webxml_webapp_extras</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;&lt;login-config /&gt;\\n&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;session-config&gt;\\n    &lt;session-timeout&gt;\\n    30\\n    &lt;/session-timeout&gt;\\n&lt;/session-config&gt;\\n&#39;</span> <span class=\"p\">]</span>                                            <span class=\"cm\">/* some extra settings for web.xml to work with JCS-SX */</span>          <span class=\"p\">},</span>          <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[</span>            <span class=\"p\">{</span>              <span class=\"nx\">expand</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>              <span class=\"nx\">cwd</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&lt;%= appdir %&gt;&#39;</span><span class=\"p\">,</span>             <span class=\"cm\">/* find the source files for the WAR in the /web folder, set in Gruntfile.js */</span>              <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;**&#39;</span><span class=\"p\">],</span>              <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span>            <span class=\"p\">}</span>          <span class=\"p\">]</span>        <span class=\"p\">}</span>         <span class=\"p\">};</span></code></pre></div><p>Note that this code has a bunch of fancy template string variables in <code>&lt;%=  %&gt;</code> tags.  This is so the WAR filename and context root can be set the same as the project directory name, as well as setting the build directory locations.  We’ll set these variables in the Gruntfile, below.</p><h2 id=\"modifying-gruntfilejs\">Modifying Gruntfile.js</h2><p>Before, we added the war task to the build step by modifying a <code>build.js</code> file, but this doesn’t exist in our project source files anymore because the <code>oraclejet-build</code> step is encapsulated inside the <code>node_modules</code> directory.</p><p>But we are still OK because we don’t really want to interject our WAR step in the middle of the <code>oraclejet-build</code> steps; we want it to come at the very end of the flow.  Since this is the case, we can add our war step to the project’s <code>Gruntfile.js</code>:</p><h4 id=\"gruntfilejs\">Gruntfile.js</h4><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"s1\">&#39;use strict&#39;</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;load-grunt-config&#39;</span><span class=\"p\">)(</span><span class=\"nx\">grunt</span><span class=\"p\">,</span> <span class=\"p\">{</span>    <span class=\"nx\">configPath</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">cwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;scripts/grunt/config&#39;</span><span class=\"p\">),</span>    <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"p\">{</span>      <span class=\"nx\">appname</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">basename</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">cwd</span><span class=\"p\">()),</span>  <span class=\"c1\">// same as project directory name, accessible with &#39;&lt;%= appname %&gt;&#39;</span>      <span class=\"nx\">appdir</span><span class=\"o\">:</span> <span class=\"s1\">&#39;web&#39;</span><span class=\"p\">,</span>  <span class=\"c1\">// accessible with &#39;&lt;%= appdir %&gt;&#39;</span>      <span class=\"nx\">distdir</span><span class=\"o\">:</span> <span class=\"s1\">&#39;dist&#39;</span>  <span class=\"c1\">// accessible with &#39;&lt;%= distdir %&gt;&#39;</span>    <span class=\"p\">}</span>  <span class=\"p\">});</span>  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">loadNpmTasks</span><span class=\"p\">(</span><span class=\"s2\">&quot;grunt-oraclejet&quot;</span><span class=\"p\">);</span>  <span class=\"c1\">//grunt.loadNpmTasks(&quot;grunt-war&quot;);</span>  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">registerTask</span><span class=\"p\">(</span><span class=\"s2\">&quot;build&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Public task. Calls oraclejet-build to build the oraclejet application. Can be customized with additional build tasks.&quot;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">buildType</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">task</span><span class=\"p\">.</span><span class=\"nx\">run</span><span class=\"p\">([</span><span class=\"err\">`</span><span class=\"nx\">oraclejet</span><span class=\"o\">-</span><span class=\"nx\">build</span><span class=\"o\">:</span><span class=\"nx\">$</span><span class=\"p\">{</span><span class=\"nx\">buildType</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">,</span> <span class=\"s1\">&#39;war&#39;</span><span class=\"p\">]);</span>  <span class=\"p\">});</span>  <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">registerTask</span><span class=\"p\">(</span><span class=\"s2\">&quot;serve&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Public task. Calls oraclejet-serve to serve the oraclejet application. Can be customized with additional serve tasks.&quot;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">buildType</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">task</span><span class=\"p\">.</span><span class=\"nx\">run</span><span class=\"p\">([</span><span class=\"err\">`</span><span class=\"nx\">oraclejet</span><span class=\"o\">-</span><span class=\"nx\">serve</span><span class=\"o\">:</span><span class=\"nx\">$</span><span class=\"p\">{</span><span class=\"nx\">buildType</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">]);</span>  <span class=\"p\">});</span> <span class=\"p\">};</span></code></pre></div><p>Note that we simply add our <code>war</code> task to the end of the array in the “build” <code>registerTask</code> function:</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">task</span><span class=\"p\">.</span><span class=\"nx\">run</span><span class=\"p\">([</span><span class=\"err\">`</span><span class=\"nx\">oraclejet</span><span class=\"o\">-</span><span class=\"nx\">build</span><span class=\"o\">:</span><span class=\"nx\">$</span><span class=\"p\">{</span><span class=\"nx\">buildType</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">,</span> <span class=\"s1\">&#39;war&#39;</span><span class=\"p\">]);</span></code></pre></div><p>Since we want it to happen after the <code>oraclejet-build</code> task is done, this will work perfect.</p><p>Also note that the template string variables like <code>&lt;%= appname %&gt;</code> and <code>&lt;%= distdir %&gt;</code> are set here in the <code>data</code> section of this file, and that we can use Node.js functions like <code>path.basename()</code> to dynamically get the name of the directory.  These template strings could be used in other custom Grunt tasks as well.</p><p>This is all we need to update our WAR file scripts.  Run <code>grunt build:release</code> and you’ll have a WAR file sitting in the <code>/dist</code> directory, suitable for deploying to JCS.  We could use this same idea to deploy to ACCS or other platforms that need a zipped deployment asset with manifest files by tweaking the settings in the <code>war.js</code> config file.</p><h2 id=\"but-what-if-you-did-want-to-change-the-flow-of-oraclejet-build\">But what if you did want to change the flow of oraclejet-build?</h2><p>With the details of the <code>build</code> and <code>serve</code> tasks hidden away in the <code>node_modules</code> directory, you might think you can’t change their behavior.  But JET makes provision for customizing some of the steps that these two tasks follow.</p><p>See the <a href=\"http://docs.oracle.com/middleware/jet320/jet/developer/GUID-ACB7BD4E-BAAC-4A9E-B52A-6B2933CD222C.htm#GUID-35A28E14-A97E-48A6-8C0D-64E9E5DF77AB\">Customize a Web Application’s Grunt Build Behavior</a> section of the documentation for details on how JET dynamically merges together changes you make to the files <code>scripts/grunt/config/oraclejet-build.js</code> and <code>oraclejet-serve.js</code> with its own settings when you run Grunt.  </p><p>Also, you can have a looky-see at the source code in <code>node_modules/oraclejet-tooling</code>, especially the <code>node_modules/oraclejet-tooling/lib/defaultconfig.js</code> file, for more insight on how the tooling works.  Just remember not to tweak the files under <code>node_modules</code> because that defeats the whole idea of a package manager. </p>"
    },
  
    {
      "title": "My Favorite WWDC17 Sessions",
      "date_published": "2017-06-12T00:00:00+00:00",
      "date_modified": "2017-06-12T00:00:00+00:00",
      "id": "/2017/06/12/my-favorite-wwdc17-sessions/",
      "url": "http://www.likeahouseafire.com/2017/06/12/my-favorite-wwdc17-sessions/",
      
      
      
      "tags": ["Apple","WWDC","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "It's my first Apple Developer's Conference!",
      "content_text": "Thanks to colleagues who – while much more worthy of the conference – were unable to attend WWDC at the last minute, I got to use their hand-me-down lottery ticket to go to my first Developers Conference in San Jose.  Here are some of my favorite WWDC17 sessions:      Introducing Drag and Drop — They go deep on this new feature in iOS11 and give an cool demo of all the multi-hand/multi-finger chording techniques        Introducing Core ML — Apple is making machine learning something easy to incorporate into apps. So they’re not trying to reinvent the training process, but they are definitely making consumption of already-trained models as easy as drag-and-drop.  This session was a good primer on how to incorporate a model in your code        Natural Language Processing and your Apps — This session helped me walk thorough how you use NSLinguisticTagger and I got to play around with it in Swift Playgrounds down in the labs        Designing Sound — This was a brilliant session with many familiar sounds that showed the power of sound design        Essential Design Principles — The design team shared lots of principles, but I really enjoyed the “Design Shorts” sessions where topic after topic were presented for 10 minutes a piece.  Here are some good ones:          60 Second Prototyping      Designing Glyphs       Rich Notifications       How to Pick a Custom Font      What’s New in iOS: Wayfinding, Typographic Hierarchy, Contrast      App Icon Design      Communication Between Designers and Engineers      Love at First Launch            Convenience for You is Independence for Me — The Quadfather spoke in-person about his experience and the importance of accessibility  There are many more video recordings from WWDC17 and previous conferences, and they’re all available in the WWDC app as well.   ",
      "content_html": "<p>Thanks to colleagues who – while much more worthy of the conference – were unable to attend WWDC at the last minute, I got to use their hand-me-down lottery ticket to go to my first Developers Conference in San Jose.  Here are some of my favorite WWDC17 sessions:</p><ul>  <li>    <p><a href=\"https://developer.apple.com/wwdc17/203\">Introducing Drag and Drop</a> — They go deep on this new feature in iOS11 and give an cool demo of all the multi-hand/multi-finger chording techniques</p>  </li>  <li>    <p><a href=\"https://developer.apple.com/wwdc17/703\">Introducing Core ML</a> — Apple is making machine learning something easy to incorporate into apps. So they’re not trying to reinvent the training process, but they are <a href=\"http://deepdojo.com/apple-introduces-core-ml\">definitely making consumption of already-trained models as easy as drag-and-drop</a>.  This session was a good primer on how to incorporate a model in your code</p>  </li>  <li>    <p><a href=\"https://developer.apple.com/wwdc17/208\">Natural Language Processing and your Apps</a> — This session helped me walk thorough how you use NSLinguisticTagger and I got to play around with it in Swift Playgrounds down in the labs</p>  </li>  <li>    <p><a href=\"https://developer.apple.com/wwdc17/803\">Designing Sound</a> — This was a brilliant session with many familiar sounds that showed the power of sound design</p>  </li>  <li>    <p><a href=\"https://developer.apple.com/wwdc17/802\">Essential Design Principles</a> — The design team shared lots of principles, but I really enjoyed the “Design Shorts” sessions where topic after topic were presented for 10 minutes a piece.  Here are some good ones:</p>    <ul>      <li><a href=\"https://developer.apple.com/videos/play/wwdc2017/818/\">60 Second Prototyping</a></li>      <li><a href=\"https://developer.apple.com/videos/play/wwdc2017/823/\">Designing Glyphs</a> </li>      <li><a href=\"https://developer.apple.com/videos/play/wwdc2017/817/\">Rich Notifications</a> </li>      <li><a href=\"https://developer.apple.com/videos/play/wwdc2017/815/\">How to Pick a Custom Font</a></li>      <li><a href=\"https://developer.apple.com/videos/play/wwdc2017/810\">What’s New in iOS: Wayfinding, Typographic Hierarchy, Contrast</a></li>      <li><a href=\"https://developer.apple.com/videos/play/wwdc2017/822/\">App Icon Design</a></li>      <li><a href=\"https://developer.apple.com/videos/play/wwdc2017/809\">Communication Between Designers and Engineers</a></li>      <li><a href=\"https://developer.apple.com/videos/play/wwdc2017/816/\">Love at First Launch</a></li>    </ul>  </li>  <li>    <p><a href=\"https://developer.apple.com/wwdc17/110\">Convenience for You is Independence for Me</a> — <a href=\"https://www.youtube.com/watch?v=4PoE9tHg_P0\">The Quadfather</a> spoke in-person about his experience and the importance of accessibility</p>  </li></ul><p>There are many more video recordings from WWDC17 and previous conferences, and they’re all available in the WWDC app as well.   </p>"
    },
  
    {
      "title": "Install a SSL Certificate Directly onto Java Cloud Service",
      "date_published": "2017-05-18T00:00:00+00:00",
      "date_modified": "2017-05-18T00:00:00+00:00",
      "id": "/2017/05/18/install-ssl-cert-jcs/",
      "url": "http://www.likeahouseafire.com/2017/05/18/install-ssl-cert-jcs/",
      
      
      
      
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Use SSH access and cheap certificates to run SSL for reals on on your demo and prototype JCS servers",
      "content_text": "When you provision an Oracle Java Cloud Service (JCS) instance, you get a full Weblogic server with a real IP address on the public internet, configured (via Compute Cloud) to listen for http on port 80 and https on port 443. What you don’t get is a DNS entry for your server nor a SSL certificate – you’re responsible for setting these up yourself.What this means is when you surf to a https:// flavor of URL for your freshly-created server, your browser will alert you that the demo SSL certificates are invalid:If this is just a prototype server, maybe you’re alright with clicking through and telling the browser that things are safe.  Putting up with the red line through the https:// in the address bar is not a big deal.  However, we had a need to reconfigure a demo JCS server with real, valid SSL certificates so that we could embed our content inside other servers with valid SSL certs.Now there’s an official way to do this properly, but that process requires a Load Balancer node for each JCS instance each of which consumes an OCPU. In our trial environment, we had a limited quota of OCPUs. Instead of registering our SSL certificates the right way through the Oracle Cloud wizards, the following steps configure the Weblogic server directly with a real SSL certificate:  Register your domain and add DNS entry for your JCS server’s public IP  Get SSH access to your JCS VM server  Create a keystore and a CSR  Request and Obtain a SSL Certificate  Import the certificate into your keystore  Configure Weblogic to use the keystore  Test and revel in your successBefore we begin, I just want to emphasize that this is not the approved way to do SSL on JCS.  While it will get you through in a pinch if all you need is a valid https connection, it is definitely not an official supported configuration.  But hey, JCS is Weblogic underneath, and you might find these are good instructions even if you’re just setting up SSL on an on-premise server.Register your domain and add DNS entry for your JCS server’s public IPAssuming you don’t already have a corporate domain and the DNS infrastructure in place to support it, the first step is to pick a domain name, register it, and then add a DNS A record pointing at your JCS server.I used DNSimple to register a custom domain name and then added an A record for my JCS public IP address.The important thing is that you have access to the email address used for the domain administrator (even if it’s hidden behind Whois privacy protect; that’s fine), since we’ll be using that to verify you own the domain when we register the SSL certificate, below.Get SSH access to your JCS VM serverWe’re going to get down in the weeds here so we’ll need shell access to the VM that the JCS Weblogic server is running on.You’ll need a pair of SSH keys generated on your computer so that you can upload your public key to the JCS server. Navigate to the JCS Service Console and pull down the hamburger menu for your JCS instance. Choose SSH Access and upload your new SSH Public Key file. This process will reboot the VM that your JCS instance is running on, so make sure you schedule for the outage.After the reboot, if everything worked right, you should be able to use your private .ssh key to access the shell prompt on your JCS VM. You’ll connect as the opc user and use the JCS VM’s IP address for the host:ssh opc@123.45.67.89Create a keystore and a CSROnce you’re connected you’re logged in as the opc user, but that user has very little access to the juicy parts of your Weblogic installation. However, the opc user does have sudo, so you can become the oracle user:[opc@myjcsserver ~]$ sudo su - oracleNow you can start setting up the SSL keystores as the oracle user, and Weblogic will be able to load your certificates because it will have the proper file system permissions.  I sourced the $DOMAIN_HOME environment out of habit:-bash-4.1$ cd /u01/data/domains/myjcsser_domain/bin-bash-4.1$ ./setDomainEnv.sh   # source the environment vars for weblogic domainNext, you need a place to put the keystore. I stuck mine in a shallow directory I knew I’d remember later when I needed to key it into the Weblogic admin console:-bash-4.1$ mkdir /u01/data/keystores &amp;&amp; cd $_Our final steps for this phase are to create a keystore and then a certificate signing request to send to our SSL provider. First you’ll use keytool to create a keystore and generate a key pair all at the same time.  Then you’ll used keytool again to create a certificate signing request (CSR) file.  Last you’ll spool that CSR file to the screen:-bash-4.1$ keytool -genkeypair \\ -alias myjcsserver_cert \\ -keyalg RSA \\ -sigalg SHA256withRSA -keysize 2048 \\ -dname &quot;CN=myjcsserver.orclpaas.com,OU=NAA Sales Consulting,O=Oracle Corporation,L=Redwood City,ST=California,C=US&quot; \\ -keypass myKEYpwdis#1 \\ -keystore keystore.jks \\ -storepass mySTOREpwdis#1too-bash-4.1$ keytool -certreq -v \\ -alias myjcsserver_cert \\ -file myjcsserver-orclpaas-com_cert.csr \\ -keypass myKEYpwdis#1 \\ -keystore keystore.jks \\ -storepass mySTOREpwdis#1tooCertification request stored in file &lt;myjcsserver-orclpaas-com_cert.csr&gt;Submit this to your CA-bash-4.1$ cat myjcsserver-orclpaas-com_cert.csr-----BEGIN NEW CERTIFICATE REQUEST-----MIIDDjCCAfYCAQAwgZgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRUwEwYDVQQHEwxSZWR3b29kIENpdHkxGzAZBgNVBAoTEk9yYWNsZSBDb3Jwb3JhdGlvbjEdMBsGA1UECxMUTkFBIFNhbGVzIENvbnN1bHRpbmcxITAfBgNVBAMTGG15...blahblahblahthisgoesonforawhile...TYlXaaRcchwNdRgFGzFc5vz5kxhRaQ8H4L05gbBxI7RHAhjsZNrO2M2atUFjhhVk08z1ojlqjEKlYCgt6nMYigdFvRFVKGnrp6DOGjQ+t9DGpyLZ7xU-----END NEW CERTIFICATE REQUEST-----The first step will create a new /u01/data/keystores/keystore.jks file. Use your fully-qualified distinguished name, and make note of the key password and store password, as you’ll need them in later steps and when you configure Weblogic.The second step registers a signing request inside the keystore and then creates a CSR file you can use to initiate the process with your certificate authority.  Copy that echoed-out CSR to the clipboard: you’ll need it in the next step when you request your SSL certificate.Request and Obtain a SSL CertificateThere are lots of vendors who will provide trusted SSL certificates to match your DNS domain.  Your company may already have an arrangement with one of these vendors, and you should follow their process if your hostname falls under their DNS.Since I created my own DNS domain with DNSimple, at first I attempted to use their SSL Certificates process to broker a cert from Comodo but had a lot of grief with their automated support.  So a better solution for me was to go with Cheap$$L Security to get a RapidSSL certificate.BTW, LetsEncrypt is a newer player on the SSL scene, and their free certificates had great appeal for our prototype project, but the 90-day limit on certificates before they expire and the work it would take to automate the process on the JCS compute node wasn’t worth the hassle compared to a few bucks for a cheap SSL cert, IMHO.If you, like me, are managing your own DNS domain you can choose one of the cheapest Domain Validation certificates – especially since this is just for prototyping.  If this were for a production server or for doing eCommerce, you might want to shell out for a Extended Validated so that your users might put more trust in you because they get better feedback in the browsers’ address bars.  Like we said before, these steps are already a hack:  you shouldn’t be following these steps for anything production!Another option you might consider, even though it’s more expensive:  if you’re going to do a lot of SSL certificates or be renaming your DNS entries for your prototypes, a wildcard certificate is a lot easier to work with as you don’t have to register each and every DNS hostname with a unique CSR.  However, these steps assume a single-hostname certificate request.So click the Buy Now button for the RapidSSL Certificate.  I chose just a one-year cert and added it to my cart. Fill out the order details, press Complete Order, and the next step is to begin the enrollment process by clicking the Begin Now button:Fill in the fields as follows:  Select Your Order Type:  New  Switching from Another SSL Brand?:  No  Choose your Automated Authentication Option:  Email Authentication  Input CSR (Certificate Signing Request):  paste in your certificate request text copied from the JCS VM’s command prompt above  Select Your Server:  Weblogic - all versions  Select the Signature Algorithm:  SHA-2Click the Continue button.  The server will read your CSR and ask you to confirm the details:  Confirm The Domain You Submitted:  this should be autofilled from the CSR, if the keytool steps went correctly  Confirm Your Information:  this is the dname embedded in the CSR  Select Approver Email Address:  the emails listed come from the domain you registered above.  I picked the first one which was obscured by whoisprivacyprotect.com.  Remember that you’ll need to have access to the email account so that you can reply to the RapidSSL email verification process  Site Administrator Contact Information:  you need to fill these all in, even if they are the same  Subscriber Agreement:  agree to the termsClick Continue.The next step will arrive in your inbox.  If it doesn’t come through, you can return to the CheapSSL Security website and check your Incomplete Orders under My Account and reprocess the form.You should get an email from sslorders@geotrust.com asking you to click a URL to review and approve the certificate request.  This is how they confirm that you own the domain that you are requesting a certificate for.  Click the link and then click the “I Approve” button on the RapidSSL.com website.The last step will also arrive in your inbox.  The actual certificate will arrive along with an intermediate certificate.  You’ll use these in the next step.Import the certificate into your keystoreReturn back to the terminal, logged into your JCS VM and switched to the oracle user.  If you need to login and sudo over again, follow the steps above.  Make sure you’re in the /u01/data/keystores directory.We need to get the certificate in your email onto the filesystem of your JCS VM.  There are many ways to do this, but I used vim to paste the contents copied from the email and then saved it into a file.  Just be sure to grab the right certificate for the web server, and copy everything from and including -----BEGIN CERTIFICATE----- to -----END CERTIFICATE-----.You can use this command line redirect trick to create a file from a paste, remembering to press Ctrl-D when done to close the file:-bash-4.1$ cat &gt; myjcsserver-orclpaas-com_cert.cer-----BEGIN CERTIFICATE-----MIIFdDCCBFygAwIBAgIQbSktxL1fUSvI5rVMBVd80DANBgkqhkiG9w0BAQsFADBCMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UEAxMS...blahblahblahreallyreallylong...+bu5y+VZTMPisjqqiw/VLZO37jdspKHl5z6sYPcml3AjoPYBOPAyQnpd8h3SVkAxH08TNzr1ZYqwB2WaS7a1Ag6S2g7pTrW8nOc8muh5MSVEbsKCp2KeFhiEDf4EG9JR2KkVmPWSikxJd+AGeRSyJyDEbioPCdBXVmvVaScvQ=-----END CERTIFICATE-----(**press Ctrl-D, twice if you forget to press enter after the last line**)We need to also create a file for the intermediate certificate for RapidSSL.  Again, copy all of the intermediate cert text including the BEGIN and END lines and create a file on the server:-bash-4.1$ cat &gt; intermediate.cer-----BEGIN CERTIFICATE-----MIIETTCCAzWgAwIBAgIDAjpxMA0GCSqGSIb3DQEBCwUAMEIxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9iYWwgQ0EwHhcNMTMxMjExMjM0NTUxWhcNMjIwNTIwMjM0NTUxWjBCMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UEAxMSUmFwaWRTU0wgU0hBMjU2IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu1jBEgEul9h9GKrIwuWF4hdsYC7JjTEFORoGmFbdVNcRjFlbPbFUrkshhTIWX1SG5tmx2GCJa1i+ctqgAEJ2sSdZTM3jutRc2aZ/uyt11UZEvexAXFm33Vmf8Wr3BvzWLxmKlRK6msrVMNI4/Bk7WxU7NtBDTdFlodSLwWBBs9ZwF8w5wJwMoD23ESJOztmpetIqYpygC04q18NhWoXdXBC5VD0tA/hJ8LySt7ecMcfpuKqCCwW5Mc0IW7siC/acjopVHHZDdvDibvDfqCl158ikh4tq8bsIyTYYZe5QQ7hdctUoOeFTPiUs2itP3YqeUFDgb5rE1RkmiQF1cwmbOwIDAQABo4IBSjCCAUYwHwYDVR0jBBgwFoAUwHqYaI2J+6sFZAwRfap9ZbjKzE4wHQYDVR0OBBYEFJfCJ1CewsnsDIgyyHyt4qYBT9pvMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYDVR0PAQH/BAQDAgEGMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9nMS5zeW1jYi5jb20vY3Jscy9ndGdsb2JhbC5jcmwwLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUFBzABhhNodHRwOi8vZzIuc3ltY2IuY29tMEwGA1UdIARFMEMwQQYKYIZIAYb4RQEHNjAzMDEGCCsGAQUFBwIBFiVodHRwOi8vd3d3Lmdlb3RydXN0LmNvbS9yZXNvdXJjZXMvY3BzMCkGA1UdEQQiMCCkHjAcMRowGAYDVQQDExFTeW1hbnRlY1BLSS0xLTU2OTANBgkqhkiG9w0BAQsFAAOCAQEANevhiyBWlLp6vXmp9uP+bji0MsGj21hWID59xzqxZ2nVeRQb9vrsYPJ5zQoMYIp0TKOTKqDwUX/N6fmS/ZarRfViPT9gRlATPSATGC6URq7VIf5Dockj/lPEvxrYrDrK3maXI67T30pNcx9vMaJRBBZqAOv5jUOB8FChH6bKOvMoPF9RrNcKRXdLDlJiG9g4UaCSLT+Qbsh+QJ8gRhVd4FB84XavXu0R0y8TubglpK9YCa81tGJUheNI3rzSkHp6pIQNo0LyUcDUrVNlXWz4Px8G8k/Ll6BKWcZ40egDuYVtLLrhX7atKz4lecWLVtXjCYDqwSfC2Q7sRwrp0Mr82A==-----END CERTIFICATE-----(**press Ctrl-D, again twice if you forget to press enter after the last line**)Now we have files we can use keytool to import back into the keystore, and it should match our CSR request from earlier.  Let’s import the intermediate cert first:-bash-4.1$ keytool -import \\ -trustcacerts \\ -alias RapidSSLIntermediate \\ -file intermediate.cer \\ -keystore keystore.jks \\ -storepass mySTOREpwdis#1tooCertificate was added to keystoreNow, import the host certificate and note that it sees it as a reply:-bash-4.1$ keytool -import \\ -trustcacerts \\ -alias myjcsserver_cert \\ -file myjcsserver-orclpaas-com_cert.cer \\ -keypass myKEYpwdis#1 \\ -keystore keystore.jks \\ -storepass mySTOREpwdis#1tooCertificate reply was installed in keystoreYou’ve now got a valid keystore, registered for your DNS hostname and ready to be used by Weblogic.  For fun, you can validate that the certificate chain is valid with this command:java -cp /u01/app/oracle/middleware/wlserver/server/lib/weblogic.jar utils.ValidateCertChain -jks myjcsserver_cert keystore.jksCert[0]: CN=myjcsserver.orclpaas.comCert[1]: CN=RapidSSL SHA256 CA,O=GeoTrust Inc.,C=USCert[2]: CN=GeoTrust Global CA,O=GeoTrust Inc.,C=USCertificate chain appears validConfigure Weblogic to use the keystoreThe last step is to reconfigure the Weblogic managed server to use the new keystore settings.  Navigate to the Admin server for your JCS instance and sign in as the weblogic admin user.Lock and Edit your domain, then navigate to Environment » Servers » managed server name » Configuration » Keystores tab.Set the Keystores tab settings as follows:  Keystores:  Custom Identity and Java Standard Trust  Custom Identity Keystore:  /u01/data/keystores/keystore.jks  Custom Identity Keystore Type:  JKS      Custom Identity Keystore Passphrase:  mySTOREpwdis#1too    Java Standard Trust Keystore:  /u01/jdk/jre/lib/security/cacerts  Java Standard Trust Keystore Type:  jks  Java Standard Trust Keystore Passphrase:  changeit  (that is, unless you’ve changed it already)Save your changes.Now click on the SSL tab and set the settings:  Identity and Trust Locations:  Keystores  Private Key Location: from Custom Identity Keystore  Private Key Alias:  myjcsserver_cert  Private Key Passphrase:  myKEYpwdis#1  Certificate Location: from Custom Identity KeystoreClick Save and then Activate Your Changes.Now even though it says that all changes have been activated and no restarts are necessary, I’ve found that restarting the managed server is needed because it won’t pick up the new keystore.Click on the Control tab for the managed server, then check the box next to the managed server.  Pull down Shutdown » Force Shutdown Now and wait a few moments for the task to complete, refreshing as necessary to see progress.  Then click Start to start the managed server back up.Test and revel in your successYou should now be able to navigate to the https version of your URLs with a valid certificate and a reassuring green lock in the address bar:",
      "content_html": "<p>When you provision an Oracle Java Cloud Service (JCS) instance, you get a full Weblogic server with a real IP address on the public internet, configured (via Compute Cloud) to listen for http on port 80 and https on port 443. What you don’t get is a DNS entry for your server nor a SSL certificate – you’re responsible for setting these up yourself.</p><p>What this means is when you surf to a https:// flavor of URL for your freshly-created server, your browser will alert you that the demo SSL certificates are invalid:</p><div class=\"full zoomable\"><img src=\"/images/20170518/privacy-error-firefox.png\" /></div><p>If this is just a prototype server, maybe you’re alright with clicking through and telling the browser that things are safe.  Putting up with the red line through the <span style=\"color: red\"><del>https</del></span>:// in the address bar is not a big deal.  However, we had a need to reconfigure a demo JCS server with real, valid SSL certificates so that we could embed our content inside other servers with valid SSL certs.</p><p>Now <a href=\"https://docs.oracle.com/cloud/latest/jcs_gs/JSCUG/GUID-B862044D-A55B-48D3-A3E2-CC2D55A8279B.htm\">there’s an official way to do this properly</a>, but that process requires a Load Balancer node for each JCS instance each of which consumes an OCPU. In our trial environment, we had a limited quota of OCPUs. Instead of registering our SSL certificates the right way through the Oracle Cloud wizards, the following steps configure the Weblogic server directly with a real SSL certificate:</p><ul id=\"markdown-toc\">  <li><a href=\"#register-your-domain-and-add-dns-entry-for-your-jcs-servers-public-ip\">Register your domain and add DNS entry for your JCS server’s public IP</a></li>  <li><a href=\"#get-ssh-access-to-your-jcs-vm-server\">Get SSH access to your JCS VM server</a></li>  <li><a href=\"#create-a-keystore-and-a-csr\">Create a keystore and a CSR</a></li>  <li><a href=\"#request-and-obtain-a-ssl-certificate\">Request and Obtain a SSL Certificate</a></li>  <li><a href=\"#import-the-certificate-into-your-keystore\">Import the certificate into your keystore</a></li>  <li><a href=\"#configure-weblogic-to-use-the-keystore\">Configure Weblogic to use the keystore</a></li>  <li><a href=\"#test-and-revel-in-your-success\">Test and revel in your success</a></li></ul><p>Before we begin, I just want to emphasize that this is not the approved way to do SSL on JCS.  While it will get you through in a pinch if all you need is a valid https connection, it is definitely not an official supported configuration.  But hey, JCS is Weblogic underneath, and you might find these are good instructions even if you’re just setting up SSL on an on-premise server.</p><h2 id=\"register-your-domain-and-add-dns-entry-for-your-jcs-servers-public-ip\">Register your domain and add DNS entry for your JCS server’s public IP</h2><p>Assuming you don’t already have a corporate domain and the DNS infrastructure in place to support it, the first step is to pick a domain name, register it, and then add a DNS <code>A</code> record pointing at your JCS server.</p><p>I used <a href=\"https://dnsimple.com/\">DNSimple</a> to register a custom domain name and then added an <code>A</code> record for my JCS public IP address.</p><div class=\"full zoomable\"><img src=\"/images/20170518/dnsimple-a-record.png\" /></div><p>The important thing is that you have access to the email address used for the domain administrator (even if it’s hidden behind Whois privacy protect; that’s fine), since we’ll be using that to verify you own the domain when we register the SSL certificate, below.</p><h2 id=\"get-ssh-access-to-your-jcs-vm-server\">Get SSH access to your JCS VM server</h2><p>We’re going to get down in the weeds here so we’ll need <a href=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/cloud/javaservice/JCS/JCS_SSH/create_sshkey.html\">shell access to the VM</a> that the JCS Weblogic server is running on.</p><p>You’ll <a href=\"https://confluence.atlassian.com/bitbucketserver/creating-ssh-keys-776639788.html\">need a pair of SSH keys generated</a> on your computer so that you can upload your public key to the JCS server. </p><p>Navigate to the JCS Service Console and pull down the hamburger menu for your JCS instance. Choose <code>SSH Access</code> and upload your new SSH Public Key file. This process will reboot the VM that your JCS instance is running on, so make sure you schedule for the outage.</p><div class=\"full zoomable\"><img src=\"/images/20170518/ssh-access-keys.png\" /></div><p>After the reboot, if everything worked right, you should be able to <a href=\"https://docs.oracle.com/cloud/latest/computecs_common/OCSUG/GUID-D947E2CC-0D4C-43F4-B2A9-A517037D6C11.htm#OCSUG-GUID-D947E2CC-0D4C-43F4-B2A9-A517037D6C11\">use your private .ssh key to access the shell prompt</a> on your JCS VM. You’ll connect as the <code>opc</code> user and use the JCS VM’s IP address for the host:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">ssh opc@123.45.67.89</code></pre></div><h2 id=\"create-a-keystore-and-a-csr\">Create a keystore and a CSR</h2><p>Once you’re connected you’re logged in as the <code>opc</code> user, but that user has very little access to the juicy parts of your Weblogic installation. However, the <code>opc</code> user does have <code>sudo</code>, so you can become the <code>oracle</code> user:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"o\">[</span>opc@myjcsserver ~<span class=\"o\">]</span><span class=\"nv\">$ </span>sudo su - oracle</code></pre></div><p>Now you can start setting up the SSL keystores as the <code>oracle</code> user, and Weblogic will be able to load your certificates because it will have the proper file system permissions.  I sourced the $DOMAIN_HOME environment out of habit:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">-bash-4.1<span class=\"nv\">$ </span><span class=\"nb\">cd</span> /u01/data/domains/myjcsser_domain/bin-bash-4.1<span class=\"nv\">$ </span>./setDomainEnv.sh   <span class=\"c\"># source the environment vars for weblogic domain</span></code></pre></div><p>Next, you need a place to put the keystore. I stuck mine in a shallow directory I knew I’d remember later when I needed to key it into the Weblogic admin console:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">-bash-4.1<span class=\"nv\">$ </span>mkdir /u01/data/keystores <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> <span class=\"nv\">$_</span></code></pre></div><p>Our final steps for this phase are to create a keystore and then a certificate signing request to send to our SSL provider. First you’ll use <code>keytool</code> to create a keystore and generate a key pair all at the same time.  Then you’ll used <code>keytool</code> again to create a certificate signing request (CSR) file.  Last you’ll spool that CSR file to the screen:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">-bash-4.1<span class=\"nv\">$ </span>keytool -genkeypair <span class=\"se\">\\</span> -alias myjcsserver_cert <span class=\"se\">\\</span> -keyalg RSA <span class=\"se\">\\</span> -sigalg SHA256withRSA -keysize <span class=\"m\">2048</span> <span class=\"se\">\\</span> -dname <span class=\"s2\">&quot;CN=myjcsserver.orclpaas.com,OU=NAA Sales Consulting,O=Oracle Corporation,L=Redwood City,ST=California,C=US&quot;</span> <span class=\"se\">\\</span> -keypass myKEYpwdis#1 <span class=\"se\">\\</span> -keystore keystore.jks <span class=\"se\">\\</span> -storepass mySTOREpwdis#1too-bash-4.1<span class=\"nv\">$ </span>keytool -certreq -v <span class=\"se\">\\</span> -alias myjcsserver_cert <span class=\"se\">\\</span> -file myjcsserver-orclpaas-com_cert.csr <span class=\"se\">\\</span> -keypass myKEYpwdis#1 <span class=\"se\">\\</span> -keystore keystore.jks <span class=\"se\">\\</span> -storepass mySTOREpwdis#1tooCertification request stored in file &lt;myjcsserver-orclpaas-com_cert.csr&gt;Submit this to your CA-bash-4.1<span class=\"nv\">$ </span>cat myjcsserver-orclpaas-com_cert.csr-----BEGIN NEW CERTIFICATE REQUEST-----MIIDDjCCAfYCAQAwgZgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRUwEwYDVQQHEwxSZWR3b29kIENpdHkxGzAZBgNVBAoTEk9yYWNsZSBDb3Jwb3JhdGlvbjEdMBsGA1UECxMUTkFBIFNhbGVzIENvbnN1bHRpbmcxITAfBgNVBAMTGG15...blahblahblahthisgoesonforawhile...TYlXaaRcchwNdRgFGzFc5vz5kxhRaQ8H4L05gbBxI7RHAhjsZNrO2M2atUFjhhVk08z1ojlqjEKlYCgt6nMYigdFvRFVKGnrp6DOGjQ+t9DGpyLZ7xU-----END NEW CERTIFICATE REQUEST-----</code></pre></div><p>The first step will create a new <code>/u01/data/keystores/keystore.jks</code> file. Use your fully-qualified distinguished name, and make note of the key password and store password, as you’ll need them in later steps and when you configure Weblogic.</p><p>The second step registers a signing request inside the keystore and then creates a CSR file you can use to initiate the process with your certificate authority.  Copy that echoed-out CSR to the clipboard: you’ll need it in the next step when you request your SSL certificate.</p><h2 id=\"request-and-obtain-a-ssl-certificate\">Request and Obtain a SSL Certificate</h2><p>There are lots of vendors who will provide trusted SSL certificates to match your DNS domain.  Your company may already have an arrangement with one of these vendors, and you should follow their process if your hostname falls under their DNS.</p><p>Since I created my own DNS domain with DNSimple, at first I attempted to use their SSL Certificates process to broker a cert from Comodo but had a lot of grief with their automated support.  So a better solution for me was to go with <a href=\"https://cheapsslsecurity.com/\">Cheap$$L Security</a> to get a RapidSSL certificate.</p><p>BTW, LetsEncrypt is a newer player on the SSL scene, and their free certificates had great appeal for our prototype project, but the 90-day limit on certificates before they expire and the work it would take to automate the process on the JCS compute node wasn’t worth the hassle compared to a few bucks for a cheap SSL cert, IMHO.</p><p>If you, like me, are managing your own DNS domain you can choose one of the cheapest Domain Validation certificates – especially since this is just for prototyping.  If this were for a production server or for doing eCommerce, you might want to shell out for a Extended Validated so that your users might put more trust in you because they get better feedback in the browsers’ address bars.  Like we said before, these steps are already a hack:  you shouldn’t be following these steps for anything production!</p><p>Another option you might consider, even though it’s more expensive:  if you’re going to do a lot of SSL certificates or be renaming your DNS entries for your prototypes, a wildcard certificate is a lot easier to work with as you don’t have to register each and every DNS hostname with a unique CSR.  However, these steps assume a single-hostname certificate request.</p><p>So click the <a href=\"https://cheapsslsecurity.com/rapidssl/rapidsslcertificate.html\">Buy Now button for the RapidSSL Certificate</a>.  I chose just a one-year cert and added it to my cart. Fill out the order details, press Complete Order, and the next step is to begin the enrollment process by clicking the Begin Now button:</p><div class=\"full zoomable\"><img src=\"/images/20170518/purchasemade.png\" /></div><p>Fill in the fields as follows:</p><ol>  <li>Select Your Order Type:  New</li>  <li>Switching from Another SSL Brand?:  No</li>  <li>Choose your Automated Authentication Option:  Email Authentication</li>  <li>Input CSR (Certificate Signing Request):  paste in your certificate request text copied from the JCS VM’s command prompt above</li>  <li>Select Your Server:  Weblogic - all versions</li>  <li>Select the Signature Algorithm:  SHA-2</li></ol><div class=\"full zoomable\"><img src=\"/images/20170518/pasteCSR.png\" /></div><p>Click the Continue button.  The server will read your CSR and ask you to confirm the details:</p><ol>  <li>Confirm The Domain You Submitted:  this should be autofilled from the CSR, if the <code>keytool</code> steps went correctly</li>  <li>Confirm Your Information:  this is the dname embedded in the CSR</li>  <li>Select Approver Email Address:  the emails listed come from the domain you registered above.  I picked the first one which was obscured by whoisprivacyprotect.com.  Remember that you’ll need to have access to the email account so that you can reply to the RapidSSL email verification process</li>  <li>Site Administrator Contact Information:  you need to fill these all in, even if they are the same</li>  <li>Subscriber Agreement:  agree to the terms</li></ol><p>Click Continue.</p><p>The next step will arrive in your inbox.  If it doesn’t come through, you can return to the CheapSSL Security website and check your Incomplete Orders under My Account and reprocess the form.</p><p>You should get an email from sslorders@geotrust.com asking you to click a URL to review and approve the certificate request.  This is how they confirm that you own the domain that you are requesting a certificate for.  Click the link and then click the “I Approve” button on the RapidSSL.com website.</p><div class=\"full zoomable\"><img src=\"/images/20170518/rapidsslapproval.png\" /></div><p>The last step will also arrive in your inbox.  The actual certificate will arrive along with an intermediate certificate.  You’ll use these in the next step.</p><div class=\"full zoomable\"><img src=\"/images/20170518/emailcertificate.png\" /></div><h2 id=\"import-the-certificate-into-your-keystore\">Import the certificate into your keystore</h2><p>Return back to the terminal, logged into your JCS VM and switched to the oracle user.  If you need to login and sudo over again, follow the steps above.  Make sure you’re in the <code>/u01/data/keystores</code> directory.</p><p>We need to get the certificate in your email onto the filesystem of your JCS VM.  There are many ways to do this, but I used vim to paste the contents copied from the email and then saved it into a file.  Just be sure to grab the right certificate for the web server, and copy everything from and including <code>-----BEGIN CERTIFICATE-----</code> to <code>-----END CERTIFICATE-----</code>.</p><p>You can use this command line redirect trick to create a file from a paste, remembering to press <code>Ctrl-D</code> when done to close the file:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">-bash-4.1<span class=\"nv\">$ </span>cat &gt; myjcsserver-orclpaas-com_cert.cer-----BEGIN CERTIFICATE-----MIIFdDCCBFygAwIBAgIQbSktxL1fUSvI5rVMBVd80DANBgkqhkiG9w0BAQsFADBCMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UEAxMS...blahblahblahreallyreallylong...+bu5y+VZTMPisjqqiw/VLZO37jdspKHl5z6sYPcml3AjoPYBOPAyQnpd8h3SVkAxH08TNzr1ZYqwB2WaS7a1Ag6S2g7pTrW8nOc8muh5MSVEbsKCp2KeFhiEDf4EG9JR2KkVmPWSikxJd+AGeRSyJyDEbioPCd<span class=\"nv\">BXVmvVaScvQ</span><span class=\"o\">=</span>-----END CERTIFICATE-----<span class=\"o\">(</span>**press Ctrl-D, twice <span class=\"k\">if</span> you forget to press enter after the last line**<span class=\"o\">)</span></code></pre></div><p>We need to also create a file for the intermediate certificate for RapidSSL.  Again, copy all of the intermediate cert text including the <code>BEGIN</code> and <code>END</code> lines and create a file on the server:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">-bash-4.1<span class=\"nv\">$ </span>cat &gt; intermediate.cer-----BEGIN CERTIFICATE-----MIIETTCCAzWgAwIBAgIDAjpxMA0GCSqGSIb3DQEBCwUAMEIxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9iYWwgQ0EwHhcNMTMxMjExMjM0NTUxWhcNMjIwNTIwMjM0NTUxWjBCMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UEAxMSUmFwaWRTU0wgU0hBMjU2IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu1jBEgEul9h9GKrIwuWF4hdsYC7JjTEFORoGmFbdVNcRjFlbPbFUrkshhTIWX1SG5tmx2GCJa1i+ctqgAEJ2sSdZTM3jutRc2aZ/uyt11UZEvexAXFm33Vmf8Wr3BvzWLxmKlRK6msrVMNI4/Bk7WxU7NtBDTdFlodSLwWBBs9ZwF8w5wJwMoD23ESJOztmpetIqYpygC04q18NhWoXdXBC5VD0tA/hJ8LySt7ecMcfpuKqCCwW5Mc0IW7siC/acjopVHHZDdvDibvDfqCl158ikh4tq8bsIyTYYZe5QQ7hdctUoOeFTPiUs2itP3YqeUFDgb5rE1RkmiQF1cwmbOwIDAQABo4IBSjCCAUYwHwYDVR0jBBgwFoAUwHqYaI2J+6sFZAwRfap9ZbjKzE4wHQYDVR0OBBYEFJfCJ1CewsnsDIgyyHyt4qYBT9pvMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYDVR0PAQH/BAQDAgEGMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9nMS5zeW1jYi5jb20vY3Jscy9ndGdsb2JhbC5jcmwwLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUFBzABhhNodHRwOi8vZzIuc3ltY2IuY29tMEwGA1UdIARFMEMwQQYKYIZIAYb4RQEHNjAzMDEGCCsGAQUFBwIBFiVodHRwOi8vd3d3Lmdlb3RydXN0LmNvbS9yZXNvdXJjZXMvY3BzMCkGA1UdEQQiMCCkHjAcMRowGAYDVQQDExFTeW1hbnRlY1BLSS0xLTU2OTANBgkqhkiG9w0BAQsFAAOCAQEANevhiyBWlLp6vXmp9uP+bji0MsGj21hWID59xzqxZ2nVeRQb9vrsYPJ5zQoMYIp0TKOTKqDwUX/N6fmS/ZarRfViPT9gRlATPSATGC6URq7VIf5Dockj/lPEvxrYrDrK3maXI67T30pNcx9vMaJRBBZqAOv5jUOB8FChH6bKOvMoPF9RrNcKRXdLDlJiG9g4UaCSLT+Qbsh+QJ8gRhVd4FB84XavXu0R0y8TubglpK9YCa81tGJUheNI3rzSkHp6pIQNo0LyUcDUrVNlXWz4Px8G8k/Ll6BKWcZ40egDuYVtLLrhX7atKz4l<span class=\"nv\">ecWLVtXjCYDqwSfC2Q7sRwrp0Mr82A</span><span class=\"o\">==</span>-----END CERTIFICATE-----<span class=\"o\">(</span>**press Ctrl-D, again twice <span class=\"k\">if</span> you forget to press enter after the last line**<span class=\"o\">)</span></code></pre></div><p>Now we have files we can use <code>keytool</code> to import back into the keystore, and it should match our CSR request from earlier.  </p><p>Let’s import the intermediate cert first:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">-bash-4.1<span class=\"nv\">$ </span>keytool -import <span class=\"se\">\\</span> -trustcacerts <span class=\"se\">\\</span> -alias RapidSSLIntermediate <span class=\"se\">\\</span> -file intermediate.cer <span class=\"se\">\\</span> -keystore keystore.jks <span class=\"se\">\\</span> -storepass mySTOREpwdis#1tooCertificate was added to keystore</code></pre></div><p>Now, import the host certificate and note that it sees it as a reply:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">-bash-4.1<span class=\"nv\">$ </span>keytool -import <span class=\"se\">\\</span> -trustcacerts <span class=\"se\">\\</span> -alias myjcsserver_cert <span class=\"se\">\\</span> -file myjcsserver-orclpaas-com_cert.cer <span class=\"se\">\\</span> -keypass myKEYpwdis#1 <span class=\"se\">\\</span> -keystore keystore.jks <span class=\"se\">\\</span> -storepass mySTOREpwdis#1tooCertificate reply was installed in keystore</code></pre></div><p>You’ve now got a valid keystore, registered for your DNS hostname and ready to be used by Weblogic.  For fun, you can validate that the certificate chain is valid with this command:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">java -cp /u01/app/oracle/middleware/wlserver/server/lib/weblogic.jar utils.ValidateCertChain -jks myjcsserver_cert keystore.jksCert<span class=\"o\">[</span>0<span class=\"o\">]</span>: <span class=\"nv\">CN</span><span class=\"o\">=</span>myjcsserver.orclpaas.comCert<span class=\"o\">[</span>1<span class=\"o\">]</span>: <span class=\"nv\">CN</span><span class=\"o\">=</span>RapidSSL SHA256 CA,O<span class=\"o\">=</span>GeoTrust Inc.,C<span class=\"o\">=</span>USCert<span class=\"o\">[</span>2<span class=\"o\">]</span>: <span class=\"nv\">CN</span><span class=\"o\">=</span>GeoTrust Global CA,O<span class=\"o\">=</span>GeoTrust Inc.,C<span class=\"o\">=</span>USCertificate chain appears valid</code></pre></div><h2 id=\"configure-weblogic-to-use-the-keystore\">Configure Weblogic to use the keystore</h2><p>The last step is to reconfigure the Weblogic managed server to use the new keystore settings.  Navigate to the Admin server for your JCS instance and sign in as the weblogic admin user.</p><p>Lock and Edit your domain, then navigate to Environment » Servers » managed server name » Configuration » Keystores tab.</p><p>Set the Keystores tab settings as follows:</p><ul>  <li>Keystores:  Custom Identity and Java Standard Trust</li>  <li>Custom Identity Keystore:  /u01/data/keystores/keystore.jks</li>  <li>Custom Identity Keystore Type:  JKS</li>  <li>    <p>Custom Identity Keystore Passphrase:  mySTOREpwdis#1too</p>  </li>  <li>Java Standard Trust Keystore:  /u01/jdk/jre/lib/security/cacerts</li>  <li>Java Standard Trust Keystore Type:  jks</li>  <li>Java Standard Trust Keystore Passphrase:  changeit  (that is, unless you’ve changed it already)</li></ul><p>Save your changes.</p><div class=\"full zoomable\"><img src=\"/images/20170518/keystoresadmin.png\" /></div><p>Now click on the SSL tab and set the settings:</p><ul>  <li>Identity and Trust Locations:  Keystores</li>  <li>Private Key Location: from Custom Identity Keystore</li>  <li>Private Key Alias:  myjcsserver_cert</li>  <li>Private Key Passphrase:  myKEYpwdis#1</li>  <li>Certificate Location: from Custom Identity Keystore</li></ul><div class=\"full zoomable\"><img src=\"/images/20170518/ssladmin.png\" /></div><p>Click Save and then Activate Your Changes.</p><p>Now even though it says that all changes have been activated and no restarts are necessary, I’ve found that restarting the managed server is needed because it won’t pick up the new keystore.</p><p>Click on the Control tab for the managed server, then check the box next to the managed server.  Pull down Shutdown » Force Shutdown Now and wait a few moments for the task to complete, refreshing as necessary to see progress.  Then click Start to start the managed server back up.</p><h2 id=\"test-and-revel-in-your-success\">Test and revel in your success</h2><p>You should now be able to navigate to the https version of your URLs with a valid certificate and a reassuring green lock in the address bar:</p><div class=\"full zoomable\"><img src=\"/images/20170518/sslsuccess.png\" /></div>"
    },
  
    {
      "title": "APEX REST: Two Separate SQL Queries, One RESTful Endpoint",
      "date_published": "2017-03-08T00:00:00+00:00",
      "date_modified": "2017-03-08T00:00:00+00:00",
      "id": "/2017/03/08/apex-rest-two-queries-one-endpoint/",
      "url": "http://www.likeahouseafire.com/2017/03/08/apex-rest-two-queries-one-endpoint/",
      
      
      
      "tags": ["APEX","REST","PLSQL","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Using PL/SQL and APEX_JSON to create just the payload we need from two separate potential queries in an APEX RESTful Resource Handler",
      "content_text": "Oracle APEX RESTful Services are a great way to quickly build an API endpoint. Upload a spreadsheet of data, create a SQL query, and stick it in a GET request on the Cloud with output as JSON. Boom, done.Well, the defaults are alright: the meat of your sql query is returned in an items: [] array, but it’s not too hard to massage that out in your JavaScript front-end.  And you’ll get the results in batches as driven by the pagination size parameter on your resource handler, so there’s that. But sometimes you want to do some manipulating of the payload that gets returned from APEX so that it takes a particular format and doesn’t need parsed on the client side. Or you might want to throw some logic in the code that runs on the server side, perhaps driven by the bind variables you pick up from a request payload or querystring parameter.PL/SQL to the rescueThe APEX RESTful Services UI serves as a pretty wrapper for the power of the Oracle RESTful Data Services engine. As documented on Tim Hall’s ORACLE-BASE, ORDS lets you do all sorts of cool things if you leverage the right packages. We can take these concepts and stuff them into a APEX RESTful Service, setting our GET Handlers to use PL/SQL for Source Type instead of Query or Query One Row.There are lots of ways to use PL/SQL for an APEX RESTful GET Handler, but they all revolve around the ability to write directly out to the wire with your response.  So instead of the automatic JSON formatting you get when you use a SQL Query or Query One Row, with PL/SQL you have to format your output yourself. For example, the APEX HR example Resource Handler uses sys.htp.print() to output HTML back to the client.For my use case below, I was able to combine the ORACLE-BASE suggestion to use the APEX_JSON package and some PL/SQL IF THEN ELSE logic to run one bit of SQL versus another bit depending on the length of the querystring. The APEX_JSON.write() procedure let me define the root node of my payload as suggestions: and dispense with the standard format returned by ORDS.Use case: Run one of two separate SQL queries depending on the length of the query parameterI had a flat, denormalized spreadsheet of data uploaded into a PRODUCT_MASTER table, but with a two-part key: a sku-prefix and a sku-suffix.  I wanted to create an endpoint I could use for an autocomplete plugin that would send the user-typed characters as a query parameter on the URL (the ‘XXX’ in apex.oracle.com/endpoint?query=XXX), and it expected to get JSON back in the form:{&quot;suggestions&quot;: [    {      &quot;value&quot;: &quot;Product Description&quot;,      &quot;data&quot;: &quot;Product_ID&quot;    },     ...  ]}The issue was that if the querystring included three or fewer characters, I only wanted to search the sku_prefix column.  But if the querystring was four characters or longer, I wanted to use the first three characters to match the sku_prefix and the rest of the querystring to match the sku_suffix column.So I needed two queries to be defined, but only one to run.  And some logic to choose which one based on the length of the querystring parameter passed in as a bind variable.  The code below is what worked after defining a GET Resource Handler with the URI template: products?query={query}. N.B. See how the column aliases are surrounded by “doublequotes”?  This is so the JSON is in lowercase; otherwise your column names with be UPPERCASED and then your JSON node names will be all shouty.  DECLAREl_cursor SYS_REFCURSOR;l_querylength NUMBER;BEGIN l_querylength := LENGTH(:query);IF l_querylength &lt;= 3 THEN  OPEN l_cursor FOR    SELECT DISTINCT sku_prefix || &#39;: &#39; || description_prefix as &quot;value&quot;,       sku_prefix as &quot;data&quot;,       description_prefix as &quot;description_prefix&quot;,      null as &quot;description_suffix&quot;        from product_master       where lower(sku_prefix) like &#39;%&#39; || lower(:query) || &#39;%&#39;;ELSE  OPEN l_cursor FOR    SELECT sku_prefix || sku_suffix  || &#39;: &#39; || description_prefix || &#39;-&#39; || description_suffix as &quot;value&quot;,       sku_prefix || sku_suffix as &quot;data&quot;,       description_prefix as &quot;description_prefix&quot;,      description_suffix as &quot;description_suffix&quot;       from product_master       where lower(sku_prefix) like &#39;%&#39; || lower(SUBSTR( :query, 1 , 3  )) || &#39;%&#39;      and lower(sku_suffix) like lower(SUBSTR( :query, 4  )) || &#39;%&#39;;END IF;APEX_JSON.open_object;APEX_JSON.write(&#39;suggestions&#39;, l_cursor);APEX_JSON.close_object;END;",
      "content_html": "<p>Oracle <a href=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/db/apex/r51/restful_web_services/restful_web_services.html#section1s1\">APEX RESTful Services are a great way to quickly build an API endpoint</a>. Upload a spreadsheet of data, create a SQL query, and stick it in a GET request on the Cloud with output as JSON. Boom, done.</p><p>Well, the defaults are <em>alright:</em> the meat of your sql query is returned in an <code>items: []</code> array, but it’s not too hard to massage that out in your JavaScript front-end.  And you’ll get the results in batches as driven by the pagination size parameter on your resource handler, so there’s that. </p><p>But sometimes you want to do some manipulating of the payload that gets returned from APEX so that it takes a particular format and doesn’t need parsed on the client side. Or you might want to throw some logic in the code that runs on the server side, perhaps driven by the bind variables you pick up from a request payload or querystring parameter.</p><h2 id=\"plsql-to-the-rescue\">PL/SQL to the rescue</h2><p>The APEX RESTful Services UI serves as a pretty wrapper for the power of the <a href=\"http://www.oracle.com/technetwork/developer-tools/rest-data-services/overview/index.html\">Oracle RESTful Data Services</a> engine. As <a href=\"https://oracle-base.com/articles/misc/oracle-rest-data-services-ords-create-basic-rest-web-services-using-plsql\">documented on Tim Hall’s ORACLE-BASE</a>, ORDS lets you do all sorts of cool things if you leverage the right packages. We can take these concepts and stuff them into a APEX RESTful Service, setting our GET Handlers to use PL/SQL for Source Type instead of Query or Query One Row.</p><p>There are lots of ways to use PL/SQL for an APEX RESTful GET Handler, but they all revolve around the ability to write directly out to the wire with your response.  So instead of the automatic JSON formatting you get when you use a SQL Query or Query One Row, with PL/SQL you have to format your output yourself. For example, the APEX HR example Resource Handler uses <code>sys.htp.print()</code> to output HTML back to the client.</p><p>For my use case below, I was able to combine the ORACLE-BASE suggestion to use <a href=\"https://docs.oracle.com/cd/E59726_01/doc.50/e39149/apex_json.htm#AEAPI29635\">the <code>APEX_JSON</code> package</a> and some PL/SQL <code>IF THEN ELSE</code> logic to run one bit of SQL versus another bit depending on the length of the querystring. The <code>APEX_JSON.write()</code> procedure let me define the root node of my payload as <code>suggestions:</code> and dispense with the standard format returned by ORDS.</p><h2 id=\"use-case-run-one-of-two-separate-sql-queries-depending-on-the-length-of-the-query-parameter\">Use case: Run one of two separate SQL queries depending on the length of the query parameter</h2><p>I had a flat, denormalized spreadsheet of data uploaded into a PRODUCT_MASTER table, but with a two-part key: a sku-prefix and a sku-suffix.  I wanted to create an endpoint I could use for an <a href=\"https://github.com/devbridge/jQuery-Autocomplete\">autocomplete plugin</a> that would send the user-typed characters as a query parameter on the URL (the ‘XXX’ in <code>apex.oracle.com/endpoint?query=XXX</code>), and it expected to get JSON back in the form:</p><div class=\"highlight\"><pre><code class=\"language-sql\" data-lang=\"sql\"><span class=\"err\">{</span><span class=\"ss\">&quot;suggestions&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>    <span class=\"err\">{</span>      <span class=\"ss\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"ss\">&quot;Product Description&quot;</span><span class=\"p\">,</span>      <span class=\"ss\">&quot;data&quot;</span><span class=\"p\">:</span> <span class=\"ss\">&quot;Product_ID&quot;</span>    <span class=\"err\">}</span><span class=\"p\">,</span>     <span class=\"p\">...</span>  <span class=\"p\">]</span><span class=\"err\">}</span></code></pre></div><p>The issue was that if the querystring included three or fewer characters, I only wanted to search the <code>sku_prefix</code> column.  But if the querystring was four characters or longer, I wanted to use the first three characters to match the <code>sku_prefix</code> and the rest of the querystring to match the <code>sku_suffix</code> column.</p><p>So I needed two queries to be defined, but only one to run.  And some logic to choose which one based on the length of the querystring parameter passed in as a bind variable.  </p><p>The code below is what worked after defining a GET Resource Handler with the URI template: <code>products?query={query}</code>. </p><p>N.B. See how the column aliases are surrounded by “doublequotes”?  This is so the JSON is in lowercase; otherwise your column names with be UPPERCASED and then your JSON node names will be all shouty.  </p><div class=\"highlight\"><pre><code class=\"language-sql\" data-lang=\"sql\"><span class=\"k\">DECLARE</span><span class=\"n\">l_cursor</span> <span class=\"n\">SYS_REFCURSOR</span><span class=\"p\">;</span><span class=\"n\">l_querylength</span> <span class=\"nb\">NUMBER</span><span class=\"p\">;</span><span class=\"k\">BEGIN</span> <span class=\"n\">l_querylength</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"k\">LENGTH</span><span class=\"p\">(:</span><span class=\"n\">query</span><span class=\"p\">);</span><span class=\"n\">IF</span> <span class=\"n\">l_querylength</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">3</span> <span class=\"k\">THEN</span>  <span class=\"k\">OPEN</span> <span class=\"n\">l_cursor</span> <span class=\"k\">FOR</span>    <span class=\"k\">SELECT</span> <span class=\"k\">DISTINCT</span> <span class=\"n\">sku_prefix</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;: &#39;</span> <span class=\"o\">||</span> <span class=\"n\">description_prefix</span> <span class=\"k\">as</span> <span class=\"ss\">&quot;value&quot;</span><span class=\"p\">,</span>       <span class=\"n\">sku_prefix</span> <span class=\"k\">as</span> <span class=\"ss\">&quot;data&quot;</span><span class=\"p\">,</span>       <span class=\"n\">description_prefix</span> <span class=\"k\">as</span> <span class=\"ss\">&quot;description_prefix&quot;</span><span class=\"p\">,</span>      <span class=\"k\">null</span> <span class=\"k\">as</span> <span class=\"ss\">&quot;description_suffix&quot;</span>        <span class=\"k\">from</span> <span class=\"n\">product_master</span>       <span class=\"k\">where</span> <span class=\"k\">lower</span><span class=\"p\">(</span><span class=\"n\">sku_prefix</span><span class=\"p\">)</span> <span class=\"k\">like</span> <span class=\"s1\">&#39;%&#39;</span> <span class=\"o\">||</span> <span class=\"k\">lower</span><span class=\"p\">(:</span><span class=\"n\">query</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;%&#39;</span><span class=\"p\">;</span><span class=\"k\">ELSE</span>  <span class=\"k\">OPEN</span> <span class=\"n\">l_cursor</span> <span class=\"k\">FOR</span>    <span class=\"k\">SELECT</span> <span class=\"n\">sku_prefix</span> <span class=\"o\">||</span> <span class=\"n\">sku_suffix</span>  <span class=\"o\">||</span> <span class=\"s1\">&#39;: &#39;</span> <span class=\"o\">||</span> <span class=\"n\">description_prefix</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;-&#39;</span> <span class=\"o\">||</span> <span class=\"n\">description_suffix</span> <span class=\"k\">as</span> <span class=\"ss\">&quot;value&quot;</span><span class=\"p\">,</span>       <span class=\"n\">sku_prefix</span> <span class=\"o\">||</span> <span class=\"n\">sku_suffix</span> <span class=\"k\">as</span> <span class=\"ss\">&quot;data&quot;</span><span class=\"p\">,</span>       <span class=\"n\">description_prefix</span> <span class=\"k\">as</span> <span class=\"ss\">&quot;description_prefix&quot;</span><span class=\"p\">,</span>      <span class=\"n\">description_suffix</span> <span class=\"k\">as</span> <span class=\"ss\">&quot;description_suffix&quot;</span>       <span class=\"k\">from</span> <span class=\"n\">product_master</span>       <span class=\"k\">where</span> <span class=\"k\">lower</span><span class=\"p\">(</span><span class=\"n\">sku_prefix</span><span class=\"p\">)</span> <span class=\"k\">like</span> <span class=\"s1\">&#39;%&#39;</span> <span class=\"o\">||</span> <span class=\"k\">lower</span><span class=\"p\">(</span><span class=\"n\">SUBSTR</span><span class=\"p\">(</span> <span class=\"p\">:</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"p\">,</span> <span class=\"mi\">3</span>  <span class=\"p\">))</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;%&#39;</span>      <span class=\"k\">and</span> <span class=\"k\">lower</span><span class=\"p\">(</span><span class=\"n\">sku_suffix</span><span class=\"p\">)</span> <span class=\"k\">like</span> <span class=\"k\">lower</span><span class=\"p\">(</span><span class=\"n\">SUBSTR</span><span class=\"p\">(</span> <span class=\"p\">:</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"mi\">4</span>  <span class=\"p\">))</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;%&#39;</span><span class=\"p\">;</span><span class=\"k\">END</span> <span class=\"n\">IF</span><span class=\"p\">;</span><span class=\"n\">APEX_JSON</span><span class=\"p\">.</span><span class=\"n\">open_object</span><span class=\"p\">;</span><span class=\"n\">APEX_JSON</span><span class=\"p\">.</span><span class=\"k\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;suggestions&#39;</span><span class=\"p\">,</span> <span class=\"n\">l_cursor</span><span class=\"p\">);</span><span class=\"n\">APEX_JSON</span><span class=\"p\">.</span><span class=\"n\">close_object</span><span class=\"p\">;</span><span class=\"k\">END</span><span class=\"p\">;</span></code></pre></div>"
    },
  
    {
      "title": "How Do You Pronounce \"Fat&nbsp;Arrow?\"",
      "date_published": "2017-02-20T00:00:00+00:00",
      "date_modified": "2017-02-20T00:00:00+00:00",
      "id": "/2017/02/20/how-pronounce-fat-arrow/",
      "url": "http://www.likeahouseafire.com/2017/02/20/how-pronounce-fat-arrow/",
      
      
      
      "tags": ["JavaScript","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "I see it everywhere these days, but how do you *say* it?",
      "content_text": "Do you have a little voice in your head that vocalizes the things you read? What do you say when you see the =&gt; symbol?I’ve been playing around a bit with ES6 features, including the new “fat arrow” syntax for anonymous functions.  Lots of Node.js code is written in this style, as are almost all of the Functional Programing tutorials and examples.  It looks something like this:(x, y) =&gt; x * y;as opposed to this:function multiply(x, y) {  return x * y;}I’ll leave it to smarter people to describe all the nuances of the fat arrow syntax, like how convenient it is to pass their shorter syntax in to higher-order functions like map, filter and reduce, how they don’t bind their own this or have an arguments object, and how they’re much easier to read when implementing functional-style ideas like currying and such.Meanwhile, I realize just because they’re new and shiny doesn’t make them perfect, as Kyle Simpson points out in a decision flowchart from You Dont Know JS: ES6 &amp; Beyond:About that voice in my headSo when I’m reading code samples to myself, I’m often unsure if I’m using the right word for a particular symbol. Take the equals sign (=) for example. Depending on how many there are, I read the code and say a different phrase in my head:              Example symbol usage      JavaScript meaning      Voice in my head              var x = 1;      assignment      “variable x is assigned one”              if (x == \"1\")...      loose equality      “if x is equal to one”              if (x === 1)...      strict equality      “if x is really, really equal to the number one”      Now take the function declaration at the top of the article.  Here’s how I’d voice that when reading it to myself:            Code      Voice in my head              function multiply(x, y) {  return x * y;}      “function ‘multiply’ takes an x and a y and returns x times y”      My problem:  I don’t know what word to use when reading the Fat Arrow syntax:            Code      Voice in my head              let multiply = (x, y) =&gt; x * y;      “let ‘multiply’ be assigned a function that takes an x and a y and…returns?…yields?…maps to?…fat-arrows-on-into?…umm?…”      What people are sayingThe aforelinked MDN article gives a great discussion on the new syntax, but never actually tells you how it’s read properly.So I’ve been on a mission to find the right way to say JavaScript’s =&gt; symbol out loud.Other languages have had arrow functions for a while, and someone asked How do I pronounce “=&gt;” as used in lambda expressions in .Net. Answers came back as ‘such that’, ‘goes to’, ‘becomes’, ‘lambda-of’, ‘maps-to’ and simply ‘to’.Slightly related to where I think the fat arrow is coming from, Wikipedia’s Lambda Calculus article parenthetically says a bit of MathML should be “read as ‘the pair of x and y is mapped to x^2 + y^2’.”  Which then if you look at the symbols embedded in that article and then start googling around, winds you back at Wikipedia at an article with nothing but the symbol “→” in its URL.Douglas Crockford doesn’t give a pronunciation for the symbol, but has decided to name fat arrow functions “farts” and =&gt; the fart operator.Meanwhile, I stumbled on a video where James Coglan says CoffeeScript’s thin-arrow symbol is read as ‘takes…and returns’ but also can be read as ‘from…to’ when he says: “map takes a function from [a] to [b]… and returns a list of [b]’s”.And the response to the question “How to ‘read’ arrow functions in ES6?” gets oh-so-close, but when it says “and returns” seems to me to be talking about the structure of the function (especially the old ES5 style) and not the way you’d read the code itself.Have you heard an official way to pronounce =&gt; when reading JavaScript code?  How do you say it?",
      "content_html": "<p>Do you have a little voice in your head that vocalizes the things you read? What do you say when you see the <code>=&gt;</code> symbol?</p><p>I’ve been playing around a bit with ES6 features, including the new <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">“fat arrow” syntax for anonymous functions</a>.  Lots of Node.js code is written in this style, as are almost all of the Functional Programing tutorials and examples.  It looks something like this:</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">x</span> <span class=\"o\">*</span> <span class=\"nx\">y</span><span class=\"p\">;</span></code></pre></div><p>as opposed to this:</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">multiply</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"k\">return</span> <span class=\"nx\">x</span> <span class=\"o\">*</span> <span class=\"nx\">y</span><span class=\"p\">;</span><span class=\"p\">}</span></code></pre></div><p>I’ll leave it to smarter people to describe all the nuances of the fat arrow syntax, like how convenient it is to pass their shorter syntax in to higher-order functions like <code>map</code>, <code>filter</code> and <code>reduce</code>, how they don’t bind their own <code>this</code> or have an <code>arguments</code> object, and how they’re much easier to read when implementing functional-style ideas like currying and such.</p><p>Meanwhile, I realize just because they’re new and shiny doesn’t make them perfect, as <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/es6%20&amp;%20beyond/fig1.png\">Kyle Simpson points out in a decision flowchart from <em>You Dont Know JS: ES6 &amp; Beyond:</em></a></p><div class=\"full zoomable\"><img src=\"https://raw.githubusercontent.com/getify/You-Dont-Know-JS/master/es6%20%26%20beyond/fig1.png\" /></div><h2 id=\"about-that-voice-in-my-head\">About that voice in my head</h2><p>So when I’m reading code samples to myself, I’m often unsure if I’m using the right word for a particular symbol. Take the equals sign (<code>=</code>) for example. Depending on how many there are, I read the code and say a different phrase in my head:  </p><table>  <tbody>    <tr>      <td><strong>Example symbol usage</strong></td>      <td><strong>JavaScript meaning</strong></td>      <td><strong>Voice in my head</strong></td>    </tr>    <tr>      <td><code>var x = 1;</code></td>      <td>assignment</td>      <td>“variable x is assigned one”</td>    </tr>    <tr>      <td><code>if (x == \"1\")...</code></td>      <td>loose equality</td>      <td>“if x is equal to one”</td>    </tr>    <tr>      <td><code>if (x === 1)...</code></td>      <td>strict equality</td>      <td>“if x is really, <em>really</em> equal to the number one”</td>    </tr>  </tbody></table><p><br />Now take the function declaration at the top of the article.  Here’s how I’d voice that when reading it to myself:</p><table>  <tbody>    <tr>      <td><strong>Code</strong></td>      <td><strong>Voice in my head</strong></td>    </tr>    <tr>      <td><code>function multiply(x, y) {</code><br />  <code>return x * y;</code><br /><code>}</code></td>      <td>“function ‘multiply’ takes an x and a y and returns x times y”</td>    </tr>  </tbody></table><p><br />My problem:  I don’t know what word to use when reading the Fat Arrow syntax:</p><table>  <tbody>    <tr>      <td><strong>Code</strong></td>      <td><strong>Voice in my head</strong></td>    </tr>    <tr>      <td><code>let multiply = (x, y) =&gt; x * y;</code></td>      <td>“let ‘multiply’ be assigned a function that takes an x and a y and…returns?…yields?…maps to?…fat-arrows-on-into?…umm?…”</td>    </tr>  </tbody></table><h2 id=\"what-people-are-saying\">What people are saying</h2><p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">aforelinked MDN article</a> gives a great discussion on the new syntax, but never actually tells you how it’s read properly.</p><p>So I’ve been on a mission to find the right way to say JavaScript’s <code>=&gt;</code> symbol out loud.</p><p>Other languages have had arrow functions for a while, and someone asked <a href=\"http://stackoverflow.com/questions/274022/how-do-i-pronounce-as-used-in-lambda-expressions-in-net\">How do I pronounce “=&gt;” as used in lambda expressions in .Net</a>. Answers came back as ‘such that’, ‘goes to’, ‘becomes’, ‘lambda-of’, ‘maps-to’ and simply ‘to’.</p><p>Slightly related to where I think the fat arrow is coming from, Wikipedia’s <a href=\"https://en.wikipedia.org/wiki/Lambda_calculus#Motivation\">Lambda Calculus article</a> parenthetically says a bit of MathML should be “read as ‘the pair of x and y <em>is mapped to</em> x^2 + y^2’.”  Which then if you look at the symbols embedded in that article and then start googling around, winds you back at Wikipedia at an <a href=\"https://en.wikipedia.org/wiki/→\">article with nothing but the symbol “→” in its URL</a>.</p><p>Douglas Crockford doesn’t give a pronunciation for the symbol, but has decided to <a href=\"https://plus.google.com/+DouglasCrockfordEsq/posts/TxQ4gRkZxST\">name fat arrow functions “farts”</a> and <a href=\"http://jslint.com/help.html\"><code>=&gt;</code> the fart operator</a>.</p><p>Meanwhile, I stumbled on a <a href=\"https://youtu.be/XcS-LdEBUkE?t=4m18s\">video where James Coglan says</a> CoffeeScript’s thin-arrow symbol is read as ‘takes…and returns’ but also can be read as ‘from…to’ when he says: “map takes a function from [a] to [b]… and returns a list of [b]’s”.</p><p>And the response to the question <a href=\"http://softwareengineering.stackexchange.com/questions/324656/how-to-read-arrow-functions-in-es6\">“How to ‘read’ arrow functions in ES6?”</a> gets oh-so-close, but when it says “and returns” seems to me to be talking about the structure of the function (especially the old ES5 style) and not the way you’d read the code itself.</p><p>Have you heard an official way to pronounce <code>=&gt;</code> when reading JavaScript code?  How do you say it?</p>"
    },
  
    {
      "title": "When `yum groupinstall` Says Group Does Not Exist",
      "date_published": "2016-12-22T00:00:00+00:00",
      "date_modified": "2016-12-22T00:00:00+00:00",
      "id": "/2016/12/22/linux-groupinstall-group-not-exist/",
      "url": "http://www.likeahouseafire.com/2016/12/22/linux-groupinstall-group-not-exist/",
      
      
      
      
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "A workaround when your Linux repos don't have groups configured and you can't just create them",
      "content_text": "We’ve got some Linux VMs that point at a private set of repositories for Yum updates.  Recently I went to build an system and wanted to add a graphical desktop.  When I executed yum groupinstall Desktop this error came back:Warning: Group Desktop does not exist.Error: No packages in any requested group available to install or updateTurns out it’s not uncommon to have private repos that haven’t had their groups created. Sure enough, a yum grouplist showed no groups available:Error: No group data available for configured repositoriesThe problem here is: I don’t own the repos and can’t update their configuration with groups, and our policy is that I couldn’t just add another external repo for the VM to use.  But, something I did have access to was another Linux VM whose repos pointed to the standard Unbreakable Linux Network.On that machine, I could list out all the components of the Desktop group with the yum groupinfo command:yum groupinfo Desktop...Group: Desktop Description: A minimal desktop that can also be used as a thin client. Mandatory Packages:   NetworkManager   NetworkManager-gnome   alsa-plugins-pulseaudio   at-spi   control-center   dbus   gdm   gdm-user-switch-applet   gnome-panel   gnome-power-manager   gnome-screensaver   gnome-session   gnome-terminal   gvfs-archive   gvfs-fuse   gvfs-smb   metacity   nautilus   notification-daemon   polkit-gnome   xdg-user-dirs-gtk   yelp Default Packages:   control-center-extra   eog   gdm-plugin-fingerprint   gnome-applets   gnome-media   gnome-packagekit   gnome-vfs2-smb   gok   openssh-askpass   orca   pulseaudio-module-gconf   pulseaudio-module-x11   rhn-setup-gnome   vino Optional Packages:   sabayon-apply   tigervnc-server   xguestUsually a yum groupinstall grabs just the Mandatory and Default Packages and installs them all in turn. Copying and pasting this list of packages into a editor made it easy to multi-select the CR/LF and tabs and replace them with a single space.  Then it was easy to create a “non-group” install command:yum install -y NetworkManager NetworkManager-gnome alsa-plugins-pulseaudio at-spi control-center dbus gdm gdm-user-switch-applet gnome-panel gnome-power-manager gnome-screensaver gnome-session gnome-terminal gvfs-archive gvfs-fuse gvfs-smb metacity nautilus notification-daemon polkit-gnome xdg-user-dirs-gtk yelp control-center-extra eog gdm-plugin-fingerprint gnome-applets gnome-media gnome-packagekit gnome-vfs2-smb gok openssh-askpass orca pulseaudio-module-gconf pulseaudio-module-x11 rhn-setup-gnome vinoThis worked great because all those packages were in my private repo; it was only the group definitions that were missing. Once I ran that big command (and a few more for the other groups I wanted to install), my VM was running a GUI login just fine.",
      "content_html": "<p>We’ve got some Linux VMs that point at a private set of repositories for Yum updates.  Recently I went to build an system and wanted to add a graphical desktop.  When I executed <code>yum groupinstall Desktop</code> this error came back:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">Warning: Group Desktop does not exist.Error: No packages in any requested group available to install or update</code></pre></div><p>Turns out it’s <a href=\"http://unix.stackexchange.com/questions/118394/local-yum-repository-with-grouplist-not-working\">not uncommon to have private repos that haven’t had their groups created</a>. Sure enough, a <code>yum grouplist</code> showed no groups available:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">Error: No group data available <span class=\"k\">for</span> configured repositories</code></pre></div><p>The problem here is: I don’t own the repos and can’t update their configuration with groups, and our policy is that I couldn’t just add another external repo for the VM to use.  But, something I <em>did</em> have access to was another Linux VM whose repos pointed to the standard Unbreakable Linux Network.</p><p>On that machine, I could list out all the components of the <code>Desktop</code> group with the <code>yum groupinfo</code> command:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">yum groupinfo Desktop...Group: Desktop Description: A minimal desktop that can also be used as a thin client. Mandatory Packages:   NetworkManager   NetworkManager-gnome   alsa-plugins-pulseaudio   at-spi   control-center   dbus   gdm   gdm-user-switch-applet   gnome-panel   gnome-power-manager   gnome-screensaver   gnome-session   gnome-terminal   gvfs-archive   gvfs-fuse   gvfs-smb   metacity   nautilus   notification-daemon   polkit-gnome   xdg-user-dirs-gtk   yelp Default Packages:   control-center-extra   eog   gdm-plugin-fingerprint   gnome-applets   gnome-media   gnome-packagekit   gnome-vfs2-smb   gok   openssh-askpass   orca   pulseaudio-module-gconf   pulseaudio-module-x11   rhn-setup-gnome   vino Optional Packages:   sabayon-apply   tigervnc-server   xguest</code></pre></div><p>Usually a <code>yum groupinstall</code> grabs <a href=\"http://sapiengames.com/2014/05/18/install-optional-packages-yum-groupinstall-command/\">just the Mandatory and Default Packages</a> and installs them all in turn. Copying and pasting this list of packages into a editor made it easy to multi-select the CR/LF and tabs and replace them with a single space.  Then it was easy to create a “non-group” install command:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">yum install -y NetworkManager NetworkManager-gnome alsa-plugins-pulseaudio at-spi control-center dbus gdm gdm-user-switch-applet gnome-panel gnome-power-manager gnome-screensaver gnome-session gnome-terminal gvfs-archive gvfs-fuse gvfs-smb metacity nautilus notification-daemon polkit-gnome xdg-user-dirs-gtk yelp control-center-extra eog gdm-plugin-fingerprint gnome-applets gnome-media gnome-packagekit gnome-vfs2-smb gok openssh-askpass orca pulseaudio-module-gconf pulseaudio-module-x11 rhn-setup-gnome vino</code></pre></div><p>This worked great because all those packages were in my private repo; it was only the group definitions that were missing. Once I ran that big command (and a few more for the other groups I wanted to install), my VM was running a GUI login just fine.</p>"
    },
  
    {
      "title": "Return a Promise from handleActivated for Data-bound ojModules",
      "date_published": "2016-12-12T00:00:00+00:00",
      "date_modified": "2016-12-12T00:00:00+00:00",
      "id": "/2016/12/12/return-a-promise-from-handleactivated/",
      "url": "http://www.likeahouseafire.com/2016/12/12/return-a-promise-from-handleactivated/",
      
      
      
      "tags": ["Oracle JET","JavaScript","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Use ojModule's handleActivated to fetch and return your data, postponing the DOM until the promise resolves",
      "content_text": "In a recent post we talked up the ojModule life cycle and the function hooks that run at various points while a module is being brought in or dismissed. One of those hooks can be used to load data from an external source and have the module wait to build its view until the data has arrived.ojModule life cycle recapThe ojModule component is a foundational part of Oracle JET that works hand-in-hand with the ojRouter.  ojModules make up the “pages” in single-page apps that the Yeoman templates generate like NavDrawer and NavBar, or they can even be subcomponents like the panels of an ojTrain’s “in-page” component.Thanks to the module life cycle, ojModules have a neat trick if you want to load them up with fetched data. Normally a call to a data endpoint won’t return in time before the DOM starts generating, or at least you can’t rely on it to do so since it’s an async call. If you have observables waiting for the data you have to play tricks:  like setting a flag to hide the data-bound components in the HTML view until the data is ready; or, doing all the viewModel work in a callback function that follows after your data is ready; or, calling valueHasMutated() on an observableArray to wake it up and have it refresh the HTML after the data arrives.handleActivated to the rescueWhen you use the Yeoman generator to build a NavBar or NavDrawer app, you’ll see this code in the generated viewModels:/*** Optional ViewModel method invoked when this ViewModel is about to be* used for the View transition.  The application can put data fetch logic* here that can return a Promise which will delay the handleAttached function* call below until the Promise is resolved.* @param {Object} info - An object with the following key-value pairs:* @param {Node} info.element - DOM element or where the binding is attached. This may be a &#39;virtual&#39; element (comment node).* @param {Function} info.valueAccessor - The binding&#39;s value accessor.* @return {Promise|undefined} - If the callback returns a Promise, the next phase (attaching DOM) will be delayed until* the promise is resolved*/self.handleActivated = function(info) {// Implement if needed};It’s this line in the comment that interests us: “put data fetch logic here that can return a Promise which will delay the handleAttached function call below until the Promise is resolved.” So if we want to hold off on rendering the DOM until our data arrives, we can use this hook and pause the rendering until we have data.When would we want to do that? Not necessarily for table data: there’s no need to delay the DOM since we can data-bind to a collection and the table will show a “fetching data” message until the data comes back. Most of the other data-bound JET components also gracefully take data updates and dynamically re-render just fine.But there are other times when you do want to delay the DOM. Perhaps you don’t want users staring at unpopulated form data fields.  You might need to manipulate the returned data before rendering any of it in the browser, or perhaps need to have the data in-hand to determine the layout of the module. Another example: on a form-centric project we had combo boxes with options binding that got their valid lists-of-values from REST APIs, and we didn’t want the combo boxes to be empty during that brief moment while waiting for the ajax calls to come back from the server.Fixing a Filmstrip with remote dataOr how about a JET component that won’t render right without the proper data in-place before the DOM is built? Take the Film Strip as an example. If the data that backs the &lt;!-- ko foreach: --&gt; loop isn’t available when the DOM is rendering, the filmstrip will be laid out as if there were no items in the strip. When the data arrives a few hundred milliseconds later, the filmstrip will then try to jam them all in there and the layout will look horrible:But if we just delay the DOM rendering with a Promise and the handleActivated function, we give our filmstrip a chance to see data exists in the observableArray before the view iterates over the forEach, and thus it renders properly:Here’s the trick: we put the call to retrieve the data from the remote REST endpoint into the handleActivated function, but we also wrap it in a new Promise() and return the whole kit and caboodle. The ojModule then knows to delay the DOM rendering until the promise resolves, and so the ojFilmStrip waits for our data.Here’s the code for the viewModel and view:filmstrip.jsdefine([&#39;ojs/ojcore&#39;, &#39;knockout&#39;, &#39;jquery&#39;,          &#39;ojs/ojknockout&#39;, &#39;ojs/ojfilmstrip&#39;], function (oj, ko, $) {  function FilmStripViewModel() {    var self = this;    self.users = ko.observableArray();            /*  This won&#39;t work, because the data comes back too late for the view to pass//   it to the ojFilmStrip it in the ko.forEach//    $.ajax({//        url: &#39;https://jsonplaceholder.typicode.com/users&#39;,//        method: &#39;GET&#39;//      }).then(function(data) {//  //          data.forEach(function(user){//          self.users.push(user);//        });////    });*/         self.handleActivated = function(info) {          return new Promise(function(resolve, reject) {/*    This works great, because the ojModule waits to build the view until//     the promise resolves */        $.ajax({          url: &#39;https://jsonplaceholder.typicode.com/users&#39;,          method: &#39;GET&#39;          }).then(function(data) {            data.forEach(function(user){              self.users.push(user);            });            resolve();        });      });            };      }  return FilmStripViewModel;});filmstrip.html&lt;h1&gt;Filmstrip&lt;/h1&gt;&lt;div id=&quot;filmstrip-navarrows-example&quot; class=&quot;oj-flex oj-sm-justify-content-center&quot;&gt;  &lt;div id=&quot;filmStripDiv&quot; class=&quot;oj-panel oj-flex-item&quot; style=&quot;margin: 20px; max-width: 450px&quot;&gt;    &lt;div id=&quot;filmStrip&quot;          aria-label=&quot;Set of users from REST API&quot;          data-bind=&quot;ojComponent: {           component: &#39;ojFilmStrip&#39;,            arrowPlacement: &#39;adjacent&#39;,            arrowVisibility: &#39;auto&#39; }&quot;&gt;      &lt;!-- ko foreach: users --&gt;      &lt;div class=&quot;oj-panel oj-panel-alt2 demo-filmstrip-item&quot; &gt;        &lt;span data-bind=&quot;text: name&quot;&gt;&lt;/span&gt;      &lt;/div&gt;      &lt;!-- /ko --&gt;    &lt;/div&gt;&lt;!-- end filmStrip --&gt;  &lt;/div&gt; &lt;!-- end filmStripDiv --&gt;&lt;/div&gt;",
      "content_html": "<p>In a <a href=\"http://likeahouseafire.com/2016/12/09/ojmodule-lifecycle-functions/\">recent post we talked up the ojModule life cycle</a> and the function hooks that run at various points while a module is being brought in or dismissed. One of those hooks can be used to load data from an external source and have the module wait to build its view until the data has arrived.</p><h2 id=\"ojmodule-life-cycle-recap\">ojModule life cycle recap</h2><p>The <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html?component=ojModule&amp;demo=simpleNavigation\">ojModule component</a> is a foundational part of Oracle JET that works hand-in-hand with the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html?component=router&amp;demo=simple\">ojRouter</a>.  ojModules make up the “pages” in single-page apps that the Yeoman templates generate like <a href=\"http://www.oracle.com/webfolder/technetwork/jet/public_samples/JET-Template-Web-NavDrawer/public_html/index.html\">NavDrawer</a> and <a href=\"http://www.oracle.com/webfolder/technetwork/jet/public_samples/JET-Template-Web-NavBar/public_html/index.html\">NavBar</a>, or they can even be subcomponents <a href=\"http://likeahouseafire.com/2016/01/23/modules-are-your-friends/\">like the panels of an ojTrain’s</a> “in-page” component.</p><p>Thanks to the <a href=\"https://docs.oracle.com/middleware/jet202/jet/developer/GUID-ABB82BD1-9B65-44D2-AE43-81A0A3A44453.htm#JETDG-GUID-ABB82BD1-9B65-44D2-AE43-81A0A3A44453\">module life cycle</a>, ojModules have a neat trick if you want to load them up with fetched data. Normally a call to a data endpoint won’t return in time before the DOM starts generating, or at least you can’t rely on it to do so since it’s an async call. If you have observables waiting for the data you have to play tricks:  like <a href=\"http://jsjim.blogspot.com/2016/04/help-im-using-asynchronous-javascript.html\">setting a flag to hide the data-bound components</a> in the HTML view until the data is ready; or, doing all the viewModel work <a href=\"https://blogs.oracle.com/geertjan/entry/simple_json_and_oracle_jet\">in a callback function that follows after your data is ready</a>; or, <a href=\"https://community.oracle.com/message/13781951#13781951\">calling valueHasMutated() on an observableArray to wake it up</a> and have it refresh the HTML after the data arrives.</p><h2 id=\"handleactivated-to-the-rescue\">handleActivated to the rescue</h2><p>When you use the Yeoman generator to build a NavBar or NavDrawer app, you’ll see this code in the generated viewModels:</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**</span><span class=\"cm\">* Optional ViewModel method invoked when this ViewModel is about to be</span><span class=\"cm\">* used for the View transition.  The application can put data fetch logic</span><span class=\"cm\">* here that can return a Promise which will delay the handleAttached function</span><span class=\"cm\">* call below until the Promise is resolved.</span><span class=\"cm\">* @param {Object} info - An object with the following key-value pairs:</span><span class=\"cm\">* @param {Node} info.element - DOM element or where the binding is attached. This may be a &#39;virtual&#39; element (comment node).</span><span class=\"cm\">* @param {Function} info.valueAccessor - The binding&#39;s value accessor.</span><span class=\"cm\">* @return {Promise|undefined} - If the callback returns a Promise, the next phase (attaching DOM) will be delayed until</span><span class=\"cm\">* the promise is resolved</span><span class=\"cm\">*/</span><span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">handleActivated</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">info</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"c1\">// Implement if needed</span><span class=\"p\">};</span></code></pre></div><p>It’s this line in the comment that interests us: <em>“put data fetch logic here that can return a Promise which will delay the handleAttached function call below until the Promise is resolved.”</em> So if we want to hold off on rendering the DOM until our data arrives, we can use this hook and pause the rendering until we have data.</p><p>When would we want to do that? Not necessarily for table data: there’s no need to delay the DOM since we can data-bind to a collection and the table will show a “fetching data” message until the data comes back. Most of the other data-bound JET components also gracefully take data updates and dynamically re-render just fine.</p><p>But there are other times when you <em>do</em> want to delay the DOM. Perhaps you don’t want users staring at unpopulated form data fields.  You might need to manipulate the returned data before rendering any of it in the browser, or perhaps need to have the data in-hand to determine the layout of the module. Another example: on a form-centric project we had combo boxes with <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html?component=combobox&amp;demo=optionsBinding\">options binding</a> that got their valid lists-of-values from REST APIs, and we didn’t want the combo boxes to be empty during that brief moment while waiting for the ajax calls to come back from the server.</p><h2 id=\"fixing-a-filmstrip-with-remote-data\">Fixing a Filmstrip with remote data</h2><p>Or how about a JET component that won’t render right without the proper data in-place before the DOM is built? Take the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html?component=filmStrip&amp;demo=filmStripNavArrows\">Film Strip</a> as an example. If the data that backs the <code>&lt;!-- ko foreach: --&gt;</code> loop isn’t available when the DOM is rendering, the filmstrip will be laid out as if there were no items in the strip. When the data arrives a few hundred milliseconds later, the filmstrip will then try to jam them all in there and the layout will look horrible:</p><div class=\"full zoomable\"><img src=\"/images/20161212/jammed-up-after-data-arrived-too-late.png\" /></div><p>But if we just delay the DOM rendering with a <code>Promise</code> and the <code>handleActivated</code> function, we give our filmstrip a chance to see data exists in the observableArray before the view iterates over the <code>forEach</code>, and thus it renders properly:</p><div class=\"full zoomable\"><img src=\"/images/20161212/ahh-thats-better-waiting-on-a-promise-to-render.png\" /></div><p>Here’s the trick: we put the call to retrieve the data from the remote REST endpoint into the <code>handleActivated</code> function, but we also wrap it in a <code>new Promise()</code> and return the whole kit and caboodle. The ojModule then knows to delay the DOM rendering until the promise resolves, and so the ojFilmStrip waits for our data.</p><p>Here’s the code for the viewModel and view:</p><h4 id=\"filmstripjs\">filmstrip.js</h4><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">define</span><span class=\"p\">([</span><span class=\"s1\">&#39;ojs/ojcore&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;knockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;jquery&#39;</span><span class=\"p\">,</span>          <span class=\"s1\">&#39;ojs/ojknockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojfilmstrip&#39;</span><span class=\"p\">],</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">oj</span><span class=\"p\">,</span> <span class=\"nx\">ko</span><span class=\"p\">,</span> <span class=\"nx\">$</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"kd\">function</span> <span class=\"nx\">FilmStripViewModel</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"kd\">var</span> <span class=\"nx\">self</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>    <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">users</span> <span class=\"o\">=</span> <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">observableArray</span><span class=\"p\">();</span>            <span class=\"cm\">/*  This won&#39;t work, because the data comes back too late for the view to pass</span><span class=\"cm\">//   it to the ojFilmStrip it in the ko.forEach</span><span class=\"cm\">//    $.ajax({</span><span class=\"cm\">//        url: &#39;https://jsonplaceholder.typicode.com/users&#39;,</span><span class=\"cm\">//        method: &#39;GET&#39;</span><span class=\"cm\">//      }).then(function(data) {</span><span class=\"cm\">//  </span><span class=\"cm\">//          data.forEach(function(user){</span><span class=\"cm\">//          self.users.push(user);</span><span class=\"cm\">//        });</span><span class=\"cm\">//</span><span class=\"cm\">//    });</span><span class=\"cm\">*/</span>         <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">handleActivated</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">info</span><span class=\"p\">)</span> <span class=\"p\">{</span>          <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">Promise</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"cm\">/*    This works great, because the ojModule waits to build the view until</span><span class=\"cm\">//     the promise resolves */</span>        <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>          <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s1\">&#39;https://jsonplaceholder.typicode.com/users&#39;</span><span class=\"p\">,</span>          <span class=\"nx\">method</span><span class=\"o\">:</span> <span class=\"s1\">&#39;GET&#39;</span>          <span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">){</span>              <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">users</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">);</span>            <span class=\"p\">});</span>            <span class=\"nx\">resolve</span><span class=\"p\">();</span>        <span class=\"p\">});</span>      <span class=\"p\">});</span>            <span class=\"p\">};</span>      <span class=\"p\">}</span>  <span class=\"k\">return</span> <span class=\"nx\">FilmStripViewModel</span><span class=\"p\">;</span><span class=\"p\">});</span></code></pre></div><h4 id=\"filmstriphtml\">filmstrip.html</h4><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Filmstrip</span><span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;</span><span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">&quot;filmstrip-navarrows-example&quot;</span> <span class=\"kr\">class</span><span class=\"o\">=</span><span class=\"s2\">&quot;oj-flex oj-sm-justify-content-center&quot;</span><span class=\"o\">&gt;</span>  <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">&quot;filmStripDiv&quot;</span> <span class=\"kr\">class</span><span class=\"o\">=</span><span class=\"s2\">&quot;oj-panel oj-flex-item&quot;</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"s2\">&quot;margin: 20px; max-width: 450px&quot;</span><span class=\"o\">&gt;</span>    <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">&quot;filmStrip&quot;</span>          <span class=\"nx\">aria</span><span class=\"o\">-</span><span class=\"nx\">label</span><span class=\"o\">=</span><span class=\"s2\">&quot;Set of users from REST API&quot;</span>          <span class=\"nx\">data</span><span class=\"o\">-</span><span class=\"nx\">bind</span><span class=\"o\">=</span><span class=\"s2\">&quot;ojComponent: {</span><span class=\"s2\">           component: &#39;ojFilmStrip&#39;, </span><span class=\"s2\">           arrowPlacement: &#39;adjacent&#39;, </span><span class=\"s2\">           arrowVisibility: &#39;auto&#39; }&quot;</span><span class=\"o\">&gt;</span>      <span class=\"c\">&lt;!--</span> <span class=\"nx\">ko</span> <span class=\"nx\">foreach</span><span class=\"o\">:</span> <span class=\"nx\">users</span> <span class=\"o\">--&gt;</span>      <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"kr\">class</span><span class=\"o\">=</span><span class=\"s2\">&quot;oj-panel oj-panel-alt2 demo-filmstrip-item&quot;</span> <span class=\"o\">&gt;</span>        <span class=\"o\">&lt;</span><span class=\"nx\">span</span> <span class=\"nx\">data</span><span class=\"o\">-</span><span class=\"nx\">bind</span><span class=\"o\">=</span><span class=\"s2\">&quot;text: name&quot;</span><span class=\"o\">&gt;&lt;</span><span class=\"err\">/span&gt;</span>      <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>      <span class=\"c\">&lt;!--</span> <span class=\"o\">/</span><span class=\"nx\">ko</span> <span class=\"o\">--&gt;</span>    <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;&lt;!-- end filmStrip --&gt;</span>  <span class=\"o\">&lt;</span><span class=\"err\">/div&gt; &lt;!-- end filmStripDiv --&gt;</span><span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span></code></pre></div>"
    },
  
    {
      "title": "Leveraging the ojModule Life&nbsp;Cycle Functions",
      "date_published": "2016-12-09T00:00:00+00:00",
      "date_modified": "2016-12-09T00:00:00+00:00",
      "id": "/2016/12/09/ojmodule-lifecycle-functions/",
      "url": "http://www.likeahouseafire.com/2016/12/09/ojmodule-lifecycle-functions/",
      
      
      
      "tags": ["JET","Dev","JavaScript"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Understanding the four horsemen of the ojModule templates: handleActivated, handleAttached, handleBindingsApplied, and handleDetached",
      "content_text": "Srikantha Bhadrasetty asked a good question on an old blog post about using JET Cookbook code: How do you reuse the more complicated recipes that lean on tools like jQuery’s DOMReady function?In that particular cookbook entry there is a jQuery function that waits for the DOM to be built before registering the two treeModels and adding drag and drop event listeners to three pink divs. If we refactor all the cookbook code into one of the QuickStart’s RequireJS-based ojModules but leave that code in the jQuery DOMReady function, it will fire at the wrong time and the ojModule won’t load. Your console will show an error like:Uncaught (in promise) ReferenceError: Unable to process binding &quot;ojComponent: {           component:&#39;ojTree&#39;, ...&quot;The solution is to move the code out of the jQuery DOMReady $(function(){ ... }) and into appropriate ojModule life cycle functions, like self.handleAttached and self.handleBindingsApplied.What is the ojModule ViewModel Life Cycle?When you use ojModule to load your views and viewModels (as the QuickStart is configured to do with the help of the Router), you can hook into listeners that fire at defined spots in the ojModule’s life cycle. These are documented in the JET Developers Guide and in the ojModule JSdocs.If you’ve used the Yeoman generator to build a NavDrawer or NavBar template project, you’ve probably already seen the placeholders for some of these life cycle functions in the template code, with a ton of comments explaining their use and an empty // Implement if needed function body for each:If you don’t need them in your viewModel code, it’s safe to delete these function stubs. When ojModule comes to the respective points in time to call the appropriate life cycle function, it just keeps going if the callback is null or if it’s an empty function like in the template code.But if we have our own code that needs to run at a specific point, such as before or after the corresponding view’s DOM gets built in the browser or even before or after the Knockout bindings fire, we can leverage these specially-named functions and put our code inside of them.For fun, I threw some Chrome timeline markers into my code like so:function lifecycleContentViewModel() {  console.timeStamp(&quot;viewModel Started&quot;);  var self = this;  self.handleActivated = function(info) {    console.timeStamp(&quot;handleActivated Started&quot;);    // Implement if needed  };   ...This makes little orange circles that correspond to timestamp markers at the top of the timeline in the Developer Tools. You can see in the graphic below that there’s a dependable order the life cycle functions fire in and that it happens in the context of loading the current ojModule, long before a jQuery DOMReady or window.load event would fire (this image is a composite of me hovering the mouse over each circle, one at a time):Which one to use?So this brings us back to the cookbook code for the drag-and-drop example. How do we decide what recipe code goes into which life cycle function?By identifying the timing points for when our code needs to run, we can pick the right life cycle function to stick it into. The comments in the Yeoman-generated template viewModels and the documentation help you decide which to pick, and here’s some thoughts on the four of them:            function      when it fires      what it’s good for                  handleActivated      right before view is built      fetching data needed for the view's elements              handleAttached      right after view is attached to the DOM      modifying HTML elements via JavaScript; any time you might want to use a $('selector') and be able to trust the element is there              handleBindingsApplied      after the ko.applyBindings has run against the view       programatically work with the ojComponents post-binding               handleDetached      after view is detached from the DOM      cleaning up       There are a few additional functions listed in the docs that fire at other points in the ojModule life cycle, but these are the four that are stubbed out in the NavDrawer and NavBar templates.Going back to the problem code wrapped in the jQuery DOMReady function from the previously linked drag-and-drop cookbook recipe. I’ll annotate it with comments based on what we need to do:$(function() {    /* these new models need to be created after the DOM is created but before the bindings are applied, so that they&#39;re in place when the KO bindings fire  */  var vmTree1  = new treeModel(&quot;tree1&quot;) ;  var vmTree2  = new treeModel(&quot;tree2&quot;) ;/* */    /* these cookbook lines need to be removed, because oj.Router.sync() in main.js will apply the bindings and we can&#39;t do it twice */  ko.applyBindings(vmTree1, document.getElementById(&#39;tree1&#39;));  ko.applyBindings(vmTree2, document.getElementById(&#39;tree2&#39;));/* */    /* these event handlers can&#39;t be added until the divs are in the DOM and the ojComponents are ready, so also must run after view is attached */  for (var i = 1; i &lt;= 3; i++)  {    var div = document.getElementById(&quot;dragdiv&quot; + i) ;    div.addEventListener(&quot;dragstart&quot;, dragDivStart, false) ;    div.addEventListener(&quot;dragend&quot;,   dragDivEnd,   false) ;  }   /* */});For our code, we need the self.handleAttached to setup the models that build the two trees. Looking at the treeModel() function, it’s obvious the DOM needs to already be in place so that the constructor can build the ojTree structure on top of the two existing tree1 and tree2 divs.We pick the self.handleBindingsApplied function to run the for() loop that registers the dragstart and dragend events since in the original code the ojTrees are already bound, although they technically could run earlier in the handleAttached function because they only rely on having the divs present in the DOM.Again, have a look at the full view and viewModel code for a working example of the drag-and-drop cookbook recipe re-purposed for the NavDrawer ojModule pattern:",
      "content_html": "<p>Srikantha Bhadrasetty asked <a href=\"http://likeahouseafire.com/2016/01/20/pouring-jet-cookbook-into-quickstart/#comment-3040014952\">a good question on an old blog post about using JET Cookbook code</a>: How do you reuse the more complicated recipes that lean on tools like jQuery’s DOMReady function?</p><p>In that <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html?component=tree&amp;demo=treeDnD\">particular cookbook entry</a> there is a jQuery function that waits for the DOM to be built before registering the two <code>treeModels</code> and adding drag and drop event listeners to three pink <code>div</code>s. If we refactor all the cookbook code into one of the QuickStart’s RequireJS-based ojModules but leave that code in the jQuery DOMReady function, it will fire at the wrong time and the ojModule won’t load. Your console will show an error like:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">Uncaught <span class=\"o\">(</span>in promise<span class=\"o\">)</span> ReferenceError: Unable to process binding <span class=\"s2\">&quot;ojComponent: {</span><span class=\"s2\">           component:&#39;ojTree&#39;, ...&quot;</span></code></pre></div><p><a href=\"https://gist.github.com/pthaden/78825aca766280ea18c7e53d674c19f7\">The solution</a> is to move the code out of the jQuery DOMReady <code>$(function(){ ... })</code> and into appropriate ojModule life cycle functions, like <code>self.handleAttached</code> and <code>self.handleBindingsApplied</code>.</p><h2 id=\"what-is-the-ojmodule-viewmodel-life-cycle\">What is the ojModule ViewModel Life Cycle?</h2><p>When you use ojModule to load your views and viewModels (as the QuickStart is configured to do with the help of the Router), you can hook into listeners that fire at defined spots in the ojModule’s life cycle. These are documented in the <a href=\"https://docs.oracle.com/middleware/jet202/jet/developer/GUID-ABB82BD1-9B65-44D2-AE43-81A0A3A44453.htm#JETDG-GUID-ABB82BD1-9B65-44D2-AE43-81A0A3A44453\">JET Developers Guide</a> and in the <a href=\"http://docs.oracle.com/middleware/jet220/jet/reference-jet/ojModule.html\">ojModule JSdocs</a>.</p><p>If you’ve used the Yeoman generator to build a NavDrawer or NavBar template project, you’ve probably already seen the placeholders for some of these life cycle functions in the template code, with a <em>ton</em> of comments explaining their use and an empty <code>// Implement if needed</code> function body for each:</p><div class=\"full zoomable\"><img src=\"/images/20161209/implement_if_needed.png\" /></div><p>If you don’t need them in your viewModel code, it’s safe to delete these function stubs. When ojModule comes to the respective points in time to call the appropriate life cycle function, it just keeps going if the callback is null or if it’s an empty function like in the template code.</p><p>But if we have our own code that needs to run at a specific point, such as before or after the corresponding view’s DOM gets built in the browser or even before or after the Knockout bindings fire, we can leverage these specially-named functions and put our code inside of them.</p><p>For fun, I threw some <a href=\"https://developers.google.com/web/tools/chrome-devtools/console/track-executions#marking-the-timeline\">Chrome timeline markers</a> into my code like so:</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">function</span> <span class=\"nx\">lifecycleContentViewModel</span><span class=\"p\">()</span> <span class=\"p\">{</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">timeStamp</span><span class=\"p\">(</span><span class=\"s2\">&quot;viewModel Started&quot;</span><span class=\"p\">);</span>  <span class=\"kd\">var</span> <span class=\"nx\">self</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>  <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">handleActivated</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">info</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">timeStamp</span><span class=\"p\">(</span><span class=\"s2\">&quot;handleActivated Started&quot;</span><span class=\"p\">);</span>    <span class=\"c1\">// Implement if needed</span>  <span class=\"p\">};</span>   <span class=\"p\">...</span></code></pre></div><p>This makes little orange circles that correspond to timestamp markers at the top of the timeline in the Developer Tools. You can see in the graphic below that there’s a dependable order the life cycle functions fire in and that it happens in the context of loading the current ojModule, <a href=\"https://www.kirupa.com/html5/running_your_code_at_the_right_time.htm\">long before a jQuery DOMReady or window.load event would fire</a> (this image is a composite of me hovering the mouse over each circle, one at a time):</p><div class=\"full zoomable\"><img src=\"/images/20161209/lifecycle_timeline.png\" /></div><h2 id=\"which-one-to-use\">Which one to use?</h2><p>So this brings us back to the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html?component=tree&amp;demo=treeDnD\">cookbook code for the drag-and-drop example</a>. How do we decide what recipe code goes into which life cycle function?</p><p>By identifying the timing points for when our code needs to run, we can pick the right life cycle function to stick it into. The comments in the Yeoman-generated template viewModels and the documentation help you decide which to pick, and here’s some thoughts on the four of them:</p><div class=\"full\"><style>    td{padding-left: 1em ;  text-indent: -1em ;}</style><table>  <thead>    <tr>      <th width=\"27%\"><strong>function</strong></th>      <th width=\"30%\"><strong>when it fires</strong></th>      <th width=\"40%\"><strong>what it’s good for</strong></th>    </tr>  </thead>  <tbody style=\"  text-align: left; vertical-align: text-top;\">    <tr>      <td>handleActivated</td>      <td>right before view is built</td>      <td>fetching data needed for the view's elements</td>    </tr>    <tr>      <td>handleAttached</td>      <td>right after view is attached to the DOM</td>      <td>modifying HTML elements via JavaScript; any time you might want to use a $('selector') and be able to trust the element is there</td>    </tr>    <tr>      <td>handleBindingsApplied</td>      <td>after the ko.applyBindings has run against the view </td>      <td>programatically work with the ojComponents post-binding </td>    </tr>    <tr>      <td>handleDetached</td>      <td>after view is detached from the DOM</td>      <td>cleaning up </td>    </tr>  </tbody></table></div><p>There are a few additional functions listed in the docs that fire at other points in the ojModule life cycle, but these are the four that are stubbed out in the NavDrawer and NavBar templates.</p><p>Going back to the problem code wrapped in the jQuery DOMReady function from the previously linked drag-and-drop cookbook recipe. I’ll annotate it with comments based on what we need to do:</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"cm\">/* these new models need to be created after the DOM is created but before the bindings are applied, so that they&#39;re in place when the KO bindings fire  */</span>  <span class=\"kd\">var</span> <span class=\"nx\">vmTree1</span>  <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">treeModel</span><span class=\"p\">(</span><span class=\"s2\">&quot;tree1&quot;</span><span class=\"p\">)</span> <span class=\"p\">;</span>  <span class=\"kd\">var</span> <span class=\"nx\">vmTree2</span>  <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">treeModel</span><span class=\"p\">(</span><span class=\"s2\">&quot;tree2&quot;</span><span class=\"p\">)</span> <span class=\"p\">;</span><span class=\"cm\">/* */</span>    <span class=\"cm\">/* these cookbook lines need to be removed, because oj.Router.sync() in main.js will apply the bindings and we can&#39;t do it twice */</span>  <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">applyBindings</span><span class=\"p\">(</span><span class=\"nx\">vmTree1</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;tree1&#39;</span><span class=\"p\">));</span>  <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">applyBindings</span><span class=\"p\">(</span><span class=\"nx\">vmTree2</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;tree2&#39;</span><span class=\"p\">));</span><span class=\"cm\">/* */</span>    <span class=\"cm\">/* these event handlers can&#39;t be added until the divs are in the DOM and the ojComponents are ready, so also must run after view is attached */</span>  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>  <span class=\"p\">{</span>    <span class=\"kd\">var</span> <span class=\"nx\">div</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">&quot;dragdiv&quot;</span> <span class=\"o\">+</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">;</span>    <span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">&quot;dragstart&quot;</span><span class=\"p\">,</span> <span class=\"nx\">dragDivStart</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">;</span>    <span class=\"nx\">div</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">&quot;dragend&quot;</span><span class=\"p\">,</span>   <span class=\"nx\">dragDivEnd</span><span class=\"p\">,</span>   <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">;</span>  <span class=\"p\">}</span>   <span class=\"cm\">/* */</span><span class=\"p\">});</span></code></pre></div><p>For our code, we need the <code>self.handleAttached</code> to setup the models that build the two trees. Looking at the <code>treeModel()</code> function, it’s obvious the DOM needs to already be in place so that the constructor can build the ojTree structure on top of the two existing <code>tree1</code> and <code>tree2</code> divs.</p><p>We pick the <code>self.handleBindingsApplied</code> function to run the <code>for()</code> loop that registers the dragstart and dragend events since in the original code the <code>ojTree</code>s are already bound, although they technically could run earlier in the <code>handleAttached</code> function because they only rely on having the <code>div</code>s present in the DOM.</p><p>Again, have a look at the full view and viewModel code for a working example of the drag-and-drop cookbook recipe re-purposed for the NavDrawer ojModule pattern:</p><script src=\"https://gist.github.com/pthaden/78825aca766280ea18c7e53d674c19f7.js\"></script>"
    },
  
    {
      "title": "Build a Standalone App with Electron and Oracle&nbsp;JET",
      "date_published": "2016-10-04T00:00:00+00:00",
      "date_modified": "2016-10-04T00:00:00+00:00",
      "id": "/2016/10/04/build-standalone-app-with-electron-and-jet/",
      "url": "http://www.likeahouseafire.com/2016/10/04/build-standalone-app-with-electron-and-jet/",
      
      
      
      "tags": ["Oracle JET","JavaScript","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Create cross-platform, native OS desktop apps from Oracle JET codebases",
      "content_text": "Oracle JET has great scaffolding and support for building native apps for mobile platforms such as iOS, Android or Windows 10, all from a single JET codebase. And of course you can build browser-based single-page apps that run on the desktop. But what about a native standalone desktop app?Electron is a framework for building cross-platform native apps using web stack technologies. It’s the tool that the Atom editor is created with, and it underpins many other hip apps these days. Electron uses Node.js and the Chromium engine to run web framework code inside of  native OS windows, without needing to launch a browser.Could we use Electron to package up an Oracle JET app and make it a cross-platform desktop executable?Learning about ElectronThe best place to start is from the horse’s mouth, and Zeke Sikelianos of GitHub gave a good overview of Electron that was recorded at their recent Universe 2016 conference:There are also a bunch of tutorials and references out on the web on how to build an electron app. We’ll be leaning on the simple electron-quick-start to wrap a Oracle JET project inside of Electron.Putting JET in an Electron blanketStart with a working JET app. We’ll use the generator to scaffold a plain template with just a header and footer so we feel at home:yo oraclejet electronJet --template=basicI added one of the cookbook visualizations to the code for my basic template. With a grunt serve I’ve got a simple Oracle JET app:You can follow along by cloning this repository, checking out the jetwebapp tag, and running npm start to automatically install all the npm and bower components: git clone https://github.com/pthaden/electronJet.gitcd electronJetgit checkout jetwebappnpm startNow we have a working JET project with its own package.json.  Let’s tweak things to add Electron into the mix. Back at the command line, install the electron npm package as a dependency:npm install electron --save-devElectron is a node.js app and expects an entry in the package.json file for the startup script entry point. Edit the file to include a \"main\": entry pointing at a to-be-created main.js file:package.json{  &quot;name&quot;: &quot;electronJet&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;A sample Oracle JavaScript Extension Toolkit (JET) web app wrapped in Electron&quot;,  &quot;author&quot;: {    &quot;name&quot;: &quot;Paul Thaden&quot;  },  &quot;main&quot;: &quot;main.js&quot;,  &quot;scripts&quot;: { ...Next we need some node.js code to spin up an electron window and stick our JET code inside of it. Create a file in the root of the project called main.js (not to be confused with JET’s main.js in the src/js or web/js folders).main.jsconst {app, BrowserWindow} = require(&#39;electron&#39;)// Keep a global reference of the window object, if you don&#39;t, the window will// be closed automatically when the JavaScript object is garbage collected.let winapp.on(&#39;ready&#39;, () =&gt; {  // Create the browser window.  win = new BrowserWindow({    width: 800,     height: 600,    // turn off node integration in the Electron window to prevent conflicts with require.js    // see http://electron.atom.io/docs/faq/#i-can-not-use-jqueryrequirejsmeteorangularjs-in-electron    webPreferences: { nodeIntegration: false }  })  // and load the index.html of the built JET app.  win.loadURL(&#39;file://&#39; + __dirname + &#39;/web/index.html&#39;)})This is a bare-bones Electron app, but it will get the job done. Note the modification to the BrowserWindow’s webPreferences setting: I disabled nodeIntegration in the Electron renderer process because of conflicts between the require() function in Node and the Require.js loader in JET. You’ll also see that I’m pointing to the /web/index.html in the JET project, which assumes you’ve executed grunt build at least once.To test it out, kick back to the command line at the root of the project and start Electron:electron .If all works well, you’ll have a native app window with your JET content running inside:If you want to make it all build automatically, modify the npm start in the scripts section of the package.json file to call Electron instead of serving via Grunt:package.json{  &quot;name&quot;: &quot;electronJet&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;A sample Oracle JavaScript Extension Toolkit (JET) web app wrapped in Electron&quot;,  &quot;author&quot;: {    &quot;name&quot;: &quot;Paul Thaden&quot;  },  &quot;main&quot;: &quot;main.js&quot;,  &quot;scripts&quot;: {    &quot;postinstall&quot;: &quot;bower install &amp;&amp; grunt bowercopy&quot;,    &quot;prestart&quot;: &quot;npm install&quot;,    &quot;start&quot;: &quot;grunt build &amp;&amp; electron .&quot;  },  &quot;devDependencies&quot;: { ...Does it really make an executable?I used electron-packager to create Mac, Win32 and Linux packaged executable bundles out of the electronJET app. I modified the main.js code a bit to better match the electron-quick-start code and to support the MacOS window closing and quitting conventions. Here’s the Windows version running native on that OS:It’s all up on the GitHub repo, and you can download zips for each platform:  electronJet-darwin-x64.zip for MacOS  electronJet-win32-x64.zip for Windows  electronJet-linux-ia32.zip for Linux",
      "content_html": "<p>Oracle JET has great <a href=\"http://docs.oracle.com/middleware/jet210/jet/developer/GUID-C75CD8DC-5084-4831-BE1A-FFEE4EA8600C.htm#JETDG-GUID-C75CD8DC-5084-4831-BE1A-FFEE4EA8600C\">scaffolding and support for building native apps for mobile platforms</a> such as iOS, Android or Windows 10, all from a single JET codebase. And of course you can build browser-based single-page apps that run on the desktop. But what about a native standalone desktop app?</p><p><a href=\"http://electron.atom.io/\">Electron</a> is a framework for building cross-platform native apps using web stack technologies. It’s the tool that the <a href=\"https://atom.io/\">Atom editor</a> is created with, and it <a href=\"http://electron.atom.io/apps/\">underpins many other hip apps</a> these days. Electron uses Node.js and the Chromium engine to run web framework code inside of  native OS windows, without needing to launch a browser.</p><p>Could we use Electron to package up an Oracle JET app and make it a cross-platform desktop executable?</p><h2 id=\"learning-about-electron\">Learning about Electron</h2><p>The best place to start is from the horse’s mouth, and Zeke Sikelianos of GitHub gave a good overview of Electron that was recorded at their recent Universe 2016 conference:</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/FNHBfN8c32U\" frameborder=\"0\" allowfullscreen=\"\"></iframe><p>There are also a <a href=\"https://github.com/sindresorhus/awesome-electron\">bunch of tutorials and references out on the web</a> on how to build an electron app. We’ll be leaning on the simple <a href=\"https://github.com/electron/electron-quick-start\">electron-quick-start</a> to wrap a Oracle JET project inside of Electron.</p><h2 id=\"putting-jet-in-an-electron-blanket\">Putting JET in an Electron blanket</h2><p>Start with a working JET app. We’ll use the generator to scaffold a plain template with just a header and footer so we feel at home:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">yo oraclejet electronJet --template<span class=\"o\">=</span>basic</code></pre></div><p>I added one of the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html?component=diagram&amp;demo=animations\">cookbook visualizations</a> to the code for my basic template. With a <code>grunt serve</code> I’ve got a simple Oracle JET app:</p><div class=\"full zoomable\"><img src=\"/images/20161004/jet-starter-template-web-basic.png\" /></div><p>You can follow along by <a href=\"https://github.com/pthaden/electronJet\">cloning this repository</a>, checking out the <code>jetwebapp</code> tag, and running <code>npm start</code> to automatically install all the npm and bower components: </p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">git clone https://github.com/pthaden/electronJet.git<span class=\"nb\">cd </span>electronJetgit checkout jetwebappnpm start</code></pre></div><p>Now we have a working JET project with its own <code>package.json</code>.  Let’s tweak things to add Electron into the mix. Back at the command line, install the electron npm package as a dependency:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">npm install electron --save-dev</code></pre></div><p>Electron is a node.js app and expects an entry in the <code>package.json</code> file for the startup script entry point. Edit the file to include a <code>\"main\":</code> entry pointing at a to-be-created main.js file:</p><h4 id=\"packagejson\">package.json</h4><div class=\"highlight\"><pre><code class=\"language-json\" data-lang=\"json\"><span class=\"p\">{</span>  <span class=\"nt\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;electronJet&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;version&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1.0.0&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;description&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;A sample Oracle JavaScript Extension Toolkit (JET) web app wrapped in Electron&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;author&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>    <span class=\"nt\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Paul Thaden&quot;</span>  <span class=\"p\">},</span>  <span class=\"nt\">&quot;main&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main.js&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;scripts&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"err\">...</span></code></pre></div><p>Next we need some node.js code to spin up an electron window and stick our JET code inside of it. Create a file in the root of the project called <code>main.js</code> (not to be confused with JET’s <code>main.js</code> in the <code>src/js</code> or <code>web/js</code> folders).</p><h4 id=\"mainjs\">main.js</h4><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"kr\">const</span> <span class=\"p\">{</span><span class=\"nx\">app</span><span class=\"p\">,</span> <span class=\"nx\">BrowserWindow</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;electron&#39;</span><span class=\"p\">)</span><span class=\"c1\">// Keep a global reference of the window object, if you don&#39;t, the window will</span><span class=\"c1\">// be closed automatically when the JavaScript object is garbage collected.</span><span class=\"kd\">let</span> <span class=\"nx\">win</span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">&#39;ready&#39;</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>  <span class=\"c1\">// Create the browser window.</span>  <span class=\"nx\">win</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">BrowserWindow</span><span class=\"p\">({</span>    <span class=\"nx\">width</span><span class=\"o\">:</span> <span class=\"mi\">800</span><span class=\"p\">,</span>     <span class=\"nx\">height</span><span class=\"o\">:</span> <span class=\"mi\">600</span><span class=\"p\">,</span>    <span class=\"c1\">// turn off node integration in the Electron window to prevent conflicts with require.js</span>    <span class=\"c1\">// see http://electron.atom.io/docs/faq/#i-can-not-use-jqueryrequirejsmeteorangularjs-in-electron</span>    <span class=\"nx\">webPreferences</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">nodeIntegration</span><span class=\"o\">:</span> <span class=\"kc\">false</span> <span class=\"p\">}</span>  <span class=\"p\">})</span>  <span class=\"c1\">// and load the index.html of the built JET app.</span>  <span class=\"nx\">win</span><span class=\"p\">.</span><span class=\"nx\">loadURL</span><span class=\"p\">(</span><span class=\"s1\">&#39;file://&#39;</span> <span class=\"o\">+</span> <span class=\"nx\">__dirname</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/web/index.html&#39;</span><span class=\"p\">)</span><span class=\"p\">})</span></code></pre></div><p>This is a bare-bones Electron app, but it will get the job done. Note the modification to the <code>BrowserWindow</code>’s <code>webPreferences</code> setting: I disabled <code>nodeIntegration</code> in the Electron renderer process because of conflicts between the <code>require()</code> function in Node and the Require.js loader in JET. You’ll also see that I’m pointing to the <code>/web/index.html</code> in the JET project, which assumes you’ve executed <code>grunt build</code> at least once.</p><p>To test it out, kick back to the command line at the root of the project and start Electron:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">electron .</code></pre></div><p>If all works well, you’ll have a native app window with your JET content running inside:</p><div class=\"full zoomable\"><img src=\"/images/20161004/electron-app-with-jet-inside.png\" /></div><p>If you want to make it all build automatically, modify the <code>npm start</code> in the <code>scripts</code> section of the package.json file to call Electron instead of serving via Grunt:</p><h4 id=\"packagejson-1\">package.json</h4><div class=\"highlight\"><pre><code class=\"language-json\" data-lang=\"json\"><span class=\"p\">{</span>  <span class=\"nt\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;electronJet&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;version&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1.0.0&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;description&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;A sample Oracle JavaScript Extension Toolkit (JET) web app wrapped in Electron&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;author&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>    <span class=\"nt\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Paul Thaden&quot;</span>  <span class=\"p\">},</span>  <span class=\"nt\">&quot;main&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main.js&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;scripts&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>    <span class=\"nt\">&quot;postinstall&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;bower install &amp;&amp; grunt bowercopy&quot;</span><span class=\"p\">,</span>    <span class=\"nt\">&quot;prestart&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;npm install&quot;</span><span class=\"p\">,</span>    <span class=\"nt\">&quot;start&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;grunt build &amp;&amp; electron .&quot;</span>  <span class=\"p\">},</span>  <span class=\"nt\">&quot;devDependencies&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"err\">...</span></code></pre></div><h2 id=\"does-it-really-make-an-executable\">Does it really make an executable?</h2><p>I used <a href=\"https://github.com/electron-userland/electron-packager\">electron-packager</a> to create Mac, Win32 and Linux packaged executable bundles out of the electronJET app. I modified the <code>main.js</code> code a bit to better match the <a href=\"https://github.com/electron/electron-quick-start/blob/master/main.js\">electron-quick-start</a> code and to support the MacOS window closing and quitting conventions. </p><p>Here’s the Windows version running native on that OS:</p><div class=\"full zoomable\"><img src=\"/images/20161004/windows-electronjet-app.png\" /></div><p>It’s all <a href=\"https://github.com/pthaden/electronJet\">up on the GitHub repo</a>, and you can download zips for each platform:</p><ul>  <li><a href=\"https://github.com/pthaden/electronJet/raw/master/electron-packager%20output/electronJet-darwin-x64.zip\">electronJet-darwin-x64.zip</a> for MacOS</li>  <li><a href=\"https://github.com/pthaden/electronJet/raw/master/electron-packager%20output/electronJet-win32-x64.zip\">electronJet-win32-x64.zip</a> for Windows</li>  <li><a href=\"https://github.com/pthaden/electronJet/raw/master/electron-packager%20output/electronJet-linux-ia32.zip\">electronJet-linux-ia32.zip</a> for Linux</li></ul>"
    },
  
    {
      "title": "JSFiddle Base for Oracle JET 2.1.0",
      "date_published": "2016-09-27T00:00:00+00:00",
      "date_modified": "2016-09-27T00:00:00+00:00",
      "id": "/2016/09/27/jsfiddle-jet-base-for-2.1.0/",
      "url": "http://www.likeahouseafire.com/2016/09/27/jsfiddle-jet-base-for-2.1.0/",
      
      
      
      "tags": ["Oracle JET","JavaScript","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Updated scaffolding to run JET version 2.1.0 code on code pen sites",
      "content_text": "[Update 01-Jan-2018:  new 4.1.0 templates for CodePen and JSFiddle that leverage the new Oracle JET CDN; see here for more details][Update 14-Apr-2017:  new 3.0.0 templates for CodePen.io and JSFiddle]Today I updated the code for my JSFiddle base to use Oracle JET 2.1.0. This is based on work that Cliff Sanchez and Jim Marion put together to host JET examples on public code pen sites.A while back Jim documented the one weird trick that got JET working on JSFiddle via RawGit, which is a pseudo-CDN we can use until JET is published to a proper CDN. Also, take a look at Cliff’s work on CodePen in case you prefer that service.My v2.1.0 JSFiddle base is embedded below. You’ll see I’ve updated the JS tab using the Migrating a v2.0.x Web Application to v2.1.0 instructions. Also, I found that you can move the requirejs.config() block down to the bottom and it will still work–this seems to draw more attention to your example viewModel code and less to the frameworks.",
      "content_html": "<p>[Update 01-Jan-2018:  new 4.1.0 templates for <a href=\"https://codepen.io/pthaden/pen/PEjWyo\">CodePen</a> and <a href=\"https://jsfiddle.net/pthaden/h77Logno/\">JSFiddle</a> that leverage the new Oracle JET CDN; see <a href=\"/2018/01/01/jet-via-cdn/\">here for more details</a>]</p><p>[Update 14-Apr-2017:  new 3.0.0 templates for <a href=\"http://codepen.io/pthaden/pen/YVPLRY\">CodePen.io</a> and <a href=\"https://jsfiddle.net/pthaden/cguuot0t/\">JSFiddle</a>]</p><p>Today I updated the code for my JSFiddle base to use Oracle JET 2.1.0. This is based on work that <a href=\"http://cliffsanchez.com/\">Cliff Sanchez</a> and <a href=\"http://jsjim.blogspot.com/\">Jim Marion</a> put together to host JET examples on public code pen sites.</p><p>A while back <a href=\"http://jsjim.blogspot.com/2016/04/jsfiddle-for-oracle-jet-201.html\">Jim documented the one weird trick</a> that got JET working on JSFiddle via RawGit, which is a pseudo-CDN we can use until JET is published to a proper CDN. Also, take a <a href=\"http://codepen.io/cliffsanchez/\">look at Cliff’s work on CodePen</a> in case you prefer that service.</p><p><a href=\"https://jsfiddle.net/pthaden/cbev95yr/\">My v2.1.0 JSFiddle base</a> is embedded below. You’ll see I’ve updated the JS tab using the <a href=\"http://docs.oracle.com/middleware/jet210/jet/developer/GUID-F4F792A5-709B-4999-81F8-5F80B1A62664.htm#JETDG-GUID-F4F792A5-709B-4999-81F8-5F80B1A62664\">Migrating a v2.0.x Web Application to v2.1.0</a> instructions. Also, I found that you can move the <code>requirejs.config()</code> block down to the bottom and it will still work–this seems to draw more attention to your example viewModel code and less to the frameworks.</p><script async=\"\" src=\"//jsfiddle.net/pthaden/cbev95yr/embed/\"></script>"
    },
  
    {
      "title": "The Best JavaOne Session I Didn't See (in person)",
      "date_published": "2016-09-22T00:00:00+00:00",
      "date_modified": "2016-09-22T00:00:00+00:00",
      "id": "/2016/09/22/functional-programming-javaone-videos/",
      "url": "http://www.likeahouseafire.com/2016/09/22/functional-programming-javaone-videos/",
      
      
      
      "tags": ["Functional","Java","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Functional Programming and a ton of other sessions on the JavaOne YouTube Channel",
      "content_text": "I snuck over to JavaOne16 because I wanted to take in a session titled Refactoring to Functional Style with Java 8 by Venkat Subramaniam. When I got there the room was packed out and customers rightly go first for the last seats. However, the attendants said that content from that ballroom was being streamed, so I hopped on YouTube and watched the session on my mobile phone. This is one of the best sessions I “attended” while at OpenWorld this year:Venkat’s presentation style is very entertaining, and he slowly walks through the benefits of thinking in functions. Turns out Venkat is a JavaOne Rockstar, which is probably why his sessions were filled to capacity. He gave six sessions at JavaOne this year, and each time he was in a room that was being recorded, so his sessions are all up on YouTube:  Core Software Design Principles [CON1061]  Refactoring to Functional Style with Java 8 [CON1057]  Toward an Evolutionary Design and Architecture [CON1062]  Let’s Get Lazy: Explore the Real Power of Streams [CON1058]  A Few Hidden Treasures in Java 8 [CON1059]  Interactive Development and Fast Feedback with Java 9 REPL [CON1056]This pointed me to the JavaOne YouTube channel. Have a look here:JavaOne YouTube channelThey were livestreaming four different ballrooms (just a fraction of the venues), and then every day they cut up the livestream into individual talks. I have a whole lot of catching up to do on all the other sessions I missed!",
      "content_html": "<p>I snuck over to JavaOne16 because I wanted to take in a session titled <em>Refactoring to Functional Style with Java 8</em> by <a href=\"http://agiledeveloper.com/\">Venkat Subramaniam</a>. When I got there the room was packed out and customers rightly go first for the last seats. </p><p>However, the attendants said that content from that ballroom was being streamed, so I hopped on YouTube and watched the session on my mobile phone. This is one of the best sessions I “attended” while at OpenWorld this year:</p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wjF1WqGhoQI\" frameborder=\"0\" allowfullscreen=\"\"></iframe><p>Venkat’s presentation style is very entertaining, and he slowly walks through the benefits of thinking in functions. </p><p>Turns out Venkat is a JavaOne Rockstar, which is probably why his sessions were filled to capacity. He <a href=\"https://oracle.rainfocus.com/scripts/catalog/oow16.jsp?search=%22Venkat%20Subramaniam%22\">gave six sessions at JavaOne this year</a>, and each time he was in a room that was being recorded, so his sessions are all up on YouTube:</p><ul>  <li><a href=\"https://youtu.be/XgoldEoK-Rw?list=PLPIzp-E1msrYicmovyeuOABO4HxVPlhEA\">Core Software Design Principles [CON1061]</a></li>  <li><a href=\"https://youtu.be/wjF1WqGhoQI?list=PLPIzp-E1msrYicmovyeuOABO4HxVPlhEA\">Refactoring to Functional Style with Java 8 [CON1057]</a></li>  <li><a href=\"https://youtu.be/cTyMhjyZvOs?list=PLPIzp-E1msrYicmovyeuOABO4HxVPlhEA\">Toward an Evolutionary Design and Architecture [CON1062]</a></li>  <li><a href=\"https://youtu.be/873E68cylNo?list=PLPIzp-E1msrYicmovyeuOABO4HxVPlhEA\">Let’s Get Lazy: Explore the Real Power of Streams [CON1058]</a></li>  <li><a href=\"https://youtu.be/GphO9fWhlAg?list=PLPIzp-E1msrYicmovyeuOABO4HxVPlhEA\">A Few Hidden Treasures in Java 8 [CON1059]</a></li>  <li><a href=\"https://youtu.be/DHTVcq_fK2U?list=PLPIzp-E1msrYicmovyeuOABO4HxVPlhEA\">Interactive Development and Fast Feedback with Java 9 REPL [CON1056]</a></li></ul><p>This pointed me to the JavaOne YouTube channel. Have a look here:</p><p><a href=\"https://www.youtube.com/channel/UCdDhYMT2USoLdh4SZIsu_1g\">JavaOne YouTube channel</a></p><p>They were livestreaming four different ballrooms (just a fraction of the venues), and then every day they cut up the livestream into individual talks. I have a whole lot of catching up to do on all the other sessions I missed!</p>"
    },
  
    {
      "title": "Using the ABCS Custom Code Component to Get and Set Data",
      "date_published": "2016-09-17T00:00:00+00:00",
      "date_modified": "2016-09-17T00:00:00+00:00",
      "id": "/2016/09/17/custom-code-components-in-abcs/",
      "url": "http://www.likeahouseafire.com/2016/09/17/custom-code-components-in-abcs/",
      
      
      
      "tags": ["ABCS","JavaScript","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Hacking around with the ABCS JavaScript API",
      "content_text": "Application Builder Cloud Service (ABCS) is one of the newest “Citizen Developer” tools from Oracle. The idea is that normal folks can create apps by dropping components onto a canvas and tweaking property inspectors, and thus create departmental apps and connect them to SaaS systems. I’ve heard it described as the “democratization of enterprise application development” – power to the people!However, ABCS is a young product and some of the use cases are still being fleshed out. You might find you need to do something beyond what the standard components can do. That’s when the Custom Code component comes in handy.Here’s an example where custom code let us leverage a combobox to not only lookup an entry in a LOV table, but also populate more than one field’s data based on the user’s combobox choice:We had a requirement to store part numbers, descriptions and list prices in a “catalog” business component which would be used as a lookup table. In another part of the app we wanted to create order lines and use a combobox link to the catalog table to populate default values for the ordered items.The problem we ran into is that a combobox field is a foreign key reference field and it only populates one field in a business component. There isn’t a way to “pull” data back into multiple fields. But we wanted the combobox to fill in not just the item number for an order line, but also the list price. Using the standard combobox component it would only fill in the item description.In the screenshot above, the only field that gets updated by a combobox selection is the catalog item itself. Behind the scenes the business object gets populated with a foreign key ID for the lookup table, and the UI gets populated with the description. But we wanted to populate the Price field in the screenshot above, too.Custom Code to the rescue!The Custom Code component can accomplish what we want to do, but fair warning: you’re leaving the “citizen developer” world behind when you drop this tool onto your canvas. When you drag one of these from the palette, you get a property inspector that reflects ABCS’ Oracle JET heritage, steeped in it’s own Knockout.js MVVM architecture. There’s not a lot of documentation yet on how to modify a custom code component, either in the Using ABCS guide or the JavaScript API Reference.Thanks to my colleague David Konecny I was able to learn some tricks about the Custom Component and how to use it to manipulate the data models behind an ABCS page.console.log() all the thingsOne trick that was useful was to get insight into what models were already available in the standard custom component code. You’ll see in the default code that a custom component gets its own viewmodel called CustomComponentViewModel and that ABCS passes in two parameters: params and componentInfo. So I started by console.log-ing all of these objects out and taking a look at them in the browser console while previewing the ABCS page....var CustomComponentViewModel = function (params, componentInfo) {  AbcsLib.checkThis(this);  this.params = params;  console.log(&#39;self&#39;, self);  console.log(&#39;this&#39;, this);  console.log(&#39;params&#39;, params);  console.log(&#39;componentInfo&#39;, componentInfo);    //the page view model  this.pageViewModel = params.root;...Notice that the standard component code makes some convenience variable assignments that the component’s viewModel can access, such as with the line this.pageViewModel = params.root;. This lets you access all of the page’s backing data objects (not just for the viewModel for your custom component).With liberal use of debugger; statements and more console.logging, you can discover things like Knockout observables for each of the fields on your page. Remember that observables can get a value you want to read, but they can also set a value you want to change.This was the key for populating more than one field with data from the lookup table: if I could get the right price that matched the item selected in the combobox, I could use the page’s observables to push it into the right field with code like this:var model = this.pageViewModel;model.Observables.Order_Line_ItemsEntityDetailArchetype.item.Price_2(price);(here, Price_2 is the name of the field in my order lines business object that I want to set, and price is a JavaScript var that holds the looked-up list item price that I’ll retrieve with code coming up, below)How to use the combobox to access the lookup tableSince a ABCS page form is bound to a single business object, I didn’t have a direct handle to the lookup table while creating a new order line record. But I could ask the combobox to tell me what the lookup table values were.David pointed me to the trick to get ahold of the correct price out of the lookup table, leveraging the current page’s combobox value to get the matching price.Here’s David’s code:var selectedCatalogueRecord = model.Archetypes.Order_Line_ItemsEntityDetailArchetype.getObservables()  .item[&#39;ref2Catalog&#39;].getSelectedRecord();var price = selectedCatalogueRecord[&#39;Price&#39;];(here, ref2Catalog is the name of my combobox field in the order lines business object, and Price is the list price column in my catalog lookup table)So this code works great if it runs after the combobox has selected a value. We hooked it up to a button we called Manually Lookup Price to test. It would ask the combobox for its selected record and get the right price. Then with the code from earlier we pushed the right price into the order line business object’s Price_2 observable, and it updated the record just like we wanted.Listening for changes to the comboboxThe last piece of the puzzle involved making the lookup automatic. We didn’t want to press a button to Manually Lookup Price every time; we wanted the user’s action of changing the combobox to fire an event we could intercept to run our code.Getting a handle to the combobox’s change event was tricky. At first I was tempted to just use jQuery to grab ahold of it in the view, but that just seemed wrong to cross over into the UI to hook the data change event.Again David helped me with getting the combobox’s .item['ref2Catalog'].currentObject handle and then setting up a callback to run our code with a subscribe() function.Here’s the entirety of the code that we added to the CustomComponentViewModel function to pull back lookup data and push it into multiple fields in our order lines business object:...//assign pageViewModel to model for conveniencevar model = this.pageViewModel;console.log(&#39;pageViewModel&#39;, model);//get array of all observables, then select the &#39;ref2Catalog&#39; field by name //so we can subscribe to change events, such as when a user picks a new value with the comboboxmodel.Archetypes.Order_Line_ItemsEntityDetailArchetype.getObservables()  .item[&#39;ref2Catalog&#39;]  .currentObject  .subscribe(function() {    //use the combobox item to retrieve the entire selected record from the lookup table    var selectedCatalogueRecord = model.Archetypes.Order_Line_ItemsEntityDetailArchetype.getObservables()\t  .item[&#39;ref2Catalog&#39;]\t  .getSelectedRecord();  \t\t  \tconsole.log(&#39;selectedCatalogueRecord&#39;, selectedCatalogueRecord);    //use the selected record array to retrieve Price and Item_ID by name    var price = selectedCatalogueRecord[&#39;Price&#39;];\tconsole.log(&#39;price&#39;, price);    var itemID = selectedCatalogueRecord[&#39;Item_ID&#39;];\tconsole.log(&#39;itemID&#39;, itemID);    //push the retrieved values into the other fields in the line item form&#39;s business object    //the UI will update with price, and Item_ID is hidden on the form but shows up in the summary table in another part of the app    model.Observables.Order_Line_ItemsEntityDetailArchetype.item.Price_2(price);    model.Observables.Order_Line_ItemsEntityDetailArchetype.item.Item_ID(itemID);  });...Now, when a user makes a change with the combobox, our code fires and looks up the price associated with the selected item in the combobox and then pushes that into the editable Price field on our line items business object. A calculated field for extended price multiplies Qty times Price to get a total number. The UI updates and the user can make adjustments before saving.We ended up removing the default message text in the Custom Code component to make it invisible, but I left it in there in the screenshots above to make it obvious that there was custom code on the page.",
      "content_html": "<p>Application Builder Cloud Service (ABCS) is one of the newest “Citizen Developer” tools from Oracle. The idea is that normal folks can create apps by dropping components onto a canvas and tweaking property inspectors, and thus create departmental apps and connect them to SaaS systems. I’ve heard it described as the “democratization of enterprise application development” – power to the people!</p><p>However, ABCS is a young product and some of the use cases are still being fleshed out. You might find you need to do something beyond what the standard components can do. That’s when the Custom Code component comes in handy.</p><div class=\"full\"><img src=\"/images/20160917/custom-code-widget.png\" /></div><p>Here’s an example where custom code let us leverage a combobox to not only lookup an entry in a LOV table, but also populate more than one field’s data based on the user’s combobox choice:</p><p>We had a requirement to store part numbers, descriptions and list prices in a “catalog” business component which would be used as a lookup table. In another part of the app we wanted to create order lines and use a combobox link to the catalog table to populate default values for the ordered items.</p><p>The problem we ran into is that a combobox field is a foreign key reference field and it only populates one field in a business component. There isn’t a way to “pull” data back into multiple fields. But we wanted the combobox to fill in not just the item number for an order line, but also the list price. Using the standard combobox component it would only fill in the item description.</p><div class=\"full\"><img src=\"/images/20160917/combobox-only-pulls-lookup-data-into-one-field.png\" /></div><p>In the screenshot above, the only field that gets updated by a combobox selection is the catalog item itself. Behind the scenes the business object gets populated with a foreign key ID for the lookup table, and the UI gets populated with the description. But we wanted to populate the Price field in the screenshot above, too.</p><h2 id=\"custom-code-to-the-rescue\">Custom Code to the rescue!</h2><p>The Custom Code component can accomplish what we want to do, but fair warning: you’re leaving the “citizen developer” world behind when you drop this tool onto your canvas. </p><p>When you drag one of these from the palette, you get a property inspector that reflects ABCS’ Oracle JET heritage, steeped in it’s own Knockout.js MVVM architecture. There’s not a lot of documentation yet on how to modify a custom code component, either in the <a href=\"https://docs.oracle.com/cloud/latest/appbuilder/CSAPB/GUID-3DEB084C-4010-4D56-95B9-0FA8F428A704.htm#GUID-D86609A5-438E-4AEA-8137-0E10EE872617\">Using ABCS guide</a> or the <a href=\"https://docs.oracle.com/cloud/latest/appbuilder/ABCSA/\">JavaScript API Reference</a>.</p><div class=\"full\"><img src=\"/images/20160917/custom-code-looks-like-jet-viewmodel.png\" /></div><p>Thanks to my colleague David Konecny I was able to learn some tricks about the Custom Component and how to use it to manipulate the data models behind an ABCS page.</p><h2 id=\"consolelog-all-the-things\">console.log() all the things</h2><p>One trick that was useful was to get insight into what models were already available in the standard custom component code. You’ll see in the default code that a custom component gets its own viewmodel called <code>CustomComponentViewModel</code> and that ABCS passes in two parameters: <code>params</code> and <code>componentInfo</code>. So I started by console.log-ing all of these objects out and taking a look at them in the browser console while previewing the ABCS page.</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"p\">...</span><span class=\"kd\">var</span> <span class=\"nx\">CustomComponentViewModel</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">,</span> <span class=\"nx\">componentInfo</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">AbcsLib</span><span class=\"p\">.</span><span class=\"nx\">checkThis</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">params</span> <span class=\"o\">=</span> <span class=\"nx\">params</span><span class=\"p\">;</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;self&#39;</span><span class=\"p\">,</span> <span class=\"nx\">self</span><span class=\"p\">);</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;this&#39;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;params&#39;</span><span class=\"p\">,</span> <span class=\"nx\">params</span><span class=\"p\">);</span>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;componentInfo&#39;</span><span class=\"p\">,</span> <span class=\"nx\">componentInfo</span><span class=\"p\">);</span>    <span class=\"c1\">//the page view model</span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pageViewModel</span> <span class=\"o\">=</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">root</span><span class=\"p\">;</span><span class=\"p\">...</span></code></pre></div><div class=\"full zoomable\"><img src=\"/images/20160917/console_logging.png\" /></div><p>Notice that the standard component code makes some convenience variable assignments that the component’s viewModel can access, such as with the line <code>this.pageViewModel = params.root;</code>. This lets you access all of the page’s backing data objects (not just for the viewModel for your custom component).</p><p>With liberal use of <code>debugger;</code> statements and more console.logging, you can discover things like Knockout observables for each of the fields on your page. Remember that observables can get a value you want to read, but they can also set a value you want to change.</p><p>This was the key for populating more than one field with data from the lookup table: if I could get the right price that matched the item selected in the combobox, I could use the page’s observables to push it into the right field with code like this:</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">model</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pageViewModel</span><span class=\"p\">;</span><span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">Observables</span><span class=\"p\">.</span><span class=\"nx\">Order_Line_ItemsEntityDetailArchetype</span><span class=\"p\">.</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">Price_2</span><span class=\"p\">(</span><span class=\"nx\">price</span><span class=\"p\">);</span></code></pre></div><p>(here, <code>Price_2</code> is the name of the field in my order lines business object that I want to set, and <code>price</code> is a JavaScript var that holds the looked-up list item price that I’ll retrieve with code coming up, below)</p><h2 id=\"how-to-use-the-combobox-to-access-the-lookup-table\">How to use the combobox to access the lookup table</h2><p>Since a ABCS page form is bound to a single business object, I didn’t have a direct handle to the lookup table while creating a new order line record. But I could ask the combobox to tell me what the lookup table values were.</p><p>David pointed me to the trick to get ahold of the correct price out of the lookup table, leveraging the current page’s combobox value to get the matching price.</p><p>Here’s David’s code:</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"kd\">var</span> <span class=\"nx\">selectedCatalogueRecord</span> <span class=\"o\">=</span> <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">Archetypes</span><span class=\"p\">.</span><span class=\"nx\">Order_Line_ItemsEntityDetailArchetype</span><span class=\"p\">.</span><span class=\"nx\">getObservables</span><span class=\"p\">()</span>  <span class=\"p\">.</span><span class=\"nx\">item</span><span class=\"p\">[</span><span class=\"s1\">&#39;ref2Catalog&#39;</span><span class=\"p\">].</span><span class=\"nx\">getSelectedRecord</span><span class=\"p\">();</span><span class=\"kd\">var</span> <span class=\"nx\">price</span> <span class=\"o\">=</span> <span class=\"nx\">selectedCatalogueRecord</span><span class=\"p\">[</span><span class=\"s1\">&#39;Price&#39;</span><span class=\"p\">];</span></code></pre></div><p>(here, <code>ref2Catalog</code> is the name of my combobox field in the order lines business object, and <code>Price</code> is the list price column in my catalog lookup table)</p><p>So this code works great if it runs after the combobox has selected a value. We hooked it up to a button we called <code>Manually Lookup Price</code> to test. It would ask the combobox for its selected record and get the right price. Then with the code from earlier we pushed the right price into the order line business object’s Price_2 observable, and it updated the record just like we wanted.</p><h2 id=\"listening-for-changes-to-the-combobox\">Listening for changes to the combobox</h2><p>The last piece of the puzzle involved making the lookup automatic. We didn’t want to press a button to Manually Lookup Price every time; we wanted the user’s action of changing the combobox to fire an event we could intercept to run our code.</p><p>Getting a handle to the combobox’s change event was tricky. At first I was tempted to just use jQuery to grab ahold of it in the view, but that just seemed wrong to cross over into the UI to hook the data change event.</p><p>Again David helped me with getting the combobox’s <code>.item['ref2Catalog'].currentObject</code> handle and then setting up a callback to run our code with a <code>subscribe()</code> function.</p><p>Here’s the entirety of the code that we added to the <code>CustomComponentViewModel</code> function to pull back lookup data and push it into multiple fields in our order lines business object:</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"p\">...</span><span class=\"c1\">//assign pageViewModel to model for convenience</span><span class=\"kd\">var</span> <span class=\"nx\">model</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">pageViewModel</span><span class=\"p\">;</span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;pageViewModel&#39;</span><span class=\"p\">,</span> <span class=\"nx\">model</span><span class=\"p\">);</span><span class=\"c1\">//get array of all observables, then select the &#39;ref2Catalog&#39; field by name </span><span class=\"c1\">//so we can subscribe to change events, such as when a user picks a new value with the combobox</span><span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">Archetypes</span><span class=\"p\">.</span><span class=\"nx\">Order_Line_ItemsEntityDetailArchetype</span><span class=\"p\">.</span><span class=\"nx\">getObservables</span><span class=\"p\">()</span>  <span class=\"p\">.</span><span class=\"nx\">item</span><span class=\"p\">[</span><span class=\"s1\">&#39;ref2Catalog&#39;</span><span class=\"p\">]</span>  <span class=\"p\">.</span><span class=\"nx\">currentObject</span>  <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"c1\">//use the combobox item to retrieve the entire selected record from the lookup table</span>    <span class=\"kd\">var</span> <span class=\"nx\">selectedCatalogueRecord</span> <span class=\"o\">=</span> <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">Archetypes</span><span class=\"p\">.</span><span class=\"nx\">Order_Line_ItemsEntityDetailArchetype</span><span class=\"p\">.</span><span class=\"nx\">getObservables</span><span class=\"p\">()</span>\t  <span class=\"p\">.</span><span class=\"nx\">item</span><span class=\"p\">[</span><span class=\"s1\">&#39;ref2Catalog&#39;</span><span class=\"p\">]</span>\t  <span class=\"p\">.</span><span class=\"nx\">getSelectedRecord</span><span class=\"p\">();</span>  \t\t  \t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;selectedCatalogueRecord&#39;</span><span class=\"p\">,</span> <span class=\"nx\">selectedCatalogueRecord</span><span class=\"p\">);</span>    <span class=\"c1\">//use the selected record array to retrieve Price and Item_ID by name</span>    <span class=\"kd\">var</span> <span class=\"nx\">price</span> <span class=\"o\">=</span> <span class=\"nx\">selectedCatalogueRecord</span><span class=\"p\">[</span><span class=\"s1\">&#39;Price&#39;</span><span class=\"p\">];</span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;price&#39;</span><span class=\"p\">,</span> <span class=\"nx\">price</span><span class=\"p\">);</span>    <span class=\"kd\">var</span> <span class=\"nx\">itemID</span> <span class=\"o\">=</span> <span class=\"nx\">selectedCatalogueRecord</span><span class=\"p\">[</span><span class=\"s1\">&#39;Item_ID&#39;</span><span class=\"p\">];</span>\t<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;itemID&#39;</span><span class=\"p\">,</span> <span class=\"nx\">itemID</span><span class=\"p\">);</span>    <span class=\"c1\">//push the retrieved values into the other fields in the line item form&#39;s business object</span>    <span class=\"c1\">//the UI will update with price, and Item_ID is hidden on the form but shows up in the summary table in another part of the app</span>    <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">Observables</span><span class=\"p\">.</span><span class=\"nx\">Order_Line_ItemsEntityDetailArchetype</span><span class=\"p\">.</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">Price_2</span><span class=\"p\">(</span><span class=\"nx\">price</span><span class=\"p\">);</span>    <span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">Observables</span><span class=\"p\">.</span><span class=\"nx\">Order_Line_ItemsEntityDetailArchetype</span><span class=\"p\">.</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">Item_ID</span><span class=\"p\">(</span><span class=\"nx\">itemID</span><span class=\"p\">);</span>  <span class=\"p\">});</span><span class=\"p\">...</span></code></pre></div><div class=\"full\"><img src=\"/images/20160917/combobox-now-populates-two-fields.png\" /></div><p>Now, when a user makes a change with the combobox, our code fires and looks up the price associated with the selected item in the combobox and then pushes that into the editable Price field on our line items business object. A calculated field for extended price multiplies Qty times Price to get a total number. The UI updates and the user can make adjustments before saving.</p><p>We ended up removing the default message text in the Custom Code component to make it invisible, but I left it in there in the screenshots above to make it obvious that there was custom code on the page.</p>"
    },
  
    {
      "title": "Swapping in External Data Sources for the JET Cookbook Examples",
      "date_published": "2016-08-24T00:00:00+00:00",
      "date_modified": "2016-08-24T00:00:00+00:00",
      "id": "/2016/08/24/swapping-in-data-jet-cookbook/",
      "url": "http://www.likeahouseafire.com/2016/08/24/swapping-in-data-jet-cookbook/",
      
      
      
      "tags": ["Oracle JET","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "How to point to your own data files on GitHub Gists when modifying the Oracle JET Cookbook samples",
      "content_text": "The new layout and format for the Cookbook for Oracle JET 2.1.0 is gorgeous. As before, it’s loaded with lots of working sample code, which you can change in-browser and see the results immediately.But what if you’re working with a data collection and you want to test the cookbook recipe with some custom data? You’re only able to edit the HTML view and JS viewModel of a cookbook entry, not any of the supporting files.This was a fun exercise to see if we could host sample data files on Github. Plus I learned something about the way JET’s Cookbook uses tools like MockPagingRESTServer() and how to overcome caching issues. If you look at the JS tab of a cookbook sample that retrieves data, you’ll see that it’s just fetching a URL with $getJSON(). For example, in the List View using oj.Collection sample, it’s a relative URL to a tweets.json file on the Cookbook file system that you can path out to retrieve the raw data with this link.So we can change the path of the $getJSON() call in the Cookbook to retrieve tweets.json from a different location. And we have the format and content of the original JSON file which we could upload to another server after modifying it. But where can we host our modified JSON file?How about as a GitHub Gist?We can create a public Gist file, upload our JSON there and then point to the gist’s raw content from the Cookbook’s JS tab. Really, our modified JSON could be hosted anywhere we can stick a file that our browser can find, whether on the internet, our intranet or even on our localhost. Or we could point the cookbook code at an existing endpoint, including fake ones like JSON Placeholder.But Github gives us an option to stick our own custom JSON data file in a public place.  We point the Cookbook code at the file itself using a “raw” URL link (as opposed to the fancy Github webpage with all of its chrome). And, Github is nice enough to set the CORS headers so we don’t run into cross-origin issues loading data from a different server than the Cookbook host.So download the tweets.json file and modify it to match your needs. Now login to Github and click the Gist link at the top of the page, or instead navigate straight to gist.github.com. Click New gist, name the gist and paste your JSON into the editor, and then click Create public gist.After the gist is saved, you’ll see a Raw button you can click to get a URL like this one:https://gist.githubusercontent.com/pthaden/ab957da62672b4a305da5b653615830c/raw/d2004aa6793e240cc6565786a71c4fbe6a844c55/tweets.jsonWe’ll replace the URL in the $.getJSON() call inside the Cookbook recipe with this gist URL. But it doesn’t work!If you’ve jumped ahead and already pressed Apply Changes after pasting in your URL to the ojCollection List View example, you may notice that nothing updated in the UI. We chose this recipe on purpose, because it leverages the MockPagingRESTServer.This is a chunk of JavaScript that some of the Cookbook entries use to simulate a proper REST endpoint. It fools the recipe’s ojCollection into thinking there’s a real server out there that can get more data if needed at a mock URL such as ` /context-root/ojet/Tweets?limit=15&amp;offset=0&amp;totalResults=true`. The problem is that the MockServers are cached in memory when you click Apply Changes in the Cookbook. So the browser does indeed go out to getJSON() your new data from Github, but the ojCollection that is backing the HTML List View hits the same MockServer URL as before and it uses the cached data.I haven’t figured a way to flush out the MockServer’s data, but an approach that did work is to rename the URL it builds internally by editing the object passed to the new MockPagingRESTServer() constructor. In our List View recipe, we’ll change the “Tweets” entries to something like “myTweets” before clicking Apply Changes. Here’s the changes I made to the JS tab of the recipe:require([&#39;ojs/ojcore&#39;, &#39;knockout&#39;, &#39;jquery&#39;, &#39;ojs/ojknockout&#39;, &#39;promise&#39;, &#39;ojs/ojlistview&#39;, &#39;ojs/ojcollectiontabledatasource&#39;, &#39;ojs/ojmodel&#39;, &#39;mockjax&#39;, &#39;mockpagingrest&#39;],function(oj, ko, $){       $(document).ready(    function()     {      $.getJSON(&quot;https://gist.githubusercontent.com/pthaden/ab957da62672b4a305da5b653615830c/raw/d2004aa6793e240cc6565786a71c4fbe6a844c55/tweets.json&quot;,        function (data)         {          // responseTime is only added so that the activity indicator is more noticeable          var server = new MockPagingRESTServer({&quot;myTweets&quot;: data}, {collProp:&quot;myTweets&quot;, id:&quot;source&quot;, responseTime:1000});          var model = oj.Model.extend({                idAttribute: &#39;source&#39;          });          var collection = new oj.Collection(null, {                url: server.getURL(),                fetchSize: 15,                model: model          });          ko.applyBindings({              dataSource: new oj.CollectionTableDataSource(collection)              }, document.getElementById(&#39;listview&#39;));        });            }  );});And it works now, with custom data from my gist!",
      "content_html": "<p>The new layout and format for the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html\">Cookbook for Oracle JET 2.1.0</a> is <em>gorgeous</em>. As before, it’s loaded with lots of working sample code, which you can change in-browser and see the results immediately.</p><p>But what if you’re working with a data collection and you want to test the cookbook recipe with some custom data? You’re only able to edit the HTML view and JS viewModel of a cookbook entry, not any of the supporting files.</p><p>This was a fun exercise to see if we could host sample data files on Github. Plus I learned something about the way JET’s Cookbook uses tools like <code>MockPagingRESTServer()</code> and how to overcome caching issues. </p><p>If you look at the JS tab of a cookbook sample that retrieves data, you’ll see that it’s just fetching a URL with <code>$getJSON()</code>. For example, in the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html?component=listView&amp;demo=collectionListView\">List View using oj.Collection sample</a>, it’s a relative URL to a tweets.json file on the Cookbook file system that you can path out to <a href=\"http://www.oracle.com/webfolder/technetwork/jet/cookbook/dataCollections/listView/collectionListView/tweets.json\">retrieve the raw data with this link</a>.</p><div class=\"full zoomable\"><img src=\"/images/20160824/listViewgetJSON.png\" /></div><p>So we can change the path of the <code>$getJSON()</code> call in the Cookbook to retrieve <code>tweets.json</code> from a different location. And we have the format and content of the original JSON file which we could upload to another server after modifying it. But where can we host our modified JSON file?</p><h2 id=\"how-about-as-a-github-gist\">How about as a GitHub Gist?</h2><p>We can create a public Gist file, upload our JSON there and then point to the gist’s raw content from the Cookbook’s JS tab. Really, our modified JSON could be hosted anywhere we can stick a file that our browser can find, whether on the internet, our intranet or even on our localhost. Or we could point the cookbook code at an existing endpoint, including fake ones like <a href=\"http://jsonplaceholder.typicode.com/\">JSON Placeholder</a>.</p><p>But Github gives us an option to stick our own custom JSON data file in a public place.  We point the Cookbook code at the file itself using a “raw” URL link (as opposed to the fancy Github webpage with all of its chrome). And, Github is nice enough to set the CORS headers so we don’t run into cross-origin issues loading data from a different server than the Cookbook host.</p><p>So download the tweets.json file and modify it to match your needs. Now login to Github and click the Gist link at the top of the page, or instead navigate straight to <a href=\"https://gist.github.com\">gist.github.com</a>. Click <code>New gist</code>, name the gist and paste your JSON into the editor, and then click <code>Create public gist</code>.</p><p>After the gist is saved, you’ll see a <code>Raw</code> button you can click to get a URL like this one:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">https://gist.githubusercontent.com/pthaden/ab957da62672b4a305da5b653615830c/raw/d2004aa6793e240cc6565786a71c4fbe6a844c55/tweets.json</code></pre></div><p>We’ll replace the URL in the <code>$.getJSON()</code> call inside the Cookbook recipe with this gist URL. </p><h2 id=\"but-it-doesnt-work\">But it doesn’t work!</h2><p>If you’ve jumped ahead and already pressed <code>Apply Changes</code> after pasting in your URL to the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html?component=listView&amp;demo=collectionListView\">ojCollection List View</a> example, you may notice that nothing updated in the UI. We chose this recipe on purpose, because it leverages the <code>MockPagingRESTServer</code>.</p><p>This is a chunk of JavaScript that some of the Cookbook entries use to simulate a proper REST endpoint. It fools the recipe’s ojCollection into thinking there’s a real server out there that can get more data if needed at a mock URL such as ` /context-root/ojet/Tweets?limit=15&amp;offset=0&amp;totalResults=true`. </p><p>The problem is that the MockServers are cached in memory when you click <code>Apply Changes</code> in the Cookbook. So the browser does indeed go out to getJSON() your new data from Github, but the ojCollection that is backing the HTML List View hits the same MockServer URL as before and it uses the cached data.</p><p>I haven’t figured a way to flush out the MockServer’s data, but an approach that did work is to rename the URL it builds internally by editing the object passed to the <code>new MockPagingRESTServer()</code> constructor. In our List View recipe, we’ll change the “Tweets” entries to something like “myTweets” before clicking Apply Changes. Here’s the changes I made to the JS tab of the recipe:</p><div class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"nx\">require</span><span class=\"p\">([</span><span class=\"s1\">&#39;ojs/ojcore&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;knockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;jquery&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojknockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;promise&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojlistview&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojcollectiontabledatasource&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojmodel&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mockjax&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mockpagingrest&#39;</span><span class=\"p\">],</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">oj</span><span class=\"p\">,</span> <span class=\"nx\">ko</span><span class=\"p\">,</span> <span class=\"nx\">$</span><span class=\"p\">)</span><span class=\"p\">{</span>       <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">ready</span><span class=\"p\">(</span>    <span class=\"kd\">function</span><span class=\"p\">()</span>     <span class=\"p\">{</span>      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">getJSON</span><span class=\"p\">(</span><span class=\"s2\">&quot;https://gist.githubusercontent.com/pthaden/ab957da62672b4a305da5b653615830c/raw/d2004aa6793e240cc6565786a71c4fbe6a844c55/tweets.json&quot;</span><span class=\"p\">,</span>        <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span>         <span class=\"p\">{</span>          <span class=\"c1\">// responseTime is only added so that the activity indicator is more noticeable</span>          <span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MockPagingRESTServer</span><span class=\"p\">({</span><span class=\"s2\">&quot;myTweets&quot;</span><span class=\"o\">:</span> <span class=\"nx\">data</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"nx\">collProp</span><span class=\"o\">:</span><span class=\"s2\">&quot;myTweets&quot;</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"o\">:</span><span class=\"s2\">&quot;source&quot;</span><span class=\"p\">,</span> <span class=\"nx\">responseTime</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"p\">});</span>          <span class=\"kd\">var</span> <span class=\"nx\">model</span> <span class=\"o\">=</span> <span class=\"nx\">oj</span><span class=\"p\">.</span><span class=\"nx\">Model</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">({</span>                <span class=\"nx\">idAttribute</span><span class=\"o\">:</span> <span class=\"s1\">&#39;source&#39;</span>          <span class=\"p\">});</span>          <span class=\"kd\">var</span> <span class=\"nx\">collection</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">oj</span><span class=\"p\">.</span><span class=\"nx\">Collection</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"p\">{</span>                <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">getURL</span><span class=\"p\">(),</span>                <span class=\"nx\">fetchSize</span><span class=\"o\">:</span> <span class=\"mi\">15</span><span class=\"p\">,</span>                <span class=\"nx\">model</span><span class=\"o\">:</span> <span class=\"nx\">model</span>          <span class=\"p\">});</span>          <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">applyBindings</span><span class=\"p\">({</span>              <span class=\"nx\">dataSource</span><span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"nx\">oj</span><span class=\"p\">.</span><span class=\"nx\">CollectionTableDataSource</span><span class=\"p\">(</span><span class=\"nx\">collection</span><span class=\"p\">)</span>              <span class=\"p\">},</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;listview&#39;</span><span class=\"p\">));</span>        <span class=\"p\">});</span>            <span class=\"p\">}</span>  <span class=\"p\">);</span><span class=\"p\">});</span></code></pre></div><p>And it works now, with custom data from my gist!</p><div class=\"full zoomable\"><img src=\"/images/20160824/workingrecipe.png\" /></div>"
    },
  
    {
      "title": "Nav Drawer is the New QuickStart",
      "date_published": "2016-08-22T00:00:00+00:00",
      "date_modified": "2016-08-22T00:00:00+00:00",
      "id": "/2016/08/22/navdrawer-is-the-new-quickstart/",
      "url": "http://www.likeahouseafire.com/2016/08/22/navdrawer-is-the-new-quickstart/",
      
      
      
      "tags": ["Oracle JET","Yeoman","Grunt","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Dissecting the new Yeoman templates in OracleJET 2.1.0 ",
      "content_text": "With the release of Oracle JET 2.1.0, there are new “starters”–templates that make for quick setup on a new JET project and show some best practices for code structure. You use the new templates via the same Yeoman scaffolding process for a starting a new project.yo oraclejet jet210navdrawer --template=navdrawer[Edit:]  If the navdrawer option doesn’t work for you, you may need to update your Yeoman generators to get the latest generator-oraclejet. Either do the update through Yeoman’s menu system by executing yo at the command line, or use this command:npm update generator-oraclejet -g[/end Edit]In the past there were only two templates: blank for a bare-bones minimal JET scaffolded project with no router, navigation, or sample content views/viewmodels, and basic for a QuickStart project. In JET v2.1.0, blank and basic are still there but now produce different assets–both rather basic–and they are joined by two newcomers: navbar and navdrawer. Descriptions and links to demos are under the ‘Starters’ section of the JET examples landing page.The blank template is now truly blank: it produces a JET project with no content at all and leaves it to you to implement routing and content components, but it does have the Alta styles, framework references, and Grunt tasks in place. The basic template is no longer QuickStart and is pretty blank itself, although it does at least have a header and footer in the index.html.So where did QuickStart go? It’s been replaced by two new templates: navbar and navdrawer. Nav Bar is the newest and transforms the navigation menu into a bar of icons when the smaller responsive breakpoints kick in.  Nav Drawer will be more familiar to QuickStarters, as it uses the normally-hidden sidebar drawer to shrink down the menu at phone and tablet breakpoints.These two templates are otherwise identical and scaffold out a router and a few content pages. The three-column main content area of QuickStart is now a single full-width flexbox that gets its content from where the router tells it to. There are a few other changes under the hood. Application-wide configuration settings, such as for navigation and the router, have been moved into an appController.js module that gets pulled in by main.js. This is more modular and provides a pattern for your own global settings that could then be pulled into viewModels in your app as needed.The individual views and viewModels such as for the Dashboard and Incidents tabs (no more Home tab to delete) don’t do much, but it’s interesting that each of the sample viewModels draw attention to the ojModule’s lifecycle handlers by implementing stub methods such as handleActivated and handleAttached. These are empty methods on a newly-instantiated ojModule so having them blank here doesn’t do anything different, but seeing them in your face draws attention to the fact that you can hook into them whenever you use an ojModule (which the router does to swap in your main content).There’s a new themes folder under the site root that gets leveraged by the grunt serve tasks. Themes will let you define sets of styles that can be swapped in and out at build time. Look for more to come around the Theme Style Lab.Another change is to the /scripts/grunt folder. This has been massively simplified compared to earlier versions. The two tasks are still grunt serve and grunt build, but the Oracle JET-specific tasks are now imported from a grunt-oraclejet NPM module.There are probably more cool things in these updated templates, but these stood out after a quick review.  I really liked using the QuickStart as a seed for my JET projects, and am looking forward to upgrading our team’s seed repo with the 2.1.0 changes in the Nav Drawer template. ",
      "content_html": "<p>With the release of Oracle JET 2.1.0, there are new “starters”–templates that make for quick setup on a new JET project and show some best practices for code structure. You use the new templates via the same <a href=\"http://docs.oracle.com/middleware/jet202/jet/developer/GUID-ACB7BD4E-BAAC-4A9E-B52A-6B2933CD222C.htm#GUID-F9B1A1E1-2814-49A0-A59A-0ADAAEFC5E93\">Yeoman scaffolding process</a> for a starting a new project.</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">yo oraclejet jet210navdrawer --template<span class=\"o\">=</span>navdrawer</code></pre></div><p>[Edit:]  If the <code>navdrawer</code> option doesn’t work for you, you may need to update your Yeoman generators to get the latest <code>generator-oraclejet</code>. Either do the update through Yeoman’s menu system by executing <code>yo</code> at the command line, or use this command:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">npm update generator-oraclejet -g</code></pre></div><p>[/end Edit]</p><p>In the past there were only two templates: <code>blank</code> for a bare-bones minimal JET scaffolded project with no router, navigation, or sample content views/viewmodels, and <code>basic</code> for a QuickStart project. In JET v2.1.0, <code>blank</code> and <code>basic</code> are still there but now produce different assets–both rather basic–and they are joined by two newcomers: <code>navbar</code> and <code>navdrawer</code>. Descriptions and links to demos are under the ‘Starters’ section of the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/globalExamples.html\">JET examples landing page</a>.</p><p>The <code>blank</code> template is now truly blank: it produces a JET project with no content at all and leaves it to you to implement routing and content components, but it does have the Alta styles, framework references, and Grunt tasks in place. The <code>basic</code> template is no longer QuickStart and is pretty blank itself, although it does at least have a header and footer in the index.html.</p><p>So where did QuickStart go? It’s been replaced by two new templates: <code>navbar</code> and <code>navdrawer</code>. <a href=\"http://www.oracle.com/webfolder/technetwork/jet/globalExamples-Starter-NavBar.html\">Nav Bar</a> is the newest and transforms the navigation menu into a bar of icons when the smaller responsive breakpoints kick in.  <a href=\"http://www.oracle.com/webfolder/technetwork/jet/globalExamples-Starter-Drawer.html\">Nav Drawer</a> will be more familiar to QuickStarters, as it uses the normally-hidden sidebar drawer to shrink down the menu at phone and tablet breakpoints.</p><p>These two templates are otherwise identical and scaffold out a router and a few content pages. The three-column main content area of QuickStart is now a single full-width flexbox that gets its content from where the router tells it to. </p><p>There are a few other changes under the hood. Application-wide configuration settings, such as for navigation and the router, have been moved into an <code>appController.js</code> module that gets pulled in by <code>main.js</code>. This is more modular and provides a pattern for your own global settings that could then be pulled into viewModels in your app as needed.</p><p>The individual views and viewModels such as for the Dashboard and Incidents tabs (no more Home tab to delete) don’t do much, but it’s interesting that each of the sample viewModels draw attention to the <a href=\"https://docs.oracle.com/middleware/jet202/jet/developer/GUID-ABB82BD1-9B65-44D2-AE43-81A0A3A44453.htm#JETDG-GUID-ABB82BD1-9B65-44D2-AE43-81A0A3A44453\">ojModule’s lifecycle handlers</a> by implementing stub methods such as <code>handleActivated</code> and <code>handleAttached</code>. These are empty methods on a newly-instantiated ojModule so having them blank here doesn’t do anything different, but seeing them in your face draws attention to the fact that you can hook into them whenever you use an ojModule (which the router does to swap in your main content).</p><p>There’s a new <code>themes</code> folder under the site root that gets leveraged by the <code>grunt serve</code> tasks. <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html?component=theming&amp;demo=themename\">Themes will let you define sets of styles</a> that can be swapped in and out at build time. Look for more to come around the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/globalExamples-ThemeViewer.html\">Theme Style Lab</a>.</p><p>Another change is to the <code>/scripts/grunt</code> folder. This has been massively simplified <a href=\"http://likeahouseafire.com/2016/04/18/decoding-jets-grunt-scripts/\">compared to earlier versions</a>. The two tasks are still <code>grunt serve</code> and <code>grunt build</code>, but the Oracle JET-specific tasks are <a href=\"https://www.npmjs.com/package/grunt-oraclejet\">now imported from a grunt-oraclejet NPM module</a>.</p><p>There are probably more cool things in these updated templates, but these stood out after a quick review.  I really liked using the QuickStart as a seed for my JET projects, and am looking forward to upgrading our team’s seed repo with the 2.1.0 changes in the Nav Drawer template. </p>"
    },
  
    {
      "title": "Parsing a Sales Cloud JWT after passing it into APEX",
      "date_published": "2016-06-09T00:00:00+00:00",
      "date_modified": "2016-06-09T00:00:00+00:00",
      "id": "/2016/06/09/parsing-jwt-in-apex/",
      "url": "http://www.likeahouseafire.com/2016/06/09/parsing-jwt-in-apex/",
      
      
      
      "tags": ["APEX","PLSQL","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Decoding the Java Web Token from Sales Cloud so that we can use it in APEX application items",
      "content_text": "The JSON Web Token (JWT) Sales Cloud can generate is useful for mashups because it can be used to call back into OSC web services as a bearer token in the Authorization header. We’ve used it before in Application Express to pull and push data in and out of RESTful APIs.But the JWT is more than a security tool. Buried inside the encoded token are JSON objects with details about the claims it represents. One of the data elements that Sales Cloud sends over is the logged-in user name.On a recent project we wanted this user name in the APEX app we were writing to extend Sales Cloud. We thought it’d be nice to use in the UI wherever the &amp;APP_USER. application item would normally show. We also needed it to stripe the rows of our APEX database with a user’s details, so that the locally persisted data history wouldn’t mix in with other users’ history.Getting to know the JWTThe first thing is to use App Composer to create a link to our APEX app that includes a JWT. Others have explained this so much better, but here’s some Groovy code that creates a URL with a JWT as an APEX page parameter.// generate a JWT for the active sessiondef jwt = new oracle.apps.fnd.applcore.common.SecuredTokenBean().getTrustToken()// concatenate the JWT as a parameter on an APEX URLreturn &#39;https://myDBSchemaCloudInstance.db.us2.oraclecloudapps.com/apex/f?p=40200039:1:::::P1_OPPTY,P1_JWT:&#39; + OptyId + &#39;,&#39; + jwtThe URL that gets generated has a huge base64-encoded token on it. Actually, it’s three separate base64 strings, separated by periods:eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsIng1dCI6IlhnQnFTeHlCOFBRMHBKemhpdFRST2pzQXc1WSJ9.eyJleHAiOjE0NjU1NDU0NTYsImlzcyI6Ind3dy5vcmFjbGUuY29tIiwicHJuIjoiSk9ITi5EVU5CQVIiLCJpYXQiOjE0NjU1MzEwNTZ9.amFgDLAmor8owD6aE00k5CcYFpkgYDbrogvGRBuuPdEQ_MYN_yc2ULP4n4jjVNcNiUNufeGcbjO9haaw8UHUbdq2oF64XSEalgTXO_daPGDeiI0SSpwExSNN9Y6Ycmi8GmV8M1o4BCHHvspL9GObUhvZRY0H5vnBKnAE7dXkJaP5i0M67t1ea4R9yBKaIfRnXvkW98RqddJUA5tlgGurLQW2pkFzQ-jBKS0tpZNqUy1wYfV5D-GmXRnBYEtQPnpxP3buYvTW84JmhYtlZCOU8CdWMckqugpPfsxs3c3b9S4a9NMifnBVYXVODLPkzkQKuZeDjZJn-x57CyciEy9CSQThe first section is the JWT header, the middle is the actual payload, and the last section is the signature that Sales Cloud uses to confirm that our JWT is legit.  You can paste that JWT into a decoder like this one to see the different parts in their pre-encoded state.We normally use the entire JWT as a bearer token in order to access Sales Cloud APIs while our session is still alive. But remember that each section of the JWT is itself simply a base64 string.  For fun, use a base64 decoder to paste only the middle payload section and turn it back into JSON:{  &quot;exp&quot;:1465545456,  &quot;iss&quot;:&quot;www.oracle.com&quot;,  &quot;prn&quot;:&quot;JOHN.DUNBAR&quot;,  &quot;iat&quot;:1465531056}Parsing out the JWT’s infoThat \"prn\" node has the logged-in username (the previously-linked Fusion Dev Relations blog explains what the other nodes in the payload mean). Sure, we could get that username by calling back into Sales Cloud and hitting the UserDetailsService, but why bother? The info we are looking for is right there in the JWT, it’s just locked up in a base64-encoded JSON object.We can use some PL/SQL to decode everything and grab the Sales Cloud username out of the JWT.  Here’s the steps we need to follow:  grab the entire JWT and determine where the two delimiter periods are in the string  use those markers to lift out the middle payload section  base64-decode it into a string of JSON  use the JSON parser to pluck out the prn nodeHere’s that PL/SQL code.  It assumes that the JWT has come over on the URL and that it’s been stuffed into a hidden page item named P1_JWT.  There’s some fallback code that returns the APEX APP_USER item if there’s no JWT to parse.declarel_jwt varchar2(4000);l_start number;l_end number;l_middle varchar2(4000);l_json varchar2(4000);l_output varchar2(4000);l_jwt_user varchar2(4000);l_return varchar2(4000);beginif :P1_JWT IS NULL THEN return :APP_USER;ELSE--JWT is made of of three parts, separated by periods .--we want to glean the username out of the middle one-- see https://blogs.oracle.com/fadevrel/entry/using_jwt_to_secure_yourl_jwt := :P1_JWT;--find the location of the two period markersl_start := INSTR( l_jwt, &#39;.&#39; );l_end := INSTR( l_jwt, &#39;.&#39;, l_start+1);--take the middle substring l_middle := SUBSTR( l_jwt, l_start+1 , (l_end - l_start)-1);--need to base64 decode the middle string to get a json stringl_json := utl_raw.cast_to_varchar2(UTL_ENCODE.BASE64_DECODE( utl_raw.cast_to_raw( l_middle)));--use the APEX parser and then find the username at the &#39;prn&#39; nodeapex_json.parse(l_json);l_jwt_user := initcap(apex_json.get_varchar2(p_path =&gt; &#39;prn&#39;));return l_jwt_user;END IF;endSince this was a one-shot decode, I first created an Application Item Shared Component named JWT_USER and then put this code directly in a new computation on my Page 1’s Pre-Rendering » Before Header » Computations.  The computation’s SQL populated the application item with its return value, which could then be used elsewhere using the &amp;JWT_USER. substitution string syntax. A better approach for the code above might be to create a function and make this SQL more reusable, but it gets the job done.In this screenshot I’ve unhidden the two page items that “catch” the passed-in URL parameters and also created another display-only item to show the computed JWT_User field can be used wherever needed.",
      "content_html": "<p>The <a href=\"https://cloud.oracle.com/developer/solutions?scenarioid=1383852819711&amp;solutionid=1385148959574\">JSON Web Token (JWT) Sales Cloud can generate</a> is useful for mashups because it can be used to call back into OSC web services as a bearer token in the Authorization header. We’ve <a href=\"http://likeahouseafire.com/2016/01/21/creating-osc-calendar-activity-rest/#headers-for-your-rest-calls\">used it before in Application Express</a> to pull and push data in and out of RESTful APIs.</p><p>But the JWT is more than a security tool. Buried inside the encoded token are JSON objects with details about the claims it represents. One of the data elements that Sales Cloud sends over is the logged-in user name.</p><p>On a recent project we wanted this user name in the APEX app we were writing to extend Sales Cloud. We thought it’d be nice to use in the UI wherever the <code>&amp;APP_USER.</code> application item would normally show. We also needed it to stripe the rows of our APEX database with a user’s details, so that the locally persisted data history wouldn’t mix in with other users’ history.</p><h2 id=\"getting-to-know-the-jwt\">Getting to know the JWT</h2><p>The first thing is to use App Composer to create a link to our APEX app that includes a JWT. <a href=\"https://blogs.oracle.com/angelo/entry/jwt_token_security_with_fusion\">Others</a> <a href=\"https://blogs.oracle.com/fadevrel/entry/using_jwt_to_secure_your\">have</a> <a href=\"https://blogs.oracle.com/fadevrel/entry/using_jwt_tokens_with_rest\">explained</a> <a href=\"http://www.oracle.com/technetwork/indexes/samplecode/cloud-samples-2203466.html\">this</a> so much better, but here’s some Groovy code that creates a URL with a JWT as an APEX page parameter.</p><div class=\"highlight\"><pre><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"c1\">// generate a JWT for the active session</span><span class=\"kt\">def</span> <span class=\"n\">jwt</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">oracle</span><span class=\"o\">.</span><span class=\"na\">apps</span><span class=\"o\">.</span><span class=\"na\">fnd</span><span class=\"o\">.</span><span class=\"na\">applcore</span><span class=\"o\">.</span><span class=\"na\">common</span><span class=\"o\">.</span><span class=\"na\">SecuredTokenBean</span><span class=\"o\">().</span><span class=\"na\">getTrustToken</span><span class=\"o\">()</span><span class=\"c1\">// concatenate the JWT as a parameter on an APEX URL</span><span class=\"k\">return</span> <span class=\"s1\">&#39;https://myDBSchemaCloudInstance.db.us2.oraclecloudapps.com/apex/f?p=40200039:1:::::P1_OPPTY,P1_JWT:&#39;</span> <span class=\"o\">+</span> <span class=\"n\">OptyId</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;,&#39;</span> <span class=\"o\">+</span> <span class=\"n\">jwt</span></code></pre></div><p>The URL that gets generated has a huge base64-encoded token on it. Actually, it’s three separate base64 strings, separated by periods:</p><div class=\"highlight\"><pre><code><span style=\"color: #fb015b\">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsIng1dCI6IlhnQnFTeHlCOFBRMHBKemhpdFRST2pzQXc1WSJ9</span>.<span style=\"color: #d63aff\">eyJleHAiOjE0NjU1NDU0NTYsImlzcyI6Ind3dy5vcmFjbGUuY29tIiwicHJuIjoiSk9ITi5EVU5CQVIiLCJpYXQiOjE0NjU1MzEwNTZ9</span>.<span style=\"color: #00b9f1\">amFgDLAmor8owD6aE00k5CcYFpkgYDbrogvGRBuuPdEQ_MYN_yc2ULP4n4jjVNcNiUNufeGcbjO9haaw8UHUbdq2oF64XSEalgTXO_daPGDeiI0SSpwExSNN9Y6Ycmi8GmV8M1o4BCHHvspL9GObUhvZRY0H5vnBKnAE7dXkJaP5i0M67t1ea4R9yBKaIfRnXvkW98RqddJUA5tlgGurLQW2pkFzQ-jBKS0tpZNqUy1wYfV5D-GmXRnBYEtQPnpxP3buYvTW84JmhYtlZCOU8CdWMckqugpPfsxs3c3b9S4a9NMifnBVYXVODLPkzkQKuZeDjZJn-x57CyciEy9CSQ</span></code></pre></div><p>The first section is the JWT header, the middle is the actual payload, and the last section is the signature that Sales Cloud uses to confirm that our JWT is legit.  You can paste that JWT into a <a href=\"https://jwt.io/\">decoder like this one</a> to see the different parts in their pre-encoded state.</p><p>We normally use the entire JWT as a bearer token in order to access Sales Cloud APIs while our session is still alive. But remember that each section of the JWT is itself simply a base64 string.  For fun, <a href=\"https://www.base64decode.org/\">use a base64 decoder</a> to paste only the middle payload section and turn it back into JSON:</p><div class=\"highlight\"><pre><code class=\"language-json\" data-lang=\"json\"><span class=\"p\">{</span>  <span class=\"nt\">&quot;exp&quot;</span><span class=\"p\">:</span><span class=\"mi\">1465545456</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;iss&quot;</span><span class=\"p\">:</span><span class=\"s2\">&quot;www.oracle.com&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;prn&quot;</span><span class=\"p\">:</span><span class=\"s2\">&quot;JOHN.DUNBAR&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;iat&quot;</span><span class=\"p\">:</span><span class=\"mi\">1465531056</span><span class=\"p\">}</span></code></pre></div><h2 id=\"parsing-out-the-jwts-info\">Parsing out the JWT’s info</h2><p>That <code>\"prn\"</code> node has the logged-in username (the <a href=\"https://blogs.oracle.com/fadevrel/entry/using_jwt_to_secure_your\">previously-linked Fusion Dev Relations blog</a> explains what the other nodes in the payload mean). Sure, we could get that username by calling back into Sales Cloud and hitting the <a href=\"http://docs.oracle.com/cd/E60665_01/salescs_gs/CSAPP/usertoken009.htm#CSAPP7147\"><code>UserDetailsService</code></a>, but why bother? The info we are looking for is <em>right there</em> in the JWT, it’s just locked up in a base64-encoded JSON object.</p><p>We can use some PL/SQL to decode everything and grab the Sales Cloud username out of the JWT.  Here’s the steps we need to follow:</p><ol>  <li>grab the entire JWT and determine where the two delimiter periods are in the string</li>  <li>use those markers to lift out the middle payload section</li>  <li>base64-decode it into a string of JSON</li>  <li>use the JSON parser to pluck out the <code>prn</code> node</li></ol><p>Here’s that PL/SQL code.  It assumes that the JWT has come over on the URL and that it’s been stuffed into a hidden page item named <code>P1_JWT</code>.  There’s some fallback code that returns the APEX <code>APP_USER</code> item if there’s no JWT to parse.</p><div class=\"highlight\"><pre><code class=\"language-sql\" data-lang=\"sql\"><span class=\"k\">declare</span><span class=\"n\">l_jwt</span> <span class=\"n\">varchar2</span><span class=\"p\">(</span><span class=\"mi\">4000</span><span class=\"p\">);</span><span class=\"n\">l_start</span> <span class=\"nb\">number</span><span class=\"p\">;</span><span class=\"n\">l_end</span> <span class=\"nb\">number</span><span class=\"p\">;</span><span class=\"n\">l_middle</span> <span class=\"n\">varchar2</span><span class=\"p\">(</span><span class=\"mi\">4000</span><span class=\"p\">);</span><span class=\"n\">l_json</span> <span class=\"n\">varchar2</span><span class=\"p\">(</span><span class=\"mi\">4000</span><span class=\"p\">);</span><span class=\"n\">l_output</span> <span class=\"n\">varchar2</span><span class=\"p\">(</span><span class=\"mi\">4000</span><span class=\"p\">);</span><span class=\"n\">l_jwt_user</span> <span class=\"n\">varchar2</span><span class=\"p\">(</span><span class=\"mi\">4000</span><span class=\"p\">);</span><span class=\"n\">l_return</span> <span class=\"n\">varchar2</span><span class=\"p\">(</span><span class=\"mi\">4000</span><span class=\"p\">);</span><span class=\"k\">begin</span><span class=\"n\">if</span> <span class=\"p\">:</span><span class=\"n\">P1_JWT</span> <span class=\"k\">IS</span> <span class=\"k\">NULL</span> <span class=\"k\">THEN</span> <span class=\"k\">return</span> <span class=\"p\">:</span><span class=\"n\">APP_USER</span><span class=\"p\">;</span><span class=\"k\">ELSE</span><span class=\"c1\">--JWT is made of of three parts, separated by periods .</span><span class=\"c1\">--we want to glean the username out of the middle one</span><span class=\"c1\">-- see https://blogs.oracle.com/fadevrel/entry/using_jwt_to_secure_your</span><span class=\"n\">l_jwt</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"p\">:</span><span class=\"n\">P1_JWT</span><span class=\"p\">;</span><span class=\"c1\">--find the location of the two period markers</span><span class=\"n\">l_start</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">INSTR</span><span class=\"p\">(</span> <span class=\"n\">l_jwt</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.&#39;</span> <span class=\"p\">);</span><span class=\"n\">l_end</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">INSTR</span><span class=\"p\">(</span> <span class=\"n\">l_jwt</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"p\">,</span> <span class=\"n\">l_start</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"c1\">--take the middle substring </span><span class=\"n\">l_middle</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">SUBSTR</span><span class=\"p\">(</span> <span class=\"n\">l_jwt</span><span class=\"p\">,</span> <span class=\"n\">l_start</span><span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">l_end</span> <span class=\"o\">-</span> <span class=\"n\">l_start</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"c1\">--need to base64 decode the middle string to get a json string</span><span class=\"n\">l_json</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">utl_raw</span><span class=\"p\">.</span><span class=\"n\">cast_to_varchar2</span><span class=\"p\">(</span><span class=\"n\">UTL_ENCODE</span><span class=\"p\">.</span><span class=\"n\">BASE64_DECODE</span><span class=\"p\">(</span> <span class=\"n\">utl_raw</span><span class=\"p\">.</span><span class=\"n\">cast_to_raw</span><span class=\"p\">(</span> <span class=\"n\">l_middle</span><span class=\"p\">)));</span><span class=\"c1\">--use the APEX parser and then find the username at the &#39;prn&#39; node</span><span class=\"n\">apex_json</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">l_json</span><span class=\"p\">);</span><span class=\"n\">l_jwt_user</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">initcap</span><span class=\"p\">(</span><span class=\"n\">apex_json</span><span class=\"p\">.</span><span class=\"n\">get_varchar2</span><span class=\"p\">(</span><span class=\"n\">p_path</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">&#39;prn&#39;</span><span class=\"p\">));</span><span class=\"k\">return</span> <span class=\"n\">l_jwt_user</span><span class=\"p\">;</span><span class=\"k\">END</span> <span class=\"n\">IF</span><span class=\"p\">;</span><span class=\"k\">end</span></code></pre></div><p>Since this was a one-shot decode, I first created an Application Item Shared Component named <code>JWT_USER</code> and then put this code directly in a new computation on my Page 1’s Pre-Rendering » Before Header » Computations.  The computation’s SQL populated the application item with its return value, which could then be used elsewhere using the <code>&amp;JWT_USER.</code> substitution string syntax. A better approach for the code above might be to create a function and make this SQL more reusable, but it gets the job done.</p><p>In this screenshot I’ve unhidden the two page items that “catch” the passed-in URL parameters and also created another display-only item to show the computed JWT_User field can be used wherever needed.</p><div class=\"full zoomable\"><img src=\"/images/20160609/jwtfields.png\" /></div>"
    },
  
    {
      "title": "Creating a Popup Message Box for Oracle JET Forms",
      "date_published": "2016-05-05T00:00:00+00:00",
      "date_modified": "2016-05-05T00:00:00+00:00",
      "id": "/2016/05/05/popup-message-box-for-jet/",
      "url": "http://www.likeahouseafire.com/2016/05/05/popup-message-box-for-jet/",
      
      
      
      "tags": ["Oracle JET","JavaScript","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Popup confirmation messages using off-canvas overlays",
      "content_text": "Sometimes the end-user just wants to be reassured that you heard them. Recently I needed a pop-up confirmation message for an Oracle JET demo, something some call “toast.”The inner Offcanvas Dismissal cookbook entry provided a good example for what I was looking for, albeit revealing from the side edge instead of the top. The idea is that you wrap the whole page component in a oj-offcanvas-outer-wrapper and then wrap the pop-up toast message and content you want to overlay in an oj-offcanvas-inner-wrapper. Finally the “offcanvas” content is wrapped in a div with a unique ID and one of four oj-offcanvas-xxxx edges (id=\"innerDrawer\" and oj-offcanvas-top in our example code).  This content is hidden by default, but you can reveal it with a call such as oj.OffcanvasUtils.open(self.innerDrawer) when you’re ready to show the message.How does it know what to show? Because that self.innerDrawer is an object we pass in that points at the CSS selector for our inner drawer (there are other options for OffcanvasUtils() to play with in the JSFiddle below, too)://offcanvas options  this.innerDrawer =    {      &quot;displayMode&quot;: &quot;overlay&quot;,      &quot;selector&quot;: &quot;#innerDrawer&quot;    };The confirmation message in our example pulls data from the observables in the form, but it could instead show data that returned from an API call initiated by the submit button. The normally-hidden fields in the innerDrawer could be bound to any data in your viewModel, since it only reveals when you choose to call oj.OffcanvasUtils.open(). ",
      "content_html": "<p>Sometimes the end-user just wants to be reassured that you heard them. Recently I needed a pop-up confirmation message for an Oracle JET demo, something some call “<a href=\"http://developer.android.com/guide/topics/ui/notifiers/toasts.html\">toast</a>.”</p><div class=\"full\"><a href=\"/images/20160505/toast.gif\"><img src=\"/images/20160505/toast.gif\" /></a></div><p>The inner <a href=\"http://www.oracle.com/webfolder/technetwork/jet/uiComponents-offcanvas-dismissal.html\">Offcanvas Dismissal cookbook entry</a> provided a good example for what I was looking for, albeit revealing from the side edge instead of the top. </p><p>The idea is that you wrap the whole page component in a <code>oj-offcanvas-outer-wrapper</code> and then wrap the pop-up toast message and content you want to overlay in an <code>oj-offcanvas-inner-wrapper</code>. Finally the “offcanvas” content is wrapped in a div with a unique ID and one of four <code>oj-offcanvas-xxxx</code> edges (<code>id=\"innerDrawer\"</code> and <code>oj-offcanvas-top</code> in our example code).  This content is hidden by default, but you can reveal it with a call such as <code>oj.OffcanvasUtils.open(self.innerDrawer)</code> when you’re ready to show the message.</p><p>How does it know what to show? Because that <code>self.innerDrawer</code> is an object we pass in that points at the CSS selector for our inner drawer (there are <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jsdocs/oj.OffcanvasUtils.html#open\">other options for <code>OffcanvasUtils()</code> to play with</a> in the JSFiddle below, too):</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"c1\">//offcanvas options</span>  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">innerDrawer</span> <span class=\"o\">=</span>    <span class=\"p\">{</span>      <span class=\"s2\">&quot;displayMode&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;overlay&quot;</span><span class=\"p\">,</span>      <span class=\"s2\">&quot;selector&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;#innerDrawer&quot;</span>    <span class=\"p\">};</span></code></pre></div><p>The confirmation message in our example pulls data from the observables in the form, but it could instead show data that returned from an API call initiated by the submit button. The normally-hidden fields in the innerDrawer could be bound to any data in your viewModel, since it only reveals when you choose to call <code>oj.OffcanvasUtils.open()</code>. </p><iframe width=\"100%\" height=\"330\" src=\"//jsfiddle.net/pthaden/a5nz7s6f/embedded/result,js,html,css/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>"
    },
  
    {
      "title": "Using Grunt to Build a WAR&nbsp;File",
      "date_published": "2016-04-22T00:00:00+00:00",
      "date_modified": "2016-04-22T00:00:00+00:00",
      "id": "/2016/04/22/using-grunt-to-create-war/",
      "url": "http://www.likeahouseafire.com/2016/04/22/using-grunt-to-create-war/",
      
      
      
      "tags": ["Oracle JET","JavaScript","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Leveraging Oracle JET's Grunt setups to create a WAR file from the release build process output in order to deploy a JET project to WebLogic",
      "content_text": "Now that we’ve boned up on the Grunt tooling that comes with a Yeoman-generated JET project and have even installed a Grunt plugin, let’s take it to the next level and have Grunt actually make something for us.When it comes to JET projects, they’re just files of static assets: HTML, CSS and JavaScript. They can be deployed to any webserver that can deliver the files to a browser. We’ve even served JET up with Node.js using Express.But here at work we also have a lot of Java EE servers sitting around. A app server like WebLogic can take a WAR file and deliver the static content even if there’s no Java classes or JSPs. With a little tweaking, you can create a valid WAR file made up of nothing but static HTML, CSS and JS content.But creating a WAR and copying in the JET files by hand is boring, repetitive work. The kind of work that Grunt is great at!Installing grunt-warWe’ll use the grunt-war plugin to generate the actual WAR file. The step to build the WAR can come at the end of the existing grunt build:release task. Before we can do that, we’ll need to add the proper configs to a file in scripts/grunt/config and format them the way JET’s load-grunt-config setups are expecting.First download and register grunt-war by executing this at the command prompt:npm install grunt-war --save-devJET’s use of jit-grunt means we don’t need to add a loadNpmTasks call for grunt-war to our Gruntfile; it will get loaded automatically when we run a task that needs it. However we do need to set up grunt-war’s config options to load properly.Creating scripts/grunt/config/war.jsThe configuration settings for grunt-war would normally be set in grunt.initConfig() in the Gruntfile. But since JET is using load-grunt-config we instead make configuration settings modular for all of our Grunt plugins, including grunt-war.We need to create a file named scripts/grunt/config/war.js so that load-grunt-config finds the right settings for our grunt-war plugin. Since the plugin is named grunt-war, the config file should be named war.js.The config file uses module.exports = {} to return an object with the settings we want to use for our plugin. I’ve commented up the ones that worked for me, including some important additions that make the generated WAR file WebLogic- and JCS-SX-friendly:war.jsmodule.exports =  {   /*   * Build a WAR (web archive) without Maven or the JVM installed.   */              target: {          options: {            war_dist_folder: &#39;dist&#39;,      /* Folder to generate the WAR into */            war_name: &#39;yoJET&#39;,            /* The name fo the WAR file (.war will be the extension) */            webxml_webapp_version: &#39;2.5&#39;, /* I needed this older version for JCS-SX */              war_extras: [ {filename: &#39;grunt-war-credits.txt&#39;, data: &#39;This line will appear in the file!\\n see http://likeahouseafire.com/2016/04/22/using-grunt-to-create-war/ &#39;},                           {filename: &#39;WEB-INF/weblogic.xml&#39;, data: &#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\\n&lt;weblogic-web-app xmlns=&quot;http://www.bea.com/ns/weblogic/90&quot; xmlns:j2ee=&quot;http://java.sun.com/xml/ns/j2ee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.bea.com/ns/weblogic/90 http://www.bea.com/ns/weblogic/90/weblogic-web-app.xsd&quot;&gt;\\n  &lt;jsp-descriptor&gt;\\n    &lt;keepgenerated&gt;true&lt;/keepgenerated&gt;\\n    &lt;debug&gt;true&lt;/debug&gt;\\n  &lt;/jsp-descriptor&gt;\\n  &lt;context-root&gt;/yojet&lt;/context-root&gt;\\n&lt;/weblogic-web-app&gt;&#39;}],                                          /* the war_extras are extra files to be generated, needed since grunt-war doesn&#39;t create a weblogic.xml */              webxml_welcome: &#39;index.html&#39;, /* to point web.xml to the default page */            webxml_webapp_extras: [ &#39;&lt;login-config /&gt;\\n&#39;, &#39;&lt;session-config&gt;\\n    &lt;session-timeout&gt;\\n    30\\n    &lt;/session-timeout&gt;\\n&lt;/session-config&gt;\\n&#39; ]                                            /* some extra settings for web.xml to work with JCS-SX */          },          files: [            {              expand: true,              cwd: &#39;release&#39;,             /* find the source files for the WAR in the /release folder */              src: [&#39;**&#39;],              dest: &#39;&#39;            }          ]        }         };Note especially the &lt;context-root&gt; settings in the war-extras property and all the other tweaks made to override the defaults and create a WAR file worthy of deploying to JCS-SX.With this config file, we could now kick out to the command prompt to execute grunt war and it would try to build a WAR file out of whatever it found in the release folder.Modifying scripts/grunt/tasks/build.jsBut since the release folder gets a clean, generated copy of our JET project whenever we run grunt build:release, let’s put the WAR-building task in as the last step in the build process.Open the existing scripts/grunt/tasks/build.js and notice the section under if (target === \"release\"):...   if (target === &quot;release&quot;)    {      grunt.task.run(      [        &quot;clean:release&quot;,        &quot;injector:mainReleasePaths&quot;,        &quot;uglify:release&quot;,        &quot;copy:release&quot;        &quot;requirejs&quot;,        &quot;clean:mainTemp&quot;,        &quot;war&quot;      ]);    }  ...I added \"war\" to the array of grunt.task.run() steps as the final task to run when we target grunt build:release.With all this in place you’ll get a deployable WAR file that includes everything from your JET project that was minified and copied into the release folder as part of the build process. ",
      "content_html": "<p>Now that we’ve <a href=\"http://likeahouseafire.com/2016/04/18/decoding-jets-grunt-scripts/\">boned up on the Grunt tooling that comes with a Yeoman-generated JET project</a> and have even <a href=\"http://likeahouseafire.com/2016/04/20/add-grunt-plugin-to-jet/\">installed a Grunt plugin</a>, let’s take it to the next level and have Grunt actually make something for us.</p><p>When it comes to JET projects, they’re just files of static assets: HTML, CSS and JavaScript. They can be deployed to any webserver that can deliver the files to a browser. We’ve even served JET up with Node.js using Express.</p><p>But here at work we also have a lot of Java EE servers sitting around. A app server like WebLogic can take a WAR file and deliver the static content even if there’s no Java classes or JSPs. With a little tweaking, you <a href=\"https://blogs.oracle.com/middleware/entry/publish_static_content_to_weblogic\">can create a valid WAR file made up of nothing but static HTML, CSS and JS content</a>.</p><p>But creating a WAR and copying in the JET files by hand is boring, repetitive work. The kind of work that Grunt is great at!</p><h2 id=\"installing-grunt-war\">Installing grunt-war</h2><p>We’ll use the <a href=\"https://www.npmjs.com/package/grunt-war\">grunt-war plugin</a> to generate the actual WAR file. The step to build the WAR can come at the end of the existing <code>grunt build:release</code> task. Before we can do that, we’ll need to add the proper configs to a file in <code>scripts/grunt/config</code> and format them the way JET’s load-grunt-config setups are expecting.</p><p>First download and register grunt-war by executing this at the command prompt:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">npm install grunt-war --save-dev</code></pre></div><p>JET’s use of <a href=\"https://www.npmjs.com/package/jit-grunt\">jit-grunt</a> means we don’t need to add a <code>loadNpmTasks</code> call for grunt-war to our Gruntfile; it will get loaded automatically when we run a task that needs it. However we do need to set up grunt-war’s config options to load properly.</p><h2 id=\"creating-scriptsgruntconfigwarjs\">Creating scripts/grunt/config/war.js</h2><p>The <a href=\"https://www.npmjs.com/package/grunt-war#the-war-task\">configuration settings for grunt-war</a> would normally be set in <code>grunt.initConfig()</code> in the Gruntfile. But since JET is using <a href=\"http://www.html5rocks.com/en/tutorials/tooling/supercharging-your-gruntfile/\">load-grunt-config we instead make configuration settings modular</a> for all of our Grunt plugins, including grunt-war.</p><p>We need to create a file named <code>scripts/grunt/config/war.js</code> so that load-grunt-config finds the right settings for our grunt-war plugin. Since the plugin is named grunt-<strong>war</strong>, the config file should be named <strong>war</strong>.js.</p><p>The config file uses <code>module.exports = {}</code> to return an object with the settings we want to use for our plugin. I’ve commented up the ones that worked for me, including some important additions that make the generated WAR file WebLogic- and JCS-SX-friendly:</p><h4 id=\"warjs\">war.js</h4><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span>  <span class=\"p\">{</span>   <span class=\"cm\">/*</span><span class=\"cm\">   * Build a WAR (web archive) without Maven or the JVM installed.</span><span class=\"cm\">   */</span>              <span class=\"nx\">target</span><span class=\"o\">:</span> <span class=\"p\">{</span>          <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>            <span class=\"nx\">war_dist_folder</span><span class=\"o\">:</span> <span class=\"s1\">&#39;dist&#39;</span><span class=\"p\">,</span>      <span class=\"cm\">/* Folder to generate the WAR into */</span>            <span class=\"nx\">war_name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;yoJET&#39;</span><span class=\"p\">,</span>            <span class=\"cm\">/* The name fo the WAR file (.war will be the extension) */</span>            <span class=\"nx\">webxml_webapp_version</span><span class=\"o\">:</span> <span class=\"s1\">&#39;2.5&#39;</span><span class=\"p\">,</span> <span class=\"cm\">/* I needed this older version for JCS-SX */</span>              <span class=\"nx\">war_extras</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"p\">{</span><span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;grunt-war-credits.txt&#39;</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"s1\">&#39;This line will appear in the file!\\n see http://likeahouseafire.com/2016/04/22/using-grunt-to-create-war/ &#39;</span><span class=\"p\">},</span>                           <span class=\"p\">{</span><span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;WEB-INF/weblogic.xml&#39;</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\\n&lt;weblogic-web-app xmlns=&quot;http://www.bea.com/ns/weblogic/90&quot; xmlns:j2ee=&quot;http://java.sun.com/xml/ns/j2ee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.bea.com/ns/weblogic/90 http://www.bea.com/ns/weblogic/90/weblogic-web-app.xsd&quot;&gt;\\n  &lt;jsp-descriptor&gt;\\n    &lt;keepgenerated&gt;true&lt;/keepgenerated&gt;\\n    &lt;debug&gt;true&lt;/debug&gt;\\n  &lt;/jsp-descriptor&gt;\\n  &lt;context-root&gt;/yojet&lt;/context-root&gt;\\n&lt;/weblogic-web-app&gt;&#39;</span><span class=\"p\">}],</span>                                          <span class=\"cm\">/* the war_extras are extra files to be generated, needed since grunt-war doesn&#39;t create a weblogic.xml */</span>              <span class=\"nx\">webxml_welcome</span><span class=\"o\">:</span> <span class=\"s1\">&#39;index.html&#39;</span><span class=\"p\">,</span> <span class=\"cm\">/* to point web.xml to the default page */</span>            <span class=\"nx\">webxml_webapp_extras</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;&lt;login-config /&gt;\\n&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&lt;session-config&gt;\\n    &lt;session-timeout&gt;\\n    30\\n    &lt;/session-timeout&gt;\\n&lt;/session-config&gt;\\n&#39;</span> <span class=\"p\">]</span>                                            <span class=\"cm\">/* some extra settings for web.xml to work with JCS-SX */</span>          <span class=\"p\">},</span>          <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"p\">[</span>            <span class=\"p\">{</span>              <span class=\"nx\">expand</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>              <span class=\"nx\">cwd</span><span class=\"o\">:</span> <span class=\"s1\">&#39;release&#39;</span><span class=\"p\">,</span>             <span class=\"cm\">/* find the source files for the WAR in the /release folder */</span>              <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;**&#39;</span><span class=\"p\">],</span>              <span class=\"nx\">dest</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span>            <span class=\"p\">}</span>          <span class=\"p\">]</span>        <span class=\"p\">}</span>         <span class=\"p\">};</span></code></pre></div><p>Note especially the <code>&lt;context-root&gt;</code> settings in the <code>war-extras</code> property and all the other tweaks made to override the defaults and create a WAR file worthy of deploying to JCS-SX.</p><p>With this config file, we could now kick out to the command prompt to execute <code>grunt war</code> and it would try to build a WAR file out of whatever it found in the <code>release</code> folder.</p><h2 id=\"modifying-scriptsgrunttasksbuildjs\">Modifying scripts/grunt/tasks/build.js</h2><p>But since the <code>release</code> folder gets a clean, generated copy of our JET project whenever we run <code>grunt build:release</code>, let’s put the WAR-building task in as the last step in the build process.</p><p>Open the existing <code>scripts/grunt/tasks/build.js</code> and notice the section under <code>if (target === \"release\")</code>:</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"p\">...</span>   <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">target</span> <span class=\"o\">===</span> <span class=\"s2\">&quot;release&quot;</span><span class=\"p\">)</span>    <span class=\"p\">{</span>      <span class=\"nx\">grunt</span><span class=\"p\">.</span><span class=\"nx\">task</span><span class=\"p\">.</span><span class=\"nx\">run</span><span class=\"p\">(</span>      <span class=\"p\">[</span>        <span class=\"s2\">&quot;clean:release&quot;</span><span class=\"p\">,</span>        <span class=\"s2\">&quot;injector:mainReleasePaths&quot;</span><span class=\"p\">,</span>        <span class=\"s2\">&quot;uglify:release&quot;</span><span class=\"p\">,</span>        <span class=\"s2\">&quot;copy:release&quot;</span>        <span class=\"s2\">&quot;requirejs&quot;</span><span class=\"p\">,</span>        <span class=\"s2\">&quot;clean:mainTemp&quot;</span><span class=\"p\">,</span>        <span class=\"s2\">&quot;war&quot;</span>      <span class=\"p\">]);</span>    <span class=\"p\">}</span>  <span class=\"p\">...</span></code></pre></div><p>I added <code>\"war\"</code> to the array of <code>grunt.task.run()</code> steps as the final task to run when we target <code>grunt build:release</code>.</p><p>With all this in place you’ll get a deployable WAR file that includes everything from your JET project that was minified and copied into the release folder as part of the build process. </p>"
    },
  
    {
      "title": "Adding a Grunt Plugin to JET",
      "date_published": "2016-04-20T00:00:00+00:00",
      "date_modified": "2016-04-20T00:00:00+00:00",
      "id": "/2016/04/20/add-grunt-plugin-to-jet/",
      "url": "http://www.likeahouseafire.com/2016/04/20/add-grunt-plugin-to-jet/",
      
      
      
      "tags": ["Oracle JET","JavaScript","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Our first Grunt plugin.  So very proud.",
      "content_text": "So let’s say we’re cool with the whole Grunt-for-a-JET-project thing and now want to extend the scripts by adding a new plugin.We’ll add something simple first. I like time-grunt because I’m always curious about the metrics. Adding it to our project will display the elapsed execution time of all of the tasks whenever we run Grunt.First we need to download and install the plugin. Then we need to configure our Grunt scripts to fire it up. Grunt plugins are installed via npm and registered in the package.json file in the root of your JET project. Execute this command to download and install time-grunt:npm install time-grunt --save-devThe npm install part pulls down the code needed for time-grunt and puts it in your node_modules folder. The --save-dev part adds an entry to your package.json file.Now we need to add it to the Gruntfile so that it will run on every invocation of grunt.  Because it’s watching over everything Grunt does and measuring the time it takes, time-grunt loads differently than normal task modules and we don’t use the load-grunt-config pattern of adding a scripts/grunt/config file like a task. Instead, we put it directly in the Gruntfile, despite the fact that the generated JET code leans on the load-grunt-config approach for all of its other plugins.Gruntfile.js...module.exports = function (grunt) {  require(&quot;jit-grunt&quot;)(grunt, {});  require(&#39;time-grunt&#39;)(grunt);  require(&quot;load-grunt-config&quot;)(grunt,   { ...Now let’s run something with Grunt that takes a while and see the timing results printed out at the end:$ grunt build:releaseRunning &quot;build:release&quot; (build) taskRunning .........Done, without errors.Execution Time (2016-04-22 17:54:02 UTC)loading tasks   118ms  ▇ 1%clean:release   195ms  ▇ 2%uglify:release  352ms  ▇▇ 3%copy:release     2.9s  ▇▇▇▇▇▇▇▇▇▇▇▇▇ 27%requirejs:main   6.8s  ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 65%Total 10.5stime-grunt is unique in how it runs globally instead of being called as a task. Next we’ll configure a plugin that only runs for certain targets instead of every time Grunt is called.",
      "content_html": "<p>So let’s say we’re <a href=\"http://likeahouseafire.com/2016/04/18/decoding-jets-grunt-scripts/\">cool with the whole Grunt-for-a-JET-project thing</a> and now want to extend the scripts by adding a new plugin.</p><p>We’ll add something simple first. I like <a href=\"https://www.npmjs.com/package/time-grunt\">time-grunt</a> because I’m always curious about the metrics. Adding it to our project will display the elapsed execution time of all of the tasks whenever we run Grunt.</p><p>First we need to download and install the plugin. Then we need to configure our Grunt scripts to fire it up. </p><p>Grunt plugins are installed via npm and registered in the <code>package.json</code> file in the root of your JET project. Execute this command to download and install time-grunt:</p><div class=\"highlight\"><pre><code class=\"language-text\" data-lang=\"text\">npm install time-grunt --save-dev</code></pre></div><p>The <code>npm install</code> part pulls down the code needed for time-grunt and puts it in your node_modules folder. The <code>--save-dev</code> part adds an entry to your package.json file.</p><p>Now we need to add it to the Gruntfile so that it will run on every invocation of <code>grunt</code>.  Because it’s watching over everything Grunt does and measuring the time it takes, time-grunt loads differently than normal task modules and we don’t use the load-grunt-config pattern of adding a <code>scripts/grunt/config</code> file like a task. Instead, we put it directly in the Gruntfile, despite the fact that the generated JET code leans on the load-grunt-config approach for all of its other plugins.</p><h4 id=\"gruntfilejs\">Gruntfile.js</h4><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"p\">...</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;jit-grunt&quot;</span><span class=\"p\">)(</span><span class=\"nx\">grunt</span><span class=\"p\">,</span> <span class=\"p\">{});</span>  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;time-grunt&#39;</span><span class=\"p\">)(</span><span class=\"nx\">grunt</span><span class=\"p\">);</span>  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;load-grunt-config&quot;</span><span class=\"p\">)(</span><span class=\"nx\">grunt</span><span class=\"p\">,</span>   <span class=\"p\">{</span> <span class=\"p\">...</span></code></pre></div><p>Now let’s run something with Grunt that takes a while and see the timing results printed out at the end:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nv\">$ </span>grunt build:releaseRunning <span class=\"s2\">&quot;build:release&quot;</span> <span class=\"o\">(</span>build<span class=\"o\">)</span> taskRunning .........Done, without errors.Execution Time <span class=\"o\">(</span>2016-04-22 17:54:02 UTC<span class=\"o\">)</span>loading tasks   118ms  ▇ 1%clean:release   195ms  ▇ 2%uglify:release  352ms  ▇▇ 3%copy:release     2.9s  ▇▇▇▇▇▇▇▇▇▇▇▇▇ 27%requirejs:main   6.8s  ▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇▇ 65%Total 10.5s</code></pre></div><p>time-grunt is unique in how it runs globally instead of being called as a task. <a href=\"http://likeahouseafire.com/2016/04/22/using-grunt-to-create-war/\">Next we’ll configure a plugin that only runs for certain targets</a> instead of every time Grunt is called.</p>"
    },
  
    {
      "title": "Decoding JET's Grunt Scripts",
      "date_published": "2016-04-18T00:00:00+00:00",
      "date_modified": "2016-04-18T00:00:00+00:00",
      "id": "/2016/04/18/decoding-jets-grunt-scripts/",
      "url": "http://www.likeahouseafire.com/2016/04/18/decoding-jets-grunt-scripts/",
      
      
      
      "tags": ["Oracle JET","JavaScript","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Tracing the Grunt tasks that come from the JET Yeoman generator",
      "content_text": "If you’ve scaffolded out a JET QuickStart project using the Yeoman generator, you may have noticed some Grunt tooling in a scripts folder in the root of your project. If you haven’t, give it a try at the command prompt (assuming you already have Yeoman installed):# this gets the JET generator installed once for all timenpm install -g generator-oraclejet# this generates a JET application with QuickStart_Basic template into a yoJET directoryyo oraclejet yoJET --template=basicAfter this runs, a message even tempts you regarding your new Grunt powers with the hint that you can change to the yoJET directory and run grunt build and grunt serve. So we know there are at least two Grunt tasks delivered in the Oracle JET Yeoman generator. But did you know they run differently in development mode vs. release mode? What other coolness lurks in the JET Grunt implementation?A leaned-down Gruntfile.jsIn the root of your generated yoJET application is a Gruntfile.js file. This is Grunt’s most important file, and in most projects it can get very long and cluttered with many lines of configuration for all of the Grunt tasks you want to set up.But in the generated version, you’ll see that things are lean and tidy. In fact, there’s none of the normal grunt.loadNpmTasks() calls nor endless configuration settings. Instead, the JET Grunt setups lean on grunt-load-config and jit-grunt to implement the configs and load everything on the fly.Gruntfile.js/** * Copyright (c) 2014, 2016, Oracle and/or its affiliates. * The Universal Permissive License (UPL), Version 1.0 */&quot;use strict&quot;;var path = require(&quot;path&quot;);/* * Currently the tooling uses load-grunt-config to manage it&#39;s tasks. * In future grunt plugin will be created for better management */module.exports = function (grunt) {  require(&quot;jit-grunt&quot;)(grunt, {});  require(&quot;load-grunt-config&quot;)(grunt,   {    configPath: path.join(process.cwd(), &quot;scripts/grunt/config&quot;),        jitGrunt:     {      customTasksDir: &quot;scripts/grunt/tasks&quot;    },    data:     {      oraclejet:       {        ports:         {          server: 8000,          livereload: 35729        }      }    }  });};Notice that the configPath is being redirected to the scripts/grunt/config folder in our project. There’s a whole folder structure with Grunt settings created by the Yeoman generator:What’s up with the Scripts folderThis structure is how load-grunt-config likes to think. By separating each Grunt task’s configs into their own files it keeps things orderly and easy to edit. Meanwhile, jit-grunt takes care of loading the node_modules plugins based upon the task names you use instead of loading them all up at the beginning of your Gruntfile. The scripts/grunt/config files fall into the proper naming pattern and contain the configurations that would normally be in the Gruntfile’s grunt.initConfig(). A module’s configs are stuffed into a module.exports object. However, note that the module’s config object notation changes ever so slightly: you don’t need the eponymous outer object named after the modules and can instead just export the meat of the Grunt module’s config. Compare, for example, the generated scripts/grunt/config/clean.js export with a sample Gruntfile config for grunt-contrib-clean — there’s no outer clean: {...} object in the JET-generated case.The scripts/grunt/common folder contains importable variables used by the tasks and configs, such as build.js and bowercopy.js. These imports are more modular than the global values set in the Gruntfile’s data: {} object.Finally, under the scripts/grunt/tasks folder you’ll find our two seeded Grunt tasks: build.js and serve.js. These tasks can call the other modules with various targets or even set options based upon which target you call the task with.Out-of-the-box Grunt commandsSo the fresh-from-the-generator setup for a JET project includes at least the following Grunt tasks:  grunt serve (same as grunt serve:dev) – spins up a webserver pointing at your project code, watches for changes to your files, and uses liveReload to refresh the browser upon changes  grunt build (same as grunt build:dev) – doesn’t do anything. Even though the :dev target is the default, there isn’t anything to “build” since the dev files are served directly out of the project root  grunt build:release – runs a boatload of tasks which create a /release folder in the root of the project and then copy the code and assets needed to deploy your JET project. Notice that the tasks that run include uglifying your JavaScript and moving copies of the Bower-sourced libraries into place  grunt serve:release – spins up a webserver that points at that /release folder so you can verify that everything built correctly before deploying to a production webserver  grunt bowercopy – an interesting task that copies specified files from the bower_components directory into the js/libs directory. The Yeoman generator accomplishes this when it scaffolds out your project, as you can see (for example inside of main.js) that everything points to the supporting files in the /js/libs/ folders. But if you later use bower install to add an additional library of your own to your project, you’ll want to update the scripts/grunt/config/bowercopy.js file and then rerun grunt bowercopy so that your new dependencies are “inside” your project instead of referencing them straight out of the bower_components foldersUnderstanding the way JET leverages load-grunt-config and how the files in the scripts/grunt folders work together opens up the possibility of tweaking the Grunt tasks to match our build process, and also gives us the knowledge needed to add additional Grunt modules to our projects.",
      "content_html": "<p>If you’ve scaffolded out a JET QuickStart project using the Yeoman generator, you may have noticed some <a href=\"\">Grunt</a> tooling in a <code>scripts</code> folder in the root of your project. If you haven’t, give it a try at the command prompt (assuming you <a href=\"http://yeoman.io/learning/index.html\">already have Yeoman installed</a>):</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"c\"># this gets the JET generator installed once for all time</span>npm install -g generator-oraclejet<span class=\"c\"># this generates a JET application with QuickStart_Basic template into a yoJET directory</span>yo oraclejet yoJET --template<span class=\"o\">=</span>basic</code></pre></div><p>After this runs, a message even tempts you regarding your new Grunt powers with the hint that you can change to the yoJET directory and run <code>grunt build</code> and <code>grunt serve</code>. </p><p>So we know there are at least two Grunt tasks delivered in the Oracle JET Yeoman generator. But did you know they run differently in development mode vs. release mode? What other coolness lurks in the JET Grunt implementation?</p><h2 id=\"a-leaned-down-gruntfilejs\">A leaned-down Gruntfile.js</h2><p>In the root of your generated yoJET application is a <code>Gruntfile.js</code> file. This is Grunt’s most important file, and in most projects it can get very long and cluttered with many lines of configuration for all of the Grunt tasks you want to set up.</p><p>But in the generated version, you’ll see that things are lean and tidy. In fact, there’s none of the normal <code>grunt.loadNpmTasks()</code> calls nor endless configuration settings. Instead, the JET Grunt setups lean on <a href=\"https://github.com/firstandthird/load-grunt-config\">grunt-load-config</a> and <a href=\"https://github.com/shootaroo/jit-grunt\">jit-grunt</a> to implement the configs and load everything on the fly.</p><h4 id=\"gruntfilejs\">Gruntfile.js</h4><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**</span><span class=\"cm\"> * Copyright (c) 2014, 2016, Oracle and/or its affiliates.</span><span class=\"cm\"> * The Universal Permissive License (UPL), Version 1.0</span><span class=\"cm\"> */</span><span class=\"s2\">&quot;use strict&quot;</span><span class=\"p\">;</span><span class=\"kd\">var</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">);</span><span class=\"cm\">/*</span><span class=\"cm\"> * Currently the tooling uses load-grunt-config to manage it&#39;s tasks.</span><span class=\"cm\"> * In future grunt plugin will be created for better management</span><span class=\"cm\"> */</span><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">grunt</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;jit-grunt&quot;</span><span class=\"p\">)(</span><span class=\"nx\">grunt</span><span class=\"p\">,</span> <span class=\"p\">{});</span>  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;load-grunt-config&quot;</span><span class=\"p\">)(</span><span class=\"nx\">grunt</span><span class=\"p\">,</span>   <span class=\"p\">{</span>    <span class=\"nx\">configPath</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">cwd</span><span class=\"p\">(),</span> <span class=\"s2\">&quot;scripts/grunt/config&quot;</span><span class=\"p\">),</span>        <span class=\"nx\">jitGrunt</span><span class=\"o\">:</span>     <span class=\"p\">{</span>      <span class=\"nx\">customTasksDir</span><span class=\"o\">:</span> <span class=\"s2\">&quot;scripts/grunt/tasks&quot;</span>    <span class=\"p\">},</span>    <span class=\"nx\">data</span><span class=\"o\">:</span>     <span class=\"p\">{</span>      <span class=\"nx\">oraclejet</span><span class=\"o\">:</span>       <span class=\"p\">{</span>        <span class=\"nx\">ports</span><span class=\"o\">:</span>         <span class=\"p\">{</span>          <span class=\"nx\">server</span><span class=\"o\">:</span> <span class=\"mi\">8000</span><span class=\"p\">,</span>          <span class=\"nx\">livereload</span><span class=\"o\">:</span> <span class=\"mi\">35729</span>        <span class=\"p\">}</span>      <span class=\"p\">}</span>    <span class=\"p\">}</span>  <span class=\"p\">});</span><span class=\"p\">};</span></code></pre></div><p>Notice that the <code>configPath</code> is being redirected to the <code>scripts/grunt/config</code> folder in our project. There’s a whole folder structure with Grunt settings created by the Yeoman generator:</p><div class=\"full zoomable\"><img src=\"/images/20160418/grunt-tree.png\" /></div><h2 id=\"whats-up-with-the-scripts-folder\">What’s up with the Scripts folder</h2><p>This structure is how <code>load-grunt-config</code> likes to think. By separating each Grunt task’s configs into their own files it keeps things orderly and easy to edit. Meanwhile, <code>jit-grunt</code> takes care of loading the node_modules plugins based upon the task names you use instead of loading them all up at the beginning of your Gruntfile. </p><p>The <code>scripts/grunt/config</code> files fall into the proper naming pattern and contain the configurations that would normally be in the Gruntfile’s <code>grunt.initConfig()</code>. A module’s configs are stuffed into a <code>module.exports</code> object. However, note that the module’s config object notation changes ever so slightly: you don’t need the eponymous outer object named after the modules and can instead just export the meat of the Grunt module’s config. Compare, for example, the generated <code>scripts/grunt/config/clean.js</code> export with a <a href=\"https://github.com/gruntjs/grunt-contrib-clean#-all-tasks\">sample Gruntfile config for grunt-contrib-clean</a> — there’s no outer <code>clean: {...}</code> object in the JET-generated case.</p><p>The <code>scripts/grunt/common</code> folder contains importable variables used by the tasks and configs, such as <code>build.js</code> and <code>bowercopy.js.</code> These imports are more modular than the global values set in the Gruntfile’s <code>data: {}</code> object.</p><p>Finally, under the <code>scripts/grunt/tasks</code> folder you’ll find our two seeded Grunt tasks: <code>build.js</code> and <code>serve.js</code>. These tasks can call the other modules with various targets or even set options based upon which target you call the task with.</p><h2 id=\"out-of-the-box-grunt-commands\">Out-of-the-box Grunt commands</h2><p>So the fresh-from-the-generator setup for a JET project includes at least the following Grunt tasks:</p><ul>  <li><code>grunt serve</code> (same as <code>grunt serve:dev</code>) – spins up a webserver pointing at your project code, watches for changes to your files, and uses liveReload to refresh the browser upon changes</li>  <li><code>grunt build</code> (same as <code>grunt build:dev</code>) – doesn’t do anything. Even though the <code>:dev</code> target is the default, there isn’t anything to “build” since the dev files are served directly out of the project root</li>  <li><code>grunt build:release</code> – runs a boatload of tasks which create a <code>/release</code> folder in the root of the project and then copy the code and assets needed to deploy your JET project. Notice that the tasks that run include uglifying your JavaScript and moving copies of the Bower-sourced libraries into place</li>  <li><code>grunt serve:release</code> – spins up a webserver that points at that <code>/release</code> folder so you can verify that everything built correctly before deploying to a production webserver</li>  <li><code>grunt bowercopy</code> – an interesting task that copies specified files from the bower_components directory into the js/libs directory. The Yeoman generator accomplishes this when it scaffolds out your project, as you can see (for example inside of <code>main.js</code>) that everything points to the supporting files in the <code>/js/libs/</code> folders. But if you later use <code>bower install</code> to add an additional library of your own to your project, you’ll want to update the <code>scripts/grunt/config/bowercopy.js</code> file and then rerun <code>grunt bowercopy</code> so that your new dependencies are “inside” your project instead of referencing them straight out of the <code>bower_components</code> folders</li></ul><p>Understanding the way JET leverages <code>load-grunt-config</code> and how the files in the <code>scripts/grunt</code> folders work together opens up the possibility of tweaking the Grunt tasks to match our build process, and also gives us the knowledge needed to add additional Grunt modules to our projects.</p>"
    },
  
    {
      "title": "Passing Data into ojModules",
      "date_published": "2016-02-25T00:00:00+00:00",
      "date_modified": "2016-02-25T00:00:00+00:00",
      "id": "/2016/02/25/passing-data-into-ojmodules/",
      "url": "http://www.likeahouseafire.com/2016/02/25/passing-data-into-ojmodules/",
      
      
      
      "tags": ["Oracle JET","JavaScript","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Creating submodules to iterate over an array and using the params: option to reference data from both a parent ojModule and its children. ",
      "content_text": "Geertjan Wielenga recently published a series of articles on inter-module communication with three great ways to get modules talking to each other, or at least sharing data. Here is a different trick I learned from Jim Marion, originally in the context of passing data to Knockout Components but reapplied here to Oracle JET modules.ojModules can be used to tidy up your codebase, but they’re also useful for creating reusable blocks of code that you might iterate over to produce many copies of the same component, each with its own backing data. Using the $params option for ojModule we can pass data objects into the called submodule to be used and tweaked in the context of that module’s viewModel. Since JavaScript objects are pass-by-copy-of-reference, this means anything we add or change to the passed in $params object will still be there if we try to access it from the parent module.  This is because they’re pointing at the same thing in memory.So for example lets say we have a array of objects we want to iterate over and create index cards out of, a la the WorkBetter demo. Instead of creating all of the code for the card itself in the page’s view, we could instead create a module out of the cards. Then if we ever need to use cards again in a different part of our app, we already have the code set up as a module and can just reuse it.Setting up the parent ojModuleIn our example, the module that the router calls when we click on the Employees tab is very simple. Think of it as the parent view for all of the children cards we’ll iterate over.employeeCards.html view&lt;h1&gt;Card Modules Content&lt;/h1&gt;&lt;h2&gt;computed cards selected: &lt;span data-bind=&quot;text: computedCount&quot;&gt;&lt;/span&gt;&lt;/h2&gt;&lt;!-- ko foreach: allPeople()  --&gt;    &lt;div data-bind=&quot;ojModule: {name: &#39;cards-modules/card&#39;,                        params: $data }&quot;&gt;&lt;/div&gt;&lt;!-- /ko --&gt;Notice that there’s hardly any HTML in the parent. Basically just a Knockout foreach that iterates over an allPeople array. Notice also that we’re calling a module in a relative subdirectory named cards-modules/card and that each time we loop we’re passing in the $data binding as params for the current iteration of the foreach…more on that later.Here’s the backing viewModel for our parent view. Since this is demo data, the allPeople observable array is hard-coded but it could just as well be populated by a data retrieval function. There’s also a computed observable that returns a count of all cards in the data that have an isSelected member set to true.employeeCards.js viewModeldefine([&#39;ojs/ojcore&#39;, &#39;knockout&#39;], function (oj, ko) {  function ViewModel() {    var self = this;    self.allPeople = ko.observableArray([]);    self.allPeople([{            &quot;empId&quot;: 205,            &quot;firstName&quot;: &quot;Shelley&quot;,            &quot;lastName&quot;: &quot;Higgins&quot;,            &quot;title&quot;: &quot;Accounting Director&quot;,            &quot;hireDate&quot;: &quot;2010-01-01T00:00:00Z&quot;,            &quot;rating&quot;: 5,            &quot;potential&quot;: 3,            &quot;deptName&quot;: &quot;Accounting&quot;        }, {            &quot;empId&quot;: 118,            &quot;firstName&quot;: &quot;Guy&quot;,            &quot;lastName&quot;: &quot;Himuro&quot;,            &quot;title&quot;: &quot;Purchasing Clerk&quot;,            &quot;hireDate&quot;: &quot;2009-03-01T00:00:00Z&quot;,            &quot;compRatio&quot;: 63,            &quot;rating&quot;: 4,            &quot;potential&quot;: 4,            &quot;deptName&quot;: &quot;Purchasing&quot;        }, {            &quot;empId&quot;: 103,            &quot;firstName&quot;: &quot;Alexander&quot;,            &quot;lastName&quot;: &quot;Hunold&quot;,            &quot;title&quot;: &quot;IT Director&quot;,            &quot;hireDate&quot;: &quot;2006-07-14T00:00:00Z&quot;,            &quot;rating&quot;: 2,            &quot;potential&quot;: 2,            &quot;deptName&quot;: &quot;IT&quot;        }, {            &quot;empId&quot;: 175,            &quot;firstName&quot;: &quot;Arthur&quot;,            &quot;lastName&quot;: &quot;Hutton&quot;,            &quot;title&quot;: &quot;Public Relations Reprentative&quot;,            &quot;hireDate&quot;: &quot;2008-02-14T00:00:00Z&quot;,            &quot;rating&quot;: 2,            &quot;potential&quot;: 4,            &quot;deptName&quot;: &quot;Public Relations&quot;        }]);        // calculate number of selected cards when allPeople receives valueHasMutated()    self.computedCount = ko.computed(function(){        //filter array for only the elements that have isSelected == true, then count the length of that filtered array        var countNewvalue = self.allPeople().filter(function (c) {                // must check if the object even has an isSelected member, because it doesn&#39;t on the first pass                if (c.isSelected){                    return c.isSelected();                }            }).length;        return countNewvalue;    });  }  return ViewModel;});But wait: looking at the hard-coded data for allPeople, there is no member for isSelected—at least not yet. That’s because we are going to add it inside of the cards-modules/card child module as the result of a click handler. But the cool thing is that we’ll be able to access that data here in the parent’s viewModel because of the way we pass the $data object.Setting up the child ojModuleThe submodule’s HTML is unabashedly copied from the WorkBetter sample app, but it is only the index card code. Each time we iterate over the parent’s allPeople array, we’ll get one copy of this card HTML. cards-modules/card.html view&lt;div class=&quot;oj-col oj-sm-12 oj-md-6 oj-lg-4 oj-xl-3&quot;&gt;  &lt;!-- click handler toggleSelected() receives $parents from binding context  --&gt;  &lt;div class=&quot;oj-panel oj-panel-alt1&quot; style=&quot;height: 226px; margin: 5px 0px 10px 0px;&quot; data-bind=&quot;click: function() {toggleSelected($parents)}&quot;&gt;    &lt;div class=&quot;oj-row&quot;&gt;      &lt;div class=&quot;oj-col oj-sm-4&quot;&gt;        &lt;img class=&quot;demo-circular demo-employee-photo&quot; data-bind=&quot;attr: {src: getPhoto(cardData.empId)}&quot;/&gt;      &lt;/div&gt;      &lt;div class=&quot;oj-col oj-sm-8&quot;&gt;        &lt;div class=&quot;demo-employee-name&quot; data-bind=&quot;text: cardData.firstName+ &#39; &#39; + cardData.lastName&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;demo-employee-title&quot; data-bind=&quot;text: cardData.title&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;demo-employee-dept&quot; data-bind=&quot;text: cardData.deptName&quot;&gt;&lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;oj-row&quot;&gt;      &lt;div class=&quot;oj-col oj-sm-4&quot;&gt;        &lt;div class=&quot;demo-employee-tenure&quot; data-bind=&quot;text: getTenure(cardData)&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;demo-employee-tenure-label&quot;&gt;Tenure&lt;/div&gt;      &lt;/div&gt;      &lt;div class=&quot;oj-col oj-sm-4&quot;&gt;        &lt;div class=&quot;demo-employee-perf&quot; data-bind=&quot;text:cardData.rating, style: {color: cardData.rating &lt; 3 ? &#39;#e95b54&#39; : &#39;#309fdb&#39;}&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;demo-employee-perf-label&quot;&gt;Rating&lt;/div&gt;      &lt;/div&gt;      &lt;div class=&quot;oj-col oj-sm-4&quot;&gt;        &lt;div class=&quot;demo-employee-perf&quot; data-bind=&quot;text:cardData.potential, style: {color: cardData.potential &lt; 3 ? &#39;#e95b54&#39; : &#39;#309fdb&#39;}&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;demo-employee-perf-label&quot;&gt;Potential&lt;/div&gt;      &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;oj-row&quot;&gt;              &lt;!-- span to indicate whether card has been clicked into isSelected state --&gt;      &lt;span style=&quot;float:left; color: green; font-size: 36px; margin-top: 20px&quot; data-bind=&quot;visible: cardData.isSelected&quot; class=&quot;fa fa-lg fa-check-circle-o&quot;&gt;is selected&lt;/span&gt;      &lt;span style=&quot;float: right;&quot;&gt;        &lt;a data-bind=&quot;attr:{href: &#39;#&#39;}&quot; role=&quot;img&quot; title=&quot;Send this employee an email&quot; class=&quot;demo-employee-email-icon&quot;&gt;&lt;/a&gt;        &lt;a data-bind=&quot;click: function(data, event){}, clickBubble: false&quot; role=&quot;img&quot; title=&quot;View this employees team members&quot; class=&quot;demo-employee-org-icon&quot;&gt;&lt;/a&gt;      &lt;/span&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;To the WorkBetter code I added a span of green text that only shows when the card’s viewModel has an isSelected attribute set to true. We’ll see this is set by a toggleSelected() function in the viewModel.Also see how all of the fields’ text data is being bound to members of a cardData object in the backing viewModel. This is actually the data that got passed from the parent view when we called ojModule with the params: $data option. We unpack it in the viewModel code below.There is one other difference from the WorkBetter code: we’ve added the click handler for that toggleSelected() to the entire card panel’s div. But see how it’s not a normal data-bind reference? Instead, we’re calling anonymous function to pass in the context binding for $parents to our toggleSelected click handler. We need this $parents context inside of the viewModel, and I’ll explain why next.cards-modules/card.js viewModeldefine([&#39;ojs/ojcore&#39;, &#39;knockout&#39;], function (oj, ko) {  function cardContentViewModel($params) {    var self = this;    // assign the passed-in $params to a viewModel variable    self.cardData = $params;        // add a flag to the card to track &quot;selected&quot; state    self.cardData.isSelected = ko.observable(false);    // click handler for toggling a card&#39;s selected state    // gets $parents passed in from view&#39;s binding     self.toggleSelected = function ($parents) {      self.cardData.isSelected(!self.cardData.isSelected());           // we need to tell the grandparent that we changed the data inside the array      // since the grandparent&#39;s allPeople observableArray won&#39;t fire subscriptions otherwise      $parents[1].allPeople.valueHasMutated();    };    // functions stolen from WorkBetter for card data calculations    self.getPhoto = function (empId) {      var src;      if (empId &lt; 188) {          src = &#39;css/images/people/&#39; + empId + &#39;.png&#39;;      } else {          src = &#39;css/images/people/nopic.png&#39;;      }      return src;    };    self.getTenure = function (emp) {      var now = new Date().getFullYear();      var hired = new Date(emp.hireDate).getFullYear();      var diff = now - hired;      return diff;    };  }  return cardContentViewModel;});This looks like a normal viewModel but for a few differences. One is that we’re expecting a $params parameter when our viewModel function is called. This will be the current record from the allPeople array when the parent calls our ojModule. We immediately assign $params to a local viewModel variable (self.cardData) so that we can access it via normal data binding in the view.But again: because JavaScript is passing in a copy of the pointer to the object that was this iteration of the allPeople array, then if we modify the data it will be changing the same object that the parent owns. This means we can make a change to the state of the object here in the submodule, but use that same data up in the parent module.That’s what we do when we add an isSelected member to the data object. This is a locally-maintained flag that holds the ‘has it been clicked’ status for this card. The selected status is toggled by the toggleSelected() function.But that toggle function takes a parameter of its own: the $parents binding from the card view. We need this in order to reach up to the parent’s allPeople observable array and tell it that we’ve mutated the values of its members, otherwise the computed observable computedCount will never fire. Why not? Because we’re not really modifying the observable array allPeople…we’re modifying a member of that array. The array still has the same number of items and thus the array itself doesn’t seem changed, especially to the parent viewModel. We’ve only modified one of the members of one of the array’s items, and so the computedObservable subscription never fires. But we can wake it up by explicitly telling it to recalculate by means of the $parents[1].allPeople.valueHasMutated(); call.(aside:  We’ve been calling it the “parent” viewModel, so why do we need to reach up to the grandparent with $parents[1] instead of the parent with $parents[0]?  It’s because of the foreach in the parent module’s view: it introduces another layer when it iterates over the array before calling our submodule.)Taking it for a spinWith all the pieces now in place we can show data added and modifed in the submodule yet also accessible from the parent viewModel. When we click on a card, it locally toggles its selected state and the green “is selected” text is revealed. Meanwhile up at the parent the computed observable fires and the parent counts up how many array items are in isSelected state and displays that number via a binding in the parent’s view.With this same params passing technique, a single data object could be passed around to multiple modules in a view, all of them modifying the same object in memory. ",
      "content_html": "<p>Geertjan Wielenga recently published <a href=\"https://blogs.oracle.com/geertjan/entry/intermodular_communication_in_oracle_jet2\">a series of articles on inter-module communication</a> with three great ways to get modules talking to each other, or at least sharing data. Here is a different trick I learned from <a href=\"http://jjmpsj.blogspot.com/\">Jim Marion</a>, originally in the context of passing data to Knockout Components but reapplied here to Oracle JET modules.</p><p>ojModules <a href=\"http://likeahouseafire.com/2016/01/23/modules-are-your-friends/\">can be used to tidy up your codebase</a>, but they’re also useful for creating reusable blocks of code that you might iterate over to produce many copies of the same component, each with its own backing data. </p><p>Using the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/jsdocs/ojModule.html#Options\">$params option for ojModule</a> we can pass data objects into the called submodule to be used and tweaked in the context of that module’s viewModel. Since JavaScript objects are pass-by-copy-of-reference, this means anything we add or change to the passed in $params object will still be there if we try to access it from the parent module.  This is because they’re pointing at the same thing in memory.</p><p>So for example lets say we have a array of objects we want to iterate over and create index cards out of, <a href=\"http://www.oracle.com/webfolder/technetwork/jet/public_samples/WorkBetter/public_html/index.html?root=people\">a la the WorkBetter demo</a>. Instead of creating all of the code for the card itself in the page’s view, we could instead create a module out of the cards. Then if we ever need to use cards again in a different part of our app, we already have the code set up as a module and can just reuse it.</p><div class=\"full zoomable\"><img src=\"/images/20160225/each-card-a-module.png\" /></div><h2 id=\"setting-up-the-parent-ojmodule\">Setting up the parent ojModule</h2><p>In our example, the module that the router calls when we click on the Employees tab is very simple. Think of it as the parent view for all of the children cards we’ll iterate over.</p><h4 id=\"employeecardshtml-view\">employeeCards.html view</h4><div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;h1&gt;</span>Card Modules Content<span class=\"nt\">&lt;/h1&gt;</span><span class=\"nt\">&lt;h2&gt;</span>computed cards selected: <span class=\"nt\">&lt;span</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;text: computedCount&quot;</span><span class=\"nt\">&gt;&lt;/span&gt;&lt;/h2&gt;</span><span class=\"c\">&lt;!-- ko foreach: allPeople()  --&gt;</span>    <span class=\"nt\">&lt;div</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;ojModule: {name: &#39;cards-modules/card&#39;,</span><span class=\"s\">                        params: $data }&quot;</span><span class=\"nt\">&gt;&lt;/div&gt;</span><span class=\"c\">&lt;!-- /ko --&gt;</span></code></pre></div><p>Notice that there’s hardly any HTML in the parent. Basically just a Knockout <code>foreach</code> that iterates over an <code>allPeople</code> array. Notice also that we’re calling a module in a relative subdirectory named <code>cards-modules/card</code> and that each time we loop we’re passing in the <code>$data</code> binding as <code>params</code> for the current iteration of the foreach…more on that later.</p><p>Here’s the backing viewModel for our parent view. Since this is demo data, the <code>allPeople</code> observable array is hard-coded but it could just as well be populated by a data retrieval function. There’s also a computed observable that returns a count of all cards in the data that have an <code>isSelected</code> member set to <code>true</code>.</p><h4 id=\"employeecardsjs-viewmodel\">employeeCards.js viewModel</h4><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">define</span><span class=\"p\">([</span><span class=\"s1\">&#39;ojs/ojcore&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;knockout&#39;</span><span class=\"p\">],</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">oj</span><span class=\"p\">,</span> <span class=\"nx\">ko</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"kd\">function</span> <span class=\"nx\">ViewModel</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"kd\">var</span> <span class=\"nx\">self</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>    <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">allPeople</span> <span class=\"o\">=</span> <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">observableArray</span><span class=\"p\">([]);</span>    <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">allPeople</span><span class=\"p\">([{</span>            <span class=\"s2\">&quot;empId&quot;</span><span class=\"o\">:</span> <span class=\"mi\">205</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;firstName&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Shelley&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;lastName&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Higgins&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;title&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Accounting Director&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;hireDate&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;2010-01-01T00:00:00Z&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;rating&quot;</span><span class=\"o\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;potential&quot;</span><span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;deptName&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Accounting&quot;</span>        <span class=\"p\">},</span> <span class=\"p\">{</span>            <span class=\"s2\">&quot;empId&quot;</span><span class=\"o\">:</span> <span class=\"mi\">118</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;firstName&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Guy&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;lastName&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Himuro&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;title&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Purchasing Clerk&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;hireDate&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;2009-03-01T00:00:00Z&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;compRatio&quot;</span><span class=\"o\">:</span> <span class=\"mi\">63</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;rating&quot;</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;potential&quot;</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;deptName&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Purchasing&quot;</span>        <span class=\"p\">},</span> <span class=\"p\">{</span>            <span class=\"s2\">&quot;empId&quot;</span><span class=\"o\">:</span> <span class=\"mi\">103</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;firstName&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Alexander&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;lastName&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Hunold&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;title&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;IT Director&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;hireDate&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;2006-07-14T00:00:00Z&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;rating&quot;</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;potential&quot;</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;deptName&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;IT&quot;</span>        <span class=\"p\">},</span> <span class=\"p\">{</span>            <span class=\"s2\">&quot;empId&quot;</span><span class=\"o\">:</span> <span class=\"mi\">175</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;firstName&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Arthur&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;lastName&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Hutton&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;title&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Public Relations Reprentative&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;hireDate&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;2008-02-14T00:00:00Z&quot;</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;rating&quot;</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;potential&quot;</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>            <span class=\"s2\">&quot;deptName&quot;</span><span class=\"o\">:</span> <span class=\"s2\">&quot;Public Relations&quot;</span>        <span class=\"p\">}]);</span>        <span class=\"c1\">// calculate number of selected cards when allPeople receives valueHasMutated()</span>    <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">computedCount</span> <span class=\"o\">=</span> <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">computed</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>        <span class=\"c1\">//filter array for only the elements that have isSelected == true, then count the length of that filtered array</span>        <span class=\"kd\">var</span> <span class=\"nx\">countNewvalue</span> <span class=\"o\">=</span> <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">allPeople</span><span class=\"p\">().</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"c1\">// must check if the object even has an isSelected member, because it doesn&#39;t on the first pass</span>                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">isSelected</span><span class=\"p\">){</span>                    <span class=\"k\">return</span> <span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">isSelected</span><span class=\"p\">();</span>                <span class=\"p\">}</span>            <span class=\"p\">}).</span><span class=\"nx\">length</span><span class=\"p\">;</span>        <span class=\"k\">return</span> <span class=\"nx\">countNewvalue</span><span class=\"p\">;</span>    <span class=\"p\">});</span>  <span class=\"p\">}</span>  <span class=\"k\">return</span> <span class=\"nx\">ViewModel</span><span class=\"p\">;</span><span class=\"p\">});</span></code></pre></div><p>But wait: looking at the hard-coded data for <code>allPeople</code>, there is no member for <code>isSelected</code>—at least not yet. That’s because we are going to add it inside of the <code>cards-modules/card</code> child module as the result of a click handler. But the cool thing is that we’ll be able to access that data here in the parent’s viewModel because of the way we pass the <code>$data</code> object.</p><h2 id=\"setting-up-the-child-ojmodule\">Setting up the child ojModule</h2><p>The submodule’s HTML is unabashedly copied from the WorkBetter sample app, but it is only the index card code. Each time we iterate over the parent’s <code>allPeople</code> array, we’ll get one copy of this card HTML. </p><h4 id=\"cards-modulescardhtml-view\">cards-modules/card.html view</h4><div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;oj-col oj-sm-12 oj-md-6 oj-lg-4 oj-xl-3&quot;</span><span class=\"nt\">&gt;</span>  <span class=\"c\">&lt;!-- click handler toggleSelected() receives $parents from binding context  --&gt;</span>  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;oj-panel oj-panel-alt1&quot;</span> <span class=\"na\">style=</span><span class=\"s\">&quot;height: 226px; margin: 5px 0px 10px 0px;&quot;</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;click: function() {toggleSelected($parents)}&quot;</span><span class=\"nt\">&gt;</span>    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;oj-row&quot;</span><span class=\"nt\">&gt;</span>      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;oj-col oj-sm-4&quot;</span><span class=\"nt\">&gt;</span>        <span class=\"nt\">&lt;img</span> <span class=\"na\">class=</span><span class=\"s\">&quot;demo-circular demo-employee-photo&quot;</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;attr: {src: getPhoto(cardData.empId)}&quot;</span><span class=\"nt\">/&gt;</span>      <span class=\"nt\">&lt;/div&gt;</span>      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;oj-col oj-sm-8&quot;</span><span class=\"nt\">&gt;</span>        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;demo-employee-name&quot;</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;text: cardData.firstName+ &#39; &#39; + cardData.lastName&quot;</span><span class=\"nt\">&gt;&lt;/div&gt;</span>        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;demo-employee-title&quot;</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;text: cardData.title&quot;</span><span class=\"nt\">&gt;&lt;/div&gt;</span>        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;demo-employee-dept&quot;</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;text: cardData.deptName&quot;</span><span class=\"nt\">&gt;&lt;/div&gt;</span>      <span class=\"nt\">&lt;/div&gt;</span>    <span class=\"nt\">&lt;/div&gt;</span>    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;oj-row&quot;</span><span class=\"nt\">&gt;</span>      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;oj-col oj-sm-4&quot;</span><span class=\"nt\">&gt;</span>        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;demo-employee-tenure&quot;</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;text: getTenure(cardData)&quot;</span><span class=\"nt\">&gt;&lt;/div&gt;</span>        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;demo-employee-tenure-label&quot;</span><span class=\"nt\">&gt;</span>Tenure<span class=\"nt\">&lt;/div&gt;</span>      <span class=\"nt\">&lt;/div&gt;</span>      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;oj-col oj-sm-4&quot;</span><span class=\"nt\">&gt;</span>        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;demo-employee-perf&quot;</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;text:cardData.rating, style: {color: cardData.rating &lt; 3 ? &#39;#e95b54&#39; : &#39;#309fdb&#39;}&quot;</span><span class=\"nt\">&gt;&lt;/div&gt;</span>        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;demo-employee-perf-label&quot;</span><span class=\"nt\">&gt;</span>Rating<span class=\"nt\">&lt;/div&gt;</span>      <span class=\"nt\">&lt;/div&gt;</span>      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;oj-col oj-sm-4&quot;</span><span class=\"nt\">&gt;</span>        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;demo-employee-perf&quot;</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;text:cardData.potential, style: {color: cardData.potential &lt; 3 ? &#39;#e95b54&#39; : &#39;#309fdb&#39;}&quot;</span><span class=\"nt\">&gt;&lt;/div&gt;</span>        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;demo-employee-perf-label&quot;</span><span class=\"nt\">&gt;</span>Potential<span class=\"nt\">&lt;/div&gt;</span>      <span class=\"nt\">&lt;/div&gt;</span>    <span class=\"nt\">&lt;/div&gt;</span>    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;oj-row&quot;</span><span class=\"nt\">&gt;</span>              <span class=\"c\">&lt;!-- span to indicate whether card has been clicked into isSelected state --&gt;</span>      <span class=\"nt\">&lt;span</span> <span class=\"na\">style=</span><span class=\"s\">&quot;float:left; color: green; font-size: 36px; margin-top: 20px&quot;</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;visible: cardData.isSelected&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;fa fa-lg fa-check-circle-o&quot;</span><span class=\"nt\">&gt;</span>is selected<span class=\"nt\">&lt;/span&gt;</span>      <span class=\"nt\">&lt;span</span> <span class=\"na\">style=</span><span class=\"s\">&quot;float: right;&quot;</span><span class=\"nt\">&gt;</span>        <span class=\"nt\">&lt;a</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;attr:{href: &#39;#&#39;}&quot;</span> <span class=\"na\">role=</span><span class=\"s\">&quot;img&quot;</span> <span class=\"na\">title=</span><span class=\"s\">&quot;Send this employee an email&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;demo-employee-email-icon&quot;</span><span class=\"nt\">&gt;&lt;/a&gt;</span>        <span class=\"nt\">&lt;a</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;click: function(data, event){}, clickBubble: false&quot;</span> <span class=\"na\">role=</span><span class=\"s\">&quot;img&quot;</span> <span class=\"na\">title=</span><span class=\"s\">&quot;View this employees team members&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;demo-employee-org-icon&quot;</span><span class=\"nt\">&gt;&lt;/a&gt;</span>      <span class=\"nt\">&lt;/span&gt;</span>    <span class=\"nt\">&lt;/div&gt;</span>  <span class=\"nt\">&lt;/div&gt;</span><span class=\"nt\">&lt;/div&gt;</span></code></pre></div><p>To the WorkBetter code I added a span of green text that only shows when the card’s viewModel has an <code>isSelected</code> attribute set to <code>true</code>. We’ll see this is set by a <code>toggleSelected()</code> function in the viewModel.</p><p>Also see how all of the fields’ <code>text</code> data is being bound to members of a <code>cardData</code> object in the backing viewModel. This is actually the data that got passed from the parent view when we called ojModule with the <code>params: $data</code> option. We unpack it in the viewModel code below.</p><p>There is one other difference from the WorkBetter code: we’ve added the click handler for that <code>toggleSelected()</code> to the entire card panel’s div. But see how it’s not a normal <code>data-bind</code> reference? Instead, we’re calling anonymous function to pass in the context binding for <code>$parents</code> to our <code>toggleSelected</code> click handler. We need this <code>$parents</code> context inside of the viewModel, and I’ll explain why next.</p><h4 id=\"cards-modulescardjs-viewmodel\">cards-modules/card.js viewModel</h4><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">define</span><span class=\"p\">([</span><span class=\"s1\">&#39;ojs/ojcore&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;knockout&#39;</span><span class=\"p\">],</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">oj</span><span class=\"p\">,</span> <span class=\"nx\">ko</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"kd\">function</span> <span class=\"nx\">cardContentViewModel</span><span class=\"p\">(</span><span class=\"nx\">$params</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"kd\">var</span> <span class=\"nx\">self</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>    <span class=\"c1\">// assign the passed-in $params to a viewModel variable</span>    <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">cardData</span> <span class=\"o\">=</span> <span class=\"nx\">$params</span><span class=\"p\">;</span>        <span class=\"c1\">// add a flag to the card to track &quot;selected&quot; state</span>    <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">cardData</span><span class=\"p\">.</span><span class=\"nx\">isSelected</span> <span class=\"o\">=</span> <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">observable</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>    <span class=\"c1\">// click handler for toggling a card&#39;s selected state</span>    <span class=\"c1\">// gets $parents passed in from view&#39;s binding </span>    <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">toggleSelected</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">$parents</span><span class=\"p\">)</span> <span class=\"p\">{</span>      <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">cardData</span><span class=\"p\">.</span><span class=\"nx\">isSelected</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">cardData</span><span class=\"p\">.</span><span class=\"nx\">isSelected</span><span class=\"p\">());</span>           <span class=\"c1\">// we need to tell the grandparent that we changed the data inside the array</span>      <span class=\"c1\">// since the grandparent&#39;s allPeople observableArray won&#39;t fire subscriptions otherwise</span>      <span class=\"nx\">$parents</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">allPeople</span><span class=\"p\">.</span><span class=\"nx\">valueHasMutated</span><span class=\"p\">();</span>    <span class=\"p\">};</span>    <span class=\"c1\">// functions stolen from WorkBetter for card data calculations</span>    <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">getPhoto</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">empId</span><span class=\"p\">)</span> <span class=\"p\">{</span>      <span class=\"kd\">var</span> <span class=\"nx\">src</span><span class=\"p\">;</span>      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">empId</span> <span class=\"o\">&lt;</span> <span class=\"mi\">188</span><span class=\"p\">)</span> <span class=\"p\">{</span>          <span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;css/images/people/&#39;</span> <span class=\"o\">+</span> <span class=\"nx\">empId</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.png&#39;</span><span class=\"p\">;</span>      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>          <span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;css/images/people/nopic.png&#39;</span><span class=\"p\">;</span>      <span class=\"p\">}</span>      <span class=\"k\">return</span> <span class=\"nx\">src</span><span class=\"p\">;</span>    <span class=\"p\">};</span>    <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">getTenure</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">emp</span><span class=\"p\">)</span> <span class=\"p\">{</span>      <span class=\"kd\">var</span> <span class=\"nx\">now</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getFullYear</span><span class=\"p\">();</span>      <span class=\"kd\">var</span> <span class=\"nx\">hired</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"nx\">emp</span><span class=\"p\">.</span><span class=\"nx\">hireDate</span><span class=\"p\">).</span><span class=\"nx\">getFullYear</span><span class=\"p\">();</span>      <span class=\"kd\">var</span> <span class=\"nx\">diff</span> <span class=\"o\">=</span> <span class=\"nx\">now</span> <span class=\"o\">-</span> <span class=\"nx\">hired</span><span class=\"p\">;</span>      <span class=\"k\">return</span> <span class=\"nx\">diff</span><span class=\"p\">;</span>    <span class=\"p\">};</span>  <span class=\"p\">}</span>  <span class=\"k\">return</span> <span class=\"nx\">cardContentViewModel</span><span class=\"p\">;</span><span class=\"p\">});</span></code></pre></div><p>This looks like a normal viewModel but for a few differences. One is that we’re expecting a <code>$params</code> parameter when our viewModel function is called. This will be the current record from the <code>allPeople</code> array when the parent calls our ojModule. We immediately assign <code>$params</code> to a local viewModel variable (<code>self.cardData</code>) so that we can access it via normal data binding in the view.</p><p>But again: because JavaScript is passing in a copy of the pointer to the object that was this iteration of the <code>allPeople</code> array, then if we modify the data it will be changing the same object that the parent owns. This means we can make a change to the state of the object here in the submodule, but use that same data up in the parent module.</p><p>That’s what we do when we add an <code>isSelected</code> member to the data object. This is a locally-maintained flag that holds the ‘has it been clicked’ status for this card. The selected status is toggled by the <code>toggleSelected()</code> function.</p><p>But that toggle function takes a parameter of its own: the <code>$parents</code> binding from the card view. We need this in order to reach up to the parent’s <code>allPeople</code> observable array and tell it that we’ve mutated the values of its members, otherwise the computed observable <code>computedCount</code> will never fire. Why not? </p><p>Because we’re not really modifying the observable array <code>allPeople</code>…we’re modifying a member of that array. The array still has the same number of items and thus the array itself doesn’t seem changed, especially to the parent viewModel. We’ve only modified one of the members of one of the array’s items, and so the computedObservable subscription never fires. But we can wake it up by explicitly telling it to recalculate by means of the <code>$parents[1].allPeople.valueHasMutated();</code> call.</p><p>(aside:  We’ve been calling it the “parent” viewModel, so why do we need to reach up to the <em>grand</em>parent with <code>$parents[1]</code> instead of the parent with <code>$parents[0]</code>?  It’s because of the <code>foreach</code> in the parent module’s view: it introduces another layer when it iterates over the array before calling our submodule.)</p><h2 id=\"taking-it-for-a-spin\">Taking it for a spin</h2><p>With all the pieces now in place we can show data added and modifed in the submodule yet also accessible from the parent viewModel. </p><p>When we click on a card, it locally toggles its selected state and the green “is selected” text is revealed. Meanwhile up at the parent the computed observable fires and the parent counts up how many array items are in isSelected state and displays that number via a binding in the parent’s view.</p><div class=\"full zoomable\"><img src=\"/images/20160225/clicking_isSelected.gif\" /></div><p>With this same <code>params</code> passing technique, a single data object could be passed around to multiple modules in a view, all of them modifying the same object in memory. </p>"
    },
  
    {
      "title": "Modules are Your Friends",
      "date_published": "2016-01-23T00:00:00+00:00",
      "date_modified": "2016-01-23T00:00:00+00:00",
      "id": "/2016/01/23/modules-are-your-friends/",
      "url": "http://www.likeahouseafire.com/2016/01/23/modules-are-your-friends/",
      
      
      
      "tags": ["Oracle JET","JavaScript","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Modular development with Oracle JET using ojTrain as an example",
      "content_text": "The JET Cookbook has a section on ojModule and how to use it to split your code up into components. Here’s an example of breaking up code to make it modular and easier to understand in the context of an Oracle JET Train. The ojTrain is a great way of leading a user through the steps of a process, letting them know where there are, where they’ve been, and how much is left to do. In the cookbook sample code, you can see it’s possible to stick all of the code for all panels of the train into one viewModel. Here’s the code that creates that tab, modified from the Cookbook code to work with the JET QuickStart:views/ojTrain.html&lt;h1&gt;ojTrain Content&lt;/h1&gt;&lt;div id=&quot;train-container&quot; &gt;  &lt;div id=&quot;train&quot; class=&quot;oj-train-stretch&quot; style=&quot;max-width:700px;margin-left:auto;margin-right:auto;&quot;    data-bind=&quot;ojComponent:{    component: &#39;ojTrain&#39;,     selected: currentStepValue,     steps: stepArray}&quot;&gt;&lt;/div&gt;  &lt;br/&gt;  &lt;h3 id=&quot;currentStepText&quot;    data-bind=&quot;text: &#39;You are on &#39; + currentStepValueText()&quot;     style=&quot;text-align: center&quot;&gt;  &lt;/h3&gt;  &lt;br/&gt;&lt;/div&gt;viewModels/ojTrain.jsdefine([&#39;ojs/ojcore&#39;, &#39;knockout&#39;, &#39;jquery&#39;, &#39;ojs/ojknockout&#39;, &#39;ojs/ojtrain&#39;, &#39;ojs/ojbutton&#39;],  function (oj, ko, $)  {    function TrainViewModel() {      var self = this;      this.currentStepValue = ko.observable(&#39;stp1&#39;);      this.stepArray =          ko.observableArray(             [{label: &#39;Step One&#39;, id: &#39;stp1&#39;},              {label: &#39;Step Two&#39;, id: &#39;stp2&#39;},              {label: &#39;Step Three&#39;, id: &#39;stp3&#39;},              {label: &#39;Step Four&#39;, id: &#39;stp4&#39;},              {label: &#39;Step Five&#39;, id: &#39;stp5&#39;}]);      this.currentStepValueText = function () {        return ($(&quot;#train&quot;).ojTrain(&quot;getStep&quot;, this.currentStepValue())).label;      };    };        return new TrainViewModel();  });But what happens when our panels get too huge? Or what if each panel should do something different? Combining all of the code for those panels into one view and viewModel could get messy quick, and maintaining the code gets harder and harder if it’s all jumbled together in one file.ojModules to the rescueJET’s ojModule Binding lets us break up our code into smaller components. With some creative directory naming and computed variables we can even gather everything together so that it’s easy to see where the code for our train panels is stored.Let’s start by creating a folder for the modules just to keep things organized. Right-click on viewModels and choose New &gt;&gt; Folder and create a myTrain-modules folder. Do the same for the views folder and use the same myTrain-modules name.In these folders we need some simple placeholder content for now, but we’ll wire it up with a proper viewModel for future use. We could set up a view-only ojModule by passing a {viewName: 'viewfilename'} object instead of the moduleName below, but this way we’ll have a backing viewModel in case we need it later. In the viewModels/myTrain-modules folder create a simple stp1.js file with a define() block that returns a viewModel function, just like you would for a new tab in the QuickStart (which after all uses ojModule!). In the views/myTrain-modules folder create a corresponding stp1.html file with some HTML for our first panel. Here’s some suggested code that will get you going:views/myTrain-modules/stp1.html&lt;h2&gt;step1&lt;/h2&gt;  &lt;div class=&quot;oj-flex&quot;&gt;    &lt;div class=&quot;oj-panel oj-panel-alt2 oj-panel-shadow-md oj-margin&quot; style=&quot;width: 100%&quot;&gt;      &lt;span data-bind=&quot;text: message&quot;&gt;&lt;/span&gt;    &lt;/div&gt;  &lt;/div&gt;viewModels/myTrain-modules/stp1.js/** * step1 module */define([&#39;ojs/ojcore&#39;, &#39;knockout&#39;], function (oj, ko) {  /**   * The view model for the main content view template   */  function step1ContentViewModel() {    var self = this;    self.message = ko.observable(&quot;this is the modular step one panel&quot;);  }      return step1ContentViewModel;});We have five steps in our cookbook sample, so go ahead and duplicate the stp1 files to stp2, stp3, stp4 and stp5 and make edits accordingly to the viewModels’ self.message observable.Call your submodules from your moduleNow we need to modify the ojTrain code so that it uses our module content. We’ll hard-code stp1 first to make sure all is in place, and after that we’ll make the module dynamically load depending on what step in the train we’re on.Since we’ll be using ojModule in the view’s HTML, we need to add 'ojs/ojmodule' to the define block for our viewModels/ojTrain.js file:define([&#39;ojs/ojcore&#39;, &#39;knockout&#39;, &#39;jquery&#39;, &#39;ojs/ojknockout&#39;, &#39;ojs/ojtrain&#39;, &#39;ojs/ojbutton&#39;, &#39;ojs/ojmodule&#39;],    function (oj, ko, $)    { ...With that in place we can modify the views/ojTrain.html file to pull in the step 1 file as a module. Replace the &lt;h3 id=\"currentStepText\"... code with a &lt;div&gt; that is data-bound to our module. Again, we’re hardcoding with a string here; we’ll make it dependent on the train’s current step in the next section:...&lt;br/&gt;&lt;div data-bind=&quot;ojModule: &#39;myTrain-modules/stp1&#39;&quot;&gt;&lt;/div&gt;&lt;br/&gt;...So now you should see new content under the train, but there’s that problem that the content is the same no matter which step of the train we’re on. We need to make our ojModule dependent upon the ojTrain’s current state, and for that we need a computed observable.Make it change based on the current train stepInstead of that hard-coded string in the ojModule data-bind, we can have an observable in the viewModel tell us the path to the module. If we make that observable a pureComputed, it will always have the right value for the ojModule call even as we click through the steps of our train. The cookbook code for the Train is already storing its selected: state in a currentStepValue observable, and we conveniently named our module filenames with the same naming convention as the currentStepValue. We just need to prepend the module directory and put it in a function that will return the live value of the ojTrain’s current step....this.modulePath = ko.pureComputed(  function () {    return (&#39;myTrain-module/&#39; + self.currentStepValue());  });Last, update the views/ojTrain.html binding for ojModule to point to our ModulePath pureComputed observable instead of the hard-coded string above.final views/ojTrain.html&lt;h1&gt;ojTrain Content&lt;/h1&gt;&lt;div id=&quot;train-container&quot; &gt;  &lt;div id=&quot;train&quot; class=&quot;oj-train-stretch&quot; style=&quot;max-width:700px;margin-left:auto;margin-right:auto;&quot;    data-bind=&quot;ojComponent:{    component: &#39;ojTrain&#39;,     selected: currentStepValue,     steps: stepArray}&quot;&gt;&lt;/div&gt;  &lt;br/&gt;  &lt;div data-bind=&quot;ojModule: modulePath&quot;&gt;&lt;/div&gt;  &lt;br/&gt;&lt;/div&gt;final viewModels/ojTrain.jsdefine([&#39;ojs/ojcore&#39;, &#39;knockout&#39;, &#39;jquery&#39;, &#39;ojs/ojknockout&#39;, &#39;ojs/ojtrain&#39;, &#39;ojs/ojbutton&#39;, &#39;ojs/ojmodule&#39;],  function (oj, ko, $)  {    function TrainViewModel() {      var self = this;      this.currentStepValue = ko.observable(&#39;stp1&#39;);      this.stepArray =          ko.observableArray(             [{label: &#39;Step One&#39;, id: &#39;stp1&#39;},              {label: &#39;Step Two&#39;, id: &#39;stp2&#39;},              {label: &#39;Step Three&#39;, id: &#39;stp3&#39;},              {label: &#39;Step Four&#39;, id: &#39;stp4&#39;},              {label: &#39;Step Five&#39;, id: &#39;stp5&#39;}]);      this.modulePath = ko.pureComputed(        function () {          return (&#39;myTrain-modules/&#39; + self.currentStepValue());        }      );    };    return new TrainViewModel();  });Finished productWhen you click the steps in the train it updates the selected currentStepValue, which creates a new function for the modulePath, which is used to load the correct ojModule. Click another step in the train, and the beautiful process repeats.",
      "content_html": "<p>The JET Cookbook has a <a href=\"http://www.oracle.com/webfolder/technetwork/jet/uiComponents-ojModule-simpleNavigation.html\">section on ojModule</a> and how to use it to split your code up into components. Here’s an example of breaking up code to make it modular and easier to understand in the context of an Oracle JET Train. </p><p>The <a href=\"http://www.oracle.com/webfolder/technetwork/jet/uiComponents-train-basic.html\">ojTrain</a> is a great way of leading a user through the steps of a process, letting them know where there are, where they’ve been, and how much is left to do. In the cookbook sample code, you can see it’s possible to stick all of the code for all panels of the train into one viewModel. </p><div class=\"full zoomable\"><img src=\"/images/20160223/ojTrainCookbook.png\" /></div><p>Here’s the code that creates that tab, modified from the Cookbook code to work with the JET QuickStart:</p><h4 id=\"viewsojtrainhtml\">views/ojTrain.html</h4><div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;h1&gt;</span>ojTrain Content<span class=\"nt\">&lt;/h1&gt;</span><span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">&quot;train-container&quot;</span> <span class=\"nt\">&gt;</span>  <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">&quot;train&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;oj-train-stretch&quot;</span> <span class=\"na\">style=</span><span class=\"s\">&quot;max-width:700px;margin-left:auto;margin-right:auto;&quot;</span>    <span class=\"na\">data-bind=</span><span class=\"s\">&quot;ojComponent:{</span><span class=\"s\">    component: &#39;ojTrain&#39;, </span><span class=\"s\">    selected: currentStepValue, </span><span class=\"s\">    steps: stepArray}&quot;</span><span class=\"nt\">&gt;&lt;/div&gt;</span>  <span class=\"nt\">&lt;br/&gt;</span>  <span class=\"nt\">&lt;h3</span> <span class=\"na\">id=</span><span class=\"s\">&quot;currentStepText&quot;</span>    <span class=\"na\">data-bind=</span><span class=\"s\">&quot;text: &#39;You are on &#39; + currentStepValueText()&quot;</span>     <span class=\"na\">style=</span><span class=\"s\">&quot;text-align: center&quot;</span><span class=\"nt\">&gt;</span>  <span class=\"nt\">&lt;/h3&gt;</span>  <span class=\"nt\">&lt;br/&gt;</span><span class=\"nt\">&lt;/div&gt;</span></code></pre></div><h4 id=\"viewmodelsojtrainjs\">viewModels/ojTrain.js</h4><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">define</span><span class=\"p\">([</span><span class=\"s1\">&#39;ojs/ojcore&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;knockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;jquery&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojknockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojtrain&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojbutton&#39;</span><span class=\"p\">],</span>  <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">oj</span><span class=\"p\">,</span> <span class=\"nx\">ko</span><span class=\"p\">,</span> <span class=\"nx\">$</span><span class=\"p\">)</span>  <span class=\"p\">{</span>    <span class=\"kd\">function</span> <span class=\"nx\">TrainViewModel</span><span class=\"p\">()</span> <span class=\"p\">{</span>      <span class=\"kd\">var</span> <span class=\"nx\">self</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">currentStepValue</span> <span class=\"o\">=</span> <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">observable</span><span class=\"p\">(</span><span class=\"s1\">&#39;stp1&#39;</span><span class=\"p\">);</span>      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">stepArray</span> <span class=\"o\">=</span>          <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">observableArray</span><span class=\"p\">(</span>             <span class=\"p\">[{</span><span class=\"nx\">label</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Step One&#39;</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;stp1&#39;</span><span class=\"p\">},</span>              <span class=\"p\">{</span><span class=\"nx\">label</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Step Two&#39;</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;stp2&#39;</span><span class=\"p\">},</span>              <span class=\"p\">{</span><span class=\"nx\">label</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Step Three&#39;</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;stp3&#39;</span><span class=\"p\">},</span>              <span class=\"p\">{</span><span class=\"nx\">label</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Step Four&#39;</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;stp4&#39;</span><span class=\"p\">},</span>              <span class=\"p\">{</span><span class=\"nx\">label</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Step Five&#39;</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;stp5&#39;</span><span class=\"p\">}]);</span>      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">currentStepValueText</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">&quot;#train&quot;</span><span class=\"p\">).</span><span class=\"nx\">ojTrain</span><span class=\"p\">(</span><span class=\"s2\">&quot;getStep&quot;</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">currentStepValue</span><span class=\"p\">())).</span><span class=\"nx\">label</span><span class=\"p\">;</span>      <span class=\"p\">};</span>    <span class=\"p\">};</span>        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">TrainViewModel</span><span class=\"p\">();</span>  <span class=\"p\">});</span></code></pre></div><p>But what happens when our panels get too huge? Or what if each panel should do something different? Combining all of the code for those panels into one view and viewModel could get messy quick, and maintaining the code gets harder and harder if it’s all jumbled together in one file.</p><h2 id=\"ojmodules-to-the-rescue\">ojModules to the rescue</h2><p>JET’s ojModule Binding lets us break up our code into smaller components. With some creative directory naming and computed variables we can even gather everything together so that it’s easy to see where the code for our train panels is stored.</p><p>Let’s start by creating a folder for the modules just to keep things organized. Right-click on viewModels and choose <kbd>New &gt;&gt; Folder</kbd> and create a <code>myTrain-modules</code> folder. Do the same for the views folder and use the same <code>myTrain-modules</code> name.</p><div class=\"full zoomable\"><img src=\"/images/20160223/newmyTrainFolders.png\" /></div><p>In these folders we need some simple placeholder content for now, but we’ll wire it up with a proper viewModel for future use. We could set up a view-only ojModule by passing a <code>{viewName: 'viewfilename'}</code> object instead of the moduleName below, but this way we’ll have a backing viewModel in case we need it later. </p><p>In the <code>viewModels/myTrain-modules</code> folder create a simple <code>stp1.js</code> file with a <code>define()</code> block that returns a viewModel function, just like you would for a new tab in the QuickStart (which after all uses ojModule!). In the <code>views/myTrain-modules</code> folder create a corresponding <code>stp1.html</code> file with some HTML for our first panel. Here’s some suggested code that will get you going:</p><h4 id=\"viewsmytrain-modulesstp1html\">views/myTrain-modules/stp1.html</h4><div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;h2&gt;</span>step1<span class=\"nt\">&lt;/h2&gt;</span>  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;oj-flex&quot;</span><span class=\"nt\">&gt;</span>    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&quot;oj-panel oj-panel-alt2 oj-panel-shadow-md oj-margin&quot;</span> <span class=\"na\">style=</span><span class=\"s\">&quot;width: 100%&quot;</span><span class=\"nt\">&gt;</span>      <span class=\"nt\">&lt;span</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;text: message&quot;</span><span class=\"nt\">&gt;&lt;/span&gt;</span>    <span class=\"nt\">&lt;/div&gt;</span>  <span class=\"nt\">&lt;/div&gt;</span></code></pre></div><h4 id=\"viewmodelsmytrain-modulesstp1js\">viewModels/myTrain-modules/stp1.js</h4><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"cm\">/**</span><span class=\"cm\"> * step1 module</span><span class=\"cm\"> */</span><span class=\"nx\">define</span><span class=\"p\">([</span><span class=\"s1\">&#39;ojs/ojcore&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;knockout&#39;</span><span class=\"p\">],</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">oj</span><span class=\"p\">,</span> <span class=\"nx\">ko</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"cm\">/**</span><span class=\"cm\">   * The view model for the main content view template</span><span class=\"cm\">   */</span>  <span class=\"kd\">function</span> <span class=\"nx\">step1ContentViewModel</span><span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"kd\">var</span> <span class=\"nx\">self</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>    <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">observable</span><span class=\"p\">(</span><span class=\"s2\">&quot;this is the modular step one panel&quot;</span><span class=\"p\">);</span>  <span class=\"p\">}</span>      <span class=\"k\">return</span> <span class=\"nx\">step1ContentViewModel</span><span class=\"p\">;</span><span class=\"p\">});</span></code></pre></div><p>We have five steps in our cookbook sample, so go ahead and duplicate the stp1 files to stp2, stp3, stp4 and stp5 and make edits accordingly to the viewModels’ <code>self.message</code> observable.</p><div class=\"full zoomable\"><img src=\"/images/20160223/fiveStepFiles.png\" /></div><h2 id=\"call-your-submodules-from-your-module\">Call your submodules from your module</h2><p>Now we need to modify the ojTrain code so that it uses our module content. We’ll hard-code stp1 first to make sure all is in place, and after that we’ll make the module dynamically load depending on what step in the train we’re on.</p><p>Since we’ll be using ojModule in the view’s HTML, we need to add <code>'ojs/ojmodule'</code> to the define block for our <code>viewModels/ojTrain.js</code> file:</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">define</span><span class=\"p\">([</span><span class=\"s1\">&#39;ojs/ojcore&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;knockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;jquery&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojknockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojtrain&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojbutton&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojmodule&#39;</span><span class=\"p\">],</span>    <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">oj</span><span class=\"p\">,</span> <span class=\"nx\">ko</span><span class=\"p\">,</span> <span class=\"nx\">$</span><span class=\"p\">)</span>    <span class=\"p\">{</span> <span class=\"p\">...</span></code></pre></div><p>With that in place we can modify the <code>views/ojTrain.html</code> file to pull in the step 1 file as a module. Replace the <code>&lt;h3 id=\"currentStepText\"...</code> code with a <code>&lt;div&gt;</code> that is data-bound to our module. Again, we’re hardcoding with a string here; we’ll make it dependent on the train’s current step in the next section:</p><div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\">...<span class=\"nt\">&lt;br/&gt;</span><span class=\"nt\">&lt;div</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;ojModule: &#39;myTrain-modules/stp1&#39;&quot;</span><span class=\"nt\">&gt;&lt;/div&gt;</span><span class=\"nt\">&lt;br/&gt;</span>...</code></pre></div><p>So now you should see new content under the train, but there’s that problem that the content is the same no matter which step of the train we’re on. We need to make our ojModule dependent upon the ojTrain’s current state, and for that we need a computed observable.</p><div class=\"full zoomable\"><img src=\"/images/20160223/almostThereNoDynamicSwitchingYet.png\" /></div><h2 id=\"make-it-change-based-on-the-current-train-step\">Make it change based on the current train step</h2><p>Instead of that hard-coded string in the ojModule <code>data-bind</code>, we can have an observable in the viewModel tell us the path to the module. If we make that observable a <a href=\"http://knockoutjs.com/documentation/computed-pure.html\">pureComputed</a>, it will always have the right value for the ojModule call even as we click through the steps of our train. </p><p>The cookbook code for the Train is already storing its <code>selected:</code> state in a <code>currentStepValue</code> observable, and we conveniently named our module filenames with the same naming convention as the currentStepValue. We just need to prepend the module directory and put it in a function that will return the live value of the ojTrain’s current step.</p><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"p\">...</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">modulePath</span> <span class=\"o\">=</span> <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">pureComputed</span><span class=\"p\">(</span>  <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"s1\">&#39;myTrain-module/&#39;</span> <span class=\"o\">+</span> <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">currentStepValue</span><span class=\"p\">());</span>  <span class=\"p\">}</span><span class=\"p\">);</span></code></pre></div><p>Last, update the <code>views/ojTrain.html</code> binding for ojModule to point to our ModulePath pureComputed observable instead of the hard-coded string above.</p><h4 id=\"final-viewsojtrainhtml\">final views/ojTrain.html</h4><div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><span class=\"nt\">&lt;h1&gt;</span>ojTrain Content<span class=\"nt\">&lt;/h1&gt;</span><span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">&quot;train-container&quot;</span> <span class=\"nt\">&gt;</span>  <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">&quot;train&quot;</span> <span class=\"na\">class=</span><span class=\"s\">&quot;oj-train-stretch&quot;</span> <span class=\"na\">style=</span><span class=\"s\">&quot;max-width:700px;margin-left:auto;margin-right:auto;&quot;</span>    <span class=\"na\">data-bind=</span><span class=\"s\">&quot;ojComponent:{</span><span class=\"s\">    component: &#39;ojTrain&#39;, </span><span class=\"s\">    selected: currentStepValue, </span><span class=\"s\">    steps: stepArray}&quot;</span><span class=\"nt\">&gt;&lt;/div&gt;</span>  <span class=\"nt\">&lt;br/&gt;</span>  <span class=\"nt\">&lt;div</span> <span class=\"na\">data-bind=</span><span class=\"s\">&quot;ojModule: modulePath&quot;</span><span class=\"nt\">&gt;&lt;/div&gt;</span>  <span class=\"nt\">&lt;br/&gt;</span><span class=\"nt\">&lt;/div&gt;</span></code></pre></div><h4 id=\"final-viewmodelsojtrainjs\">final viewModels/ojTrain.js</h4><div class=\"highlight\"><pre><code class=\"language-js\" data-lang=\"js\"><span class=\"nx\">define</span><span class=\"p\">([</span><span class=\"s1\">&#39;ojs/ojcore&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;knockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;jquery&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojknockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojtrain&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojbutton&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojmodule&#39;</span><span class=\"p\">],</span>  <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">oj</span><span class=\"p\">,</span> <span class=\"nx\">ko</span><span class=\"p\">,</span> <span class=\"nx\">$</span><span class=\"p\">)</span>  <span class=\"p\">{</span>    <span class=\"kd\">function</span> <span class=\"nx\">TrainViewModel</span><span class=\"p\">()</span> <span class=\"p\">{</span>      <span class=\"kd\">var</span> <span class=\"nx\">self</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">currentStepValue</span> <span class=\"o\">=</span> <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">observable</span><span class=\"p\">(</span><span class=\"s1\">&#39;stp1&#39;</span><span class=\"p\">);</span>      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">stepArray</span> <span class=\"o\">=</span>          <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">observableArray</span><span class=\"p\">(</span>             <span class=\"p\">[{</span><span class=\"nx\">label</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Step One&#39;</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;stp1&#39;</span><span class=\"p\">},</span>              <span class=\"p\">{</span><span class=\"nx\">label</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Step Two&#39;</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;stp2&#39;</span><span class=\"p\">},</span>              <span class=\"p\">{</span><span class=\"nx\">label</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Step Three&#39;</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;stp3&#39;</span><span class=\"p\">},</span>              <span class=\"p\">{</span><span class=\"nx\">label</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Step Four&#39;</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;stp4&#39;</span><span class=\"p\">},</span>              <span class=\"p\">{</span><span class=\"nx\">label</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Step Five&#39;</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;stp5&#39;</span><span class=\"p\">}]);</span>      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">modulePath</span> <span class=\"o\">=</span> <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">pureComputed</span><span class=\"p\">(</span>        <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>          <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"s1\">&#39;myTrain-modules/&#39;</span> <span class=\"o\">+</span> <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">currentStepValue</span><span class=\"p\">());</span>        <span class=\"p\">}</span>      <span class=\"p\">);</span>    <span class=\"p\">};</span>    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">TrainViewModel</span><span class=\"p\">();</span>  <span class=\"p\">});</span></code></pre></div><h2 id=\"finished-product\">Finished product</h2><p>When you click the steps in the train it updates the selected currentStepValue, which creates a new function for the modulePath, which is used to load the correct ojModule. Click another step in the train, and the beautiful process repeats.</p><div class=\"full zoomable\"><img src=\"/images/20160223/modularTrain.gif\" /></div>"
    },
  
    {
      "title": "Creating Oracle Sales Cloud Calendar Activities Via APEX REST Calls",
      "date_published": "2016-01-21T00:00:00+00:00",
      "date_modified": "2016-01-21T00:00:00+00:00",
      "id": "/2016/01/21/creating-osc-calendar-activity-rest/",
      "url": "http://www.likeahouseafire.com/2016/01/21/creating-osc-calendar-activity-rest/",
      
      
      
      "tags": ["APEX","Sales Cloud","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Notes gleaned from building APEX RESTful calls into Fusion",
      "content_text": "Recently I used Application Express 5.0’s “Group Calendar” packaged app to simulate a scheduling system.  We wanted to show how external systems can be launched from within Sales Cloud and then turn around and create meeting appointments via RESTful web service calls back into Fusion, and the packaged app was the quickest way to prototype a 3rd-party “scheduling” system that can make REST calls. I hijacked the Create Event button procedure that already existed in this packaged app, adding functionality to have the Fusion APIs create a corresponding meeting in Sales Cloud and attaching a contact to the appointment.Here are some random notes picked up during this assignment for refining on future projects:(tl;dr:  you can use APEX to do cool REST calls and query/create via Fusion APIs)  R10 RESTful documentation  Using APEX to make the RESTful calls  Tests Tooling  Headers for Your REST calls  Activities are different  Whittle down your response payload  Watch out for too-huge responses in APEX  Adding Contacts to a meeting are a two-phase REST call  APEX will let you do random GETs  Mirroring the existing APEX codeR10 RESTful documentationThe new R10 RESTful APIs are documented in a fancy new format, as opposed to the SOAP API format that is available in the OER.There are really good R10 RESTful API intro write-ups on the FADevRel blog. There are also some older articles on integrating to Fusion with APEX, and although the Fusion blog entries are mostly SOAP-oriented there is at least one newer one about creating a REST request in PL/SQL (albeit not to Fusion; read on for that!).And there’s the monstrously-large Oracle Sales CloudUsing RESTful Web Services whitepaper available on MOS.Using APEX to make the RESTful callsI used apex_web_service.make_rest_request to send my requests back to Sales Cloud from a PL/SQL package so that it would fit in with the existing scaffolding in the packaged app. I originally wanted to model the Fusion RESTful APIs as Web Service References in Application Express and even got the Fusion API set up as a APEX Shared Component, but ended up rewriting the call as a PL/SQL package to match the existing Group Calendar code.Still, the APEX Web Service References has a nice test harness to let tweak your headers and see the JSON response from your call. It helped me validate that the payload I was creating worked from APEX. Click here for a 3.4MB animated GIF of the testing harness proving it could create an appointment in Sales Cloud.Tests ToolingFor a RESTful client to draft that payload I used Paw as a change of pace from Postman (I like them both, Paw was just something new to try). These tools were quicker for iterating over changes I made to the request payload.When I went to implement the call in APEX as a PL/SQL package, I also created a logging table that I inserted the response (as APEX saw it) in a timestamped row. This helped me troubleshoot the more complicated, multi-stage calls that came later. --select dbms_metadata.get_ddl(&#39;TABLE&#39;,&#39;PDT_OSC_CAL_API_LOG&#39;) from dual;  CREATE TABLE &quot;PDT_OSC_CAL_API_LOG&quot; ( &quot;RESPONSE_MSG&quot; CLOB, &quot;CREATED&quot; DATE, &quot;CREATED_BY&quot; VARCHAR2(100), &quot;ID&quot; NUMBER, &quot;P_BODY&quot; VARCHAR2(4000), CONSTRAINT &quot;PDT_OSC_CAL_API_PK&quot; PRIMARY KEY (&quot;ID&quot;) ) --select dbms_metadata.get_ddl(&#39;TRIGGER&#39;,&#39;BI_PDT_OSC_CAL_API_LOG&#39;) from dual;  CREATE OR REPLACE TRIGGER &quot;BI_PDT_OSC_CAL_API_LOG&quot; before insert on &quot;PDT_OSC_CAL_API_LOG&quot; for each row  begin    if :NEW.&quot;ID&quot; is null then      select to_number(sys_guid(),&#39;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#39;) into :new.id from dual;     :NEW.&quot;CREATED&quot; := sysdate;      :NEW.&quot;CREATED_BY&quot; := V(&#39;APP_USER&#39;);   end if;  end;  ALTER TRIGGER &quot;BI_PDT_OSC_CAL_API_LOG&quot; ENABLEHeaders for Your REST callsOne of the first things I learned was that the R10 Fusion RESTful APIs require a special Content-Type header: application/vnd.oracle.adf.resourceitem+json. You also need to send some form of Authorization header: I used Basic Auth for testing but for the APEX app I could use Bearer Auth because we passed in a JWT token on the URL generated in Sales Cloud pointing at our APEX app.-- Headers necessary for Fusion RESTful API      apex_web_service.g_request_headers(1).name := &#39;Content-Type&#39;;      apex_web_service.g_request_headers(1).Value := &#39;application/vnd.oracle.adf.resourceitem+json&#39;;      apex_web_service.g_request_headers(2).name := &#39;Authorization&#39;;      apex_web_service.g_request_headers(2).Value := &#39;Bearer &#39; || p_jwt_token;Activities are differentSince I wanted to create a meeting appointment, a little background on the Sales Cloud Activity model was helpful. I used GETs to query existing meeting appointments and figure out the formats for fields (note the ISO 8601 date format and the Base64-encoded description). I was able to pare down a POST’s payload body sent to /salesApi/resources/latest/activities to be just a few fields (not shown are the two headers: Basic Auth and Content-type: application/vnd.oracle.adf.resourceitem+json):{  &quot;ActivityEndDate&quot;: &quot;2016-01-08T19:30:00-08:00&quot;,  &quot;Subject&quot;: &quot;Test RESTful Appointment&quot;,  &quot;ActivityFunctionCode&quot;: &quot;APPOINTMENT&quot;,  &quot;ActivityTypeCode&quot;: &quot;MEETING&quot;,  &quot;ActivityStartDate&quot;: &quot;2016-01-08T18:30:00-08:00&quot;,  &quot;OwnerId&quot;: 300000047342468,  &quot;ActivityDescription&quot;: &quot;SGVyZSBpcyBhbiBhY3Rpdml0eSBkZXNjcmlwdGlvbiB0aGF0IEkgY291bGQgY3JlYXRlIGluIHRoZSBzYW1lIHJlcXVlc3QgYXMgdGhlIGFjdGl2aXR5IGl0c2VsZjsgSSBkaWRuJ3QgaGF2ZSB0byBtYWtlIGEgc2Vjb25kIGNhbGwgd2l0aCB0aGUganVzdC1jcmVhdGVkIGFjdGl2aXR5IElE&quot;}Whittle down your response payloadThe response object that comes back from a Fusion REST call is huge, but it doesn’t have to be. Two query parameters can help: ?onlyData (so you don’t get all the nested links[] arrays) and ?fields=Attribute1,Attribute2 (so that your main object only has the fields you’re looking for). Watch out for too-huge responses in APEXThis response pruning ability was handy, because there’s a bug in APEX’s APEX_JSON_PARSE when running on 11g that I ran into on our DBSchema instance. JSON responses larger than 8191 characters failed to parse, even though I could see a valid response was coming back in my log table. Turns out it’s really easy to get larger-than 8K+ responses from a Fusion REST call.Adding Contacts to a meeting are a two-phase REST callI needed to parse the CLOB response as JSON because I wanted to tease out the ActivityNumber field and use it to build the URL for a follow-up POST call. Our flow into the APEX app was to start from a Contacts screen, so in addition to the JWT Token we also send in the Contact_ID of the Fusion record we were looking at.  When we created the appointment meeting via REST we also wanted to add the Contact as an attachment. This necessitated a two-part REST call: the first to create the activity and the second to use the returned ID in another POST URL to create an activity contact at /salesApi/resources/latest/activities/{ActivityNumber}/child/ActivityContact. The body of that POST was only the Contact_ID that we were passed in as a parameter on the URL generated by App Composer.APEX will let you do random GETsSince I had been carrying that Contact_ID around from screen to screen in APEX, I thought a nice touch was to call back in to Fusion to pick up some additional details about the contact, such as full name and email address. I used an After Header Process (after Load Data) on the APEX page to pre-populate two fields with live Fusion contact data. It might make more sense to pull Fusion data in differently for use in other APEX pages, but the one-off GET did the trick for this APEX form.DECLARE   l_response_clob    clob;BEGIN      -- Headers necessary for Fusion RESTful API      apex_web_service.g_request_headers(1).name := &#39;Content-Type&#39;;      apex_web_service.g_request_headers(1).Value := &#39;application/vnd.oracle.adf.resourceitem+json&#39;;      apex_web_service.g_request_headers(2).name := &#39;Authorization&#39;;      apex_web_service.g_request_headers(2).Value := &#39;Bearer &#39; || :JWT_TOKEN;      -- make the request using parameters      l_response_clob := apex_web_service.make_rest_request(              p_url =&gt; &#39;https://adc2-fap1370-crm.oracledemos.com/crmCommonApi/resources/latest/contacts?q=PartyId=&#39; || :CONTACT_ID || &#39;&amp;onlyData&amp;fields=ContactName,EmailAddress&#39;,              p_http_method =&gt; &#39;GET&#39;      );      -- log it      insert into PDT_OSC_CAL_API_LOG(RESPONSE_MSG, P_BODY)      values(l_response_clob, &#39;jwt: &#39; || :JWT_TOKEN ||&#39; contact_id: &#39; || :CONTACT_ID);      commit;      -- parse the response to put contact data into APEX fields      apex_json.parse(l_response_clob);      :P10_CONTACT_PERSON := apex_json.get_varchar2(p_path =&gt; &#39;items[1].ContactName&#39;);       :P10_CONTACT_EMAIL := apex_json.get_varchar2(p_path =&gt; &#39;items[1].EmailAddress&#39;);ENDMirroring the existing APEX codeFinally, here’s my custom package that mirrored the APEX process that runs when CREATE was pressed on the existing APEX page. I just added a call to my custom package right after the call to EBA_ca_api.create_event, using the same parameters.create or replace package body PDT_OSC_cal_apias--this signature mirrors the create_event in the Group Calendar packaged app; I didn&#39;t end up using all these fieldsprocedure create_event (   p_event_name       varchar2,   p_type_id          number,   p_new_event_type   varchar2,   p_event_date_time  timestamp with local time zone,   p_duration         number,   p_event_desc       varchar2,   p_contact_person   varchar2,   p_contact_email    varchar2,   p_display_time     varchar2,   p_location         varchar2,   p_link_name_1      varchar2,   p_link_url_1       varchar2,   p_link_name_2      varchar2,   p_link_url_2       varchar2,   p_link_name_3      varchar2,   p_link_url_3       varchar2,   p_tags             varchar2 default null,   -- here are two fields I added to the signature: they are passed in as parameters on the Sales Cloud-generated link and I passed them around as application items   p_contact_id       varchar2,   p_jwt_token        varchar2,   --   p_recur_flag       varchar2,   p_recur_freq       varchar2,   p_recur_end_date   timestamp with local time zone )is   l_event_type_id    number  default null;   l_series_id        number;   l_response_clob    clob;   --convert p_duration (hours) into timestamp for use in p_body   l_event_end_date   timestamp with local time zone := p_event_date_time + (p_duration * 1/(24));   --clean up and convert p_tags into Base64 for use in ActivityDescription   --alas the REPLACE()s make newlines if needed    --but you cant have multi-line JSON strings and something in the cast chain was splitting and inserting CRLFs   l_activitydesc     varchar2(32767) := REPLACE(                              REPLACE(                               utl_raw.cast_to_varchar2(utl_encode.base64_encode(utl_raw.cast_to_raw(&#39;Interest in CSG: &#39;|| REPLACE(p_tags, &#39;:&#39;, &#39;, &#39;)))),                               CHR(13),                               &#39;\\n&#39; ),                           CHR(10),                            &#39;&#39; ) ;   l_pbody            varchar2(4000);   l_new_activity_id  varchar2(30);begin          if p_recur_flag = &#39;Y&#39; then      -- TODO: write recurring event logic in the future; code structure was &#39;borrowed&#39; liberally from the APEX packaged app codebase      NULL;   else            -- Headers necessary for Fusion RESTful API      apex_web_service.g_request_headers(1).name := &#39;Content-Type&#39;;      apex_web_service.g_request_headers(1).Value := &#39;application/vnd.oracle.adf.resourceitem+json&#39;;      apex_web_service.g_request_headers(2).name := &#39;Authorization&#39;;      apex_web_service.g_request_headers(2).Value := &#39;Bearer &#39; || p_jwt_token;      --build the payload, hardcoded to go to lisa.jones&#39; calendar because I didn&#39;t build out lookups in APEX against live Fusion OwnerIds      l_pbody := &#39;{                &quot;ActivityEndDate&quot;: &quot;&#39; || to_char(l_event_end_date, &#39;yyyy-mm-dd&#39;) ||&#39;T&#39;|| to_char(l_event_end_date, &#39;hh24:mi:ss&#39;) || &#39;-08:00&quot;,                &quot;Subject&quot;: &quot;&#39; || p_event_name || &#39;&quot;,                &quot;ActivityFunctionCode&quot;: &quot;APPOINTMENT&quot;,                &quot;ActivityTypeCode&quot;: &quot;MEETING&quot;,                &quot;ActivityStartDate&quot;: &quot;&#39; || to_char(p_event_date_time, &#39;yyyy-mm-dd&#39;) ||&#39;T&#39;|| to_char(p_event_date_time, &#39;hh24:mi:ss&#39;) || &#39;-08:00&quot;,                &quot;OwnerId&quot;: 300000047342468,                &quot;ActivityDescription&quot;: &quot;&#39;|| l_activitydesc ||&#39;&quot;              }&#39;;      -- make the request using ?onlyData parameter      l_response_clob := apex_web_service.make_rest_request(              p_url =&gt; &#39;https://origin-adc2-fap1370-crm.oracledemos.com/salesApi/resources/latest/activities?onlyData&#39;,              p_http_method =&gt; &#39;POST&#39;,              p_body  =&gt; l_pbody      );      -- log it      insert into PDT_OSC_CAL_API_LOG(RESPONSE_MSG, P_BODY)      values(l_response_clob, l_pbody);      commit;      -- parse the response so we can attach a contact      apex_json.parse(l_response_clob);      l_new_activity_id := apex_json.get_varchar2(p_path =&gt; &#39;ActivityNumber&#39;);      -- make the follow-up POST request to add a contactID to the just-created activity      l_pbody := &#39;{                  &quot;ContactId&quot; : &#39; || p_contact_id || &#39;      }&#39;;      l_response_clob := apex_web_service.make_rest_request(              p_url =&gt; &#39;https://origin-adc2-fap1370-crm.oracledemos.com/salesApi/resources/latest/activities/&#39; || l_new_activity_id || &#39;/child/ActivityContact?onlyData&#39;,              p_http_method =&gt; &#39;POST&#39;,              p_body  =&gt; l_pbody      );            -- log it      insert into PDT_OSC_CAL_API_LOG(RESPONSE_MSG, P_BODY)      values(l_response_clob, l_pbody);         end if;   commit;end create_event;end PDT_OSC_cal_api;",
      "content_html": "<p>Recently I used Application Express 5.0’s “Group Calendar” packaged app to simulate a scheduling system.  We wanted to show how external systems can be launched from within Sales Cloud and then turn around and create meeting appointments via RESTful web service calls back into Fusion, and the packaged app was the quickest way to prototype a 3rd-party “scheduling” system that can make REST calls. </p><p>I hijacked the Create Event button procedure that already existed in this packaged app, adding functionality to have the Fusion APIs create a corresponding meeting in Sales Cloud and attaching a contact to the appointment.</p><p>Here are some random notes picked up during this assignment for refining on future projects:</p><p>(tl;dr:  you can use APEX to do cool REST calls and query/create via Fusion APIs)</p><ul id=\"markdown-toc\">  <li><a href=\"#r10-restful-documentation\">R10 RESTful documentation</a></li>  <li><a href=\"#using-apex-to-make-the-restful-calls\">Using APEX to make the RESTful calls</a></li>  <li><a href=\"#tests-tooling\">Tests Tooling</a></li>  <li><a href=\"#headers-for-your-rest-calls\">Headers for Your REST calls</a></li>  <li><a href=\"#activities-are-different\">Activities are different</a></li>  <li><a href=\"#whittle-down-your-response-payload\">Whittle down your response payload</a></li>  <li><a href=\"#watch-out-for-too-huge-responses-in-apex\">Watch out for too-huge responses in APEX</a></li>  <li><a href=\"#adding-contacts-to-a-meeting-are-a-two-phase-rest-call\">Adding Contacts to a meeting are a two-phase REST call</a></li>  <li><a href=\"#apex-will-let-you-do-random-gets\">APEX will let you do random GETs</a></li>  <li><a href=\"#mirroring-the-existing-apex-code\">Mirroring the existing APEX code</a></li></ul><h2 id=\"r10-restful-documentation\">R10 RESTful documentation</h2><p>The new <a href=\"https://docs.oracle.com/cloud/latest/salescs_gs/FAAPS/api-Activities.html\">R10 RESTful APIs are documented</a> in a fancy new format, as opposed to the SOAP API format that is <a href=\"https://fusionappsoer.oracle.com/oer/index.jsp\">available in the OER</a>.</p><p>There are <a href=\"https://blogs.oracle.com/fadevrel/entry/r10_sales_rest_api_concepts\">really good R10 RESTful API intro write-ups</a> on the FADevRel blog. There are also some <a href=\"https://blogs.oracle.com/fadevrel/tags/apex\">older articles on integrating to Fusion with APEX</a>, and although the Fusion blog entries are mostly SOAP-oriented there is at least one newer one about <a href=\"https://blogs.oracle.com/fadevrel/entry/integrating_with_fusion_application_using18\">creating a REST request in PL/SQL</a> (albeit not to Fusion; read on for that!).</p><p>And there’s the monstrously-large <a href=\"https://support.oracle.com/epmos/faces/DocContentDisplay?id=1981941.1\">Oracle Sales CloudUsing RESTful Web Services</a> whitepaper available on MOS.</p><h2 id=\"using-apex-to-make-the-restful-calls\">Using APEX to make the RESTful calls</h2><p>I used <a href=\"https://docs.oracle.com/database/121/AEAPI/apex_web_service.htm#AEAPI1955\"><code>apex_web_service.make_rest_request</code></a> to send my requests back to Sales Cloud from a PL/SQL package so that it would fit in with the existing scaffolding in the packaged app. I originally wanted to model the Fusion RESTful APIs as <a href=\"http://www.oracle.com/webfolder/technetwork/tutorials/obe/db/apex/r50/Restful%20Services/restful_services.html#section2\">Web Service References in Application Express</a> and even got the Fusion API set up as a APEX Shared Component, but ended up rewriting the call as a PL/SQL package to match the existing Group Calendar code.</p><p>Still, the APEX Web Service References has a nice test harness to let tweak your headers and see the JSON response from your call. It helped me validate that the payload I was creating worked from APEX. Click here for a <a href=\"/images/20160121/test_APEX_rest_create-appointment.gif\">3.4MB animated GIF of the testing harness proving it could create an appointment in Sales Cloud</a>.</p><div class=\"full\"><a href=\"/images/20160121/test_APEX_rest_create-appointment.gif\"><img src=\"/images/20160121/test_APEX_rest_create-appointment_thumbnail.png\" /></a></div><h2 id=\"tests-tooling\">Tests Tooling</h2><p>For a RESTful client to draft that payload I used <a href=\"https://luckymarmot.com/paw\">Paw</a> as a change of pace from <a href=\"https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en\">Postman</a> (I like them both, Paw was just something new to try). These tools were quicker for iterating over changes I made to the request payload.</p><p>When I went to implement the call in APEX as a PL/SQL package, I also created a logging table that I inserted the response (as APEX saw it) in a timestamped row. This helped me troubleshoot the more complicated, multi-stage calls that came later. </p><div class=\"highlight\"><pre><code class=\"language-sql\" data-lang=\"sql\"><span class=\"c1\">--select dbms_metadata.get_ddl(&#39;TABLE&#39;,&#39;PDT_OSC_CAL_API_LOG&#39;) from dual; </span> <span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"ss\">&quot;PDT_OSC_CAL_API_LOG&quot;</span> <span class=\"p\">(</span> <span class=\"ss\">&quot;RESPONSE_MSG&quot;</span> <span class=\"k\">CLOB</span><span class=\"p\">,</span> <span class=\"ss\">&quot;CREATED&quot;</span> <span class=\"nb\">DATE</span><span class=\"p\">,</span> <span class=\"ss\">&quot;CREATED_BY&quot;</span> <span class=\"n\">VARCHAR2</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"ss\">&quot;ID&quot;</span> <span class=\"nb\">NUMBER</span><span class=\"p\">,</span> <span class=\"ss\">&quot;P_BODY&quot;</span> <span class=\"n\">VARCHAR2</span><span class=\"p\">(</span><span class=\"mi\">4000</span><span class=\"p\">),</span> <span class=\"k\">CONSTRAINT</span> <span class=\"ss\">&quot;PDT_OSC_CAL_API_PK&quot;</span> <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span> <span class=\"p\">(</span><span class=\"ss\">&quot;ID&quot;</span><span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"c1\">--select dbms_metadata.get_ddl(&#39;TRIGGER&#39;,&#39;BI_PDT_OSC_CAL_API_LOG&#39;) from dual; </span> <span class=\"k\">CREATE</span> <span class=\"k\">OR</span> <span class=\"k\">REPLACE</span> <span class=\"k\">TRIGGER</span> <span class=\"ss\">&quot;BI_PDT_OSC_CAL_API_LOG&quot;</span> <span class=\"k\">before</span> <span class=\"k\">insert</span> <span class=\"k\">on</span> <span class=\"ss\">&quot;PDT_OSC_CAL_API_LOG&quot;</span> <span class=\"k\">for</span> <span class=\"k\">each</span> <span class=\"k\">row</span>  <span class=\"k\">begin</span>    <span class=\"n\">if</span> <span class=\"p\">:</span><span class=\"k\">NEW</span><span class=\"p\">.</span><span class=\"ss\">&quot;ID&quot;</span> <span class=\"k\">is</span> <span class=\"k\">null</span> <span class=\"k\">then</span>      <span class=\"k\">select</span> <span class=\"n\">to_number</span><span class=\"p\">(</span><span class=\"n\">sys_guid</span><span class=\"p\">(),</span><span class=\"s1\">&#39;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#39;</span><span class=\"p\">)</span> <span class=\"k\">into</span> <span class=\"p\">:</span><span class=\"k\">new</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"k\">from</span> <span class=\"n\">dual</span><span class=\"p\">;</span>     <span class=\"p\">:</span><span class=\"k\">NEW</span><span class=\"p\">.</span><span class=\"ss\">&quot;CREATED&quot;</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">sysdate</span><span class=\"p\">;</span>      <span class=\"p\">:</span><span class=\"k\">NEW</span><span class=\"p\">.</span><span class=\"ss\">&quot;CREATED_BY&quot;</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"s1\">&#39;APP_USER&#39;</span><span class=\"p\">);</span>   <span class=\"k\">end</span> <span class=\"n\">if</span><span class=\"p\">;</span>  <span class=\"k\">end</span><span class=\"p\">;</span>  <span class=\"k\">ALTER</span> <span class=\"k\">TRIGGER</span> <span class=\"ss\">&quot;BI_PDT_OSC_CAL_API_LOG&quot;</span> <span class=\"n\">ENABLE</span></code></pre></div><h2 id=\"headers-for-your-rest-calls\">Headers for Your REST calls</h2><p>One of the first things I learned was that the R10 Fusion RESTful APIs require a special <code>Content-Type</code> header: <code>application/vnd.oracle.adf.resourceitem+json</code>. You also need to send some form of <code>Authorization</code> header: I used Basic Auth for testing but for the APEX app I could use Bearer Auth because we passed in a <a href=\"https://blogs.oracle.com/angelo/entry/jwt_token_security_with_fusion\">JWT token</a> on the URL generated in Sales Cloud pointing at our APEX app.</p><div class=\"highlight\"><pre><code class=\"language-sql\" data-lang=\"sql\"><span class=\"c1\">-- Headers necessary for Fusion RESTful API</span>      <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">g_request_headers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">name</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;Content-Type&#39;</span><span class=\"p\">;</span>      <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">g_request_headers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">Value</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;application/vnd.oracle.adf.resourceitem+json&#39;</span><span class=\"p\">;</span>      <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">g_request_headers</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">name</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;Authorization&#39;</span><span class=\"p\">;</span>      <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">g_request_headers</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">Value</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;Bearer &#39;</span> <span class=\"o\">||</span> <span class=\"n\">p_jwt_token</span><span class=\"p\">;</span></code></pre></div><h2 id=\"activities-are-different\">Activities are different</h2><p>Since I wanted to create a meeting appointment, a <a href=\"https://blogs.oracle.com/fadevrel/entry/release_9_the_activity_redesign\">little background on the Sales Cloud Activity model</a> was helpful. I used <a href=\"https://docs.oracle.com/cloud/latest/salescs_gs/FAAPS/op-salesApi-resources-11.1.10-activities-get.html\">GETs</a> to query existing meeting appointments and figure out the formats for fields (note the ISO 8601 date format and the Base64-encoded description). I was able to pare down a POST’s payload body sent to <code>/salesApi/resources/latest/activities</code> to be just a few fields (not shown are the two headers: Basic Auth and Content-type: application/vnd.oracle.adf.resourceitem+json):</p><div class=\"highlight\"><pre><code class=\"language-json\" data-lang=\"json\"><span class=\"p\">{</span>  <span class=\"nt\">&quot;ActivityEndDate&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2016-01-08T19:30:00-08:00&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;Subject&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Test RESTful Appointment&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;ActivityFunctionCode&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;APPOINTMENT&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;ActivityTypeCode&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MEETING&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;ActivityStartDate&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2016-01-08T18:30:00-08:00&quot;</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;OwnerId&quot;</span><span class=\"p\">:</span> <span class=\"mi\">300000047342468</span><span class=\"p\">,</span>  <span class=\"nt\">&quot;ActivityDescription&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;SGVyZSBpcyBhbiBhY3Rpdml0eSBkZXNjcmlwdGlvbiB0aGF0IEkgY291bGQgY3JlYXRlIGluIHRoZSBzYW1lIHJlcXVlc3QgYXMgdGhlIGFjdGl2aXR5IGl0c2VsZjsgSSBkaWRuJ3QgaGF2ZSB0byBtYWtlIGEgc2Vjb25kIGNhbGwgd2l0aCB0aGUganVzdC1jcmVhdGVkIGFjdGl2aXR5IElE&quot;</span><span class=\"p\">}</span></code></pre></div><h2 id=\"whittle-down-your-response-payload\">Whittle down your response payload</h2><p>The response object that comes back from a Fusion REST call is huge, but it doesn’t have to be. <a href=\"https://docs.oracle.com/cloud/latest/salescs_gs/FAAPS/op-salesApi-resources-11.1.10-activities-%7BActivityNumber%7D-get.html\">Two query parameters can help</a>: <code>?onlyData</code> (so you don’t get all the nested <code>links[]</code> arrays) and <code>?fields=Attribute1,Attribute2</code> (so that your main object only has the fields you’re looking for). </p><h2 id=\"watch-out-for-too-huge-responses-in-apex\">Watch out for too-huge responses in APEX</h2><p>This response pruning ability was handy, because <a href=\"http://www.talkapex.com/2015/05/apexjsonparse-issue-with-clobs-and-11g.html\">there’s a bug in APEX’s <code>APEX_JSON_PARSE</code> when running on 11g</a> that I ran into on our DBSchema instance. JSON responses larger than 8191 characters failed to parse, even though I could see a valid response was coming back in my log table. Turns out it’s really easy to get larger-than 8K+ responses from a Fusion REST call.</p><h2 id=\"adding-contacts-to-a-meeting-are-a-two-phase-rest-call\">Adding Contacts to a meeting are a two-phase REST call</h2><p>I needed to parse the CLOB response as JSON because I wanted to tease out the <code>ActivityNumber</code> field and use it to build the URL for a follow-up POST call. Our flow into the APEX app was to start from a Contacts screen, so in addition to the <a href=\"https://blogs.oracle.com/fadevrel/entry/using_jwt_to_secure_your\">JWT Token</a> we also send in the Contact_ID of the Fusion record we were looking at.  When we created the appointment meeting via REST we also wanted to add the Contact as an attachment. </p><p>This necessitated a two-part REST call: the first to create the activity and the second to use the returned ID in another <a href=\"https://docs.oracle.com/cloud/latest/salescs_gs/FAAPS/op-salesApi-resources-11.1.10-activities-%7BActivityNumber%7D-child-ActivityContact-post.html\">POST URL to create an activity contact</a> at <code>/salesApi/resources/latest/activities/{ActivityNumber}/child/ActivityContact</code>. The body of that POST was only the Contact_ID that we were passed in as a parameter on the URL generated by App Composer.</p><h2 id=\"apex-will-let-you-do-random-gets\">APEX will let you do random GETs</h2><p>Since I had been carrying that Contact_ID around from screen to screen in APEX, I thought a nice touch was to call back in to Fusion to pick up some additional details about the contact, such as full name and email address. </p><p>I used an After Header Process (after Load Data) on the APEX page to pre-populate two fields with live Fusion contact data. It might make more sense to pull Fusion data in differently for use in other APEX pages, but the one-off GET did the trick for this APEX form.</p><div class=\"highlight\"><pre><code class=\"language-sql\" data-lang=\"sql\"><span class=\"k\">DECLARE</span>   <span class=\"n\">l_response_clob</span>    <span class=\"k\">clob</span><span class=\"p\">;</span><span class=\"k\">BEGIN</span>      <span class=\"c1\">-- Headers necessary for Fusion RESTful API</span>      <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">g_request_headers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">name</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;Content-Type&#39;</span><span class=\"p\">;</span>      <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">g_request_headers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">Value</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;application/vnd.oracle.adf.resourceitem+json&#39;</span><span class=\"p\">;</span>      <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">g_request_headers</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">name</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;Authorization&#39;</span><span class=\"p\">;</span>      <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">g_request_headers</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">Value</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;Bearer &#39;</span> <span class=\"o\">||</span> <span class=\"p\">:</span><span class=\"n\">JWT_TOKEN</span><span class=\"p\">;</span>      <span class=\"c1\">-- make the request using parameters</span>      <span class=\"n\">l_response_clob</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">make_rest_request</span><span class=\"p\">(</span>              <span class=\"n\">p_url</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">&#39;https://adc2-fap1370-crm.oracledemos.com/crmCommonApi/resources/latest/contacts?q=PartyId=&#39;</span> <span class=\"o\">||</span> <span class=\"p\">:</span><span class=\"n\">CONTACT_ID</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;&amp;onlyData&amp;fields=ContactName,EmailAddress&#39;</span><span class=\"p\">,</span>              <span class=\"n\">p_http_method</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">&#39;GET&#39;</span>      <span class=\"p\">);</span>      <span class=\"c1\">-- log it</span>      <span class=\"k\">insert</span> <span class=\"k\">into</span> <span class=\"n\">PDT_OSC_CAL_API_LOG</span><span class=\"p\">(</span><span class=\"n\">RESPONSE_MSG</span><span class=\"p\">,</span> <span class=\"n\">P_BODY</span><span class=\"p\">)</span>      <span class=\"k\">values</span><span class=\"p\">(</span><span class=\"n\">l_response_clob</span><span class=\"p\">,</span> <span class=\"s1\">&#39;jwt: &#39;</span> <span class=\"o\">||</span> <span class=\"p\">:</span><span class=\"n\">JWT_TOKEN</span> <span class=\"o\">||</span><span class=\"s1\">&#39; contact_id: &#39;</span> <span class=\"o\">||</span> <span class=\"p\">:</span><span class=\"n\">CONTACT_ID</span><span class=\"p\">);</span>      <span class=\"k\">commit</span><span class=\"p\">;</span>      <span class=\"c1\">-- parse the response to put contact data into APEX fields</span>      <span class=\"n\">apex_json</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">l_response_clob</span><span class=\"p\">);</span>      <span class=\"p\">:</span><span class=\"n\">P10_CONTACT_PERSON</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">apex_json</span><span class=\"p\">.</span><span class=\"n\">get_varchar2</span><span class=\"p\">(</span><span class=\"n\">p_path</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">&#39;items[1].ContactName&#39;</span><span class=\"p\">);</span>       <span class=\"p\">:</span><span class=\"n\">P10_CONTACT_EMAIL</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">apex_json</span><span class=\"p\">.</span><span class=\"n\">get_varchar2</span><span class=\"p\">(</span><span class=\"n\">p_path</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">&#39;items[1].EmailAddress&#39;</span><span class=\"p\">);</span><span class=\"k\">END</span></code></pre></div><h2 id=\"mirroring-the-existing-apex-code\">Mirroring the existing APEX code</h2><p>Finally, here’s my custom package that mirrored the APEX process that runs when CREATE was pressed on the existing APEX page. I just added a call to my custom package right after the call to <code>EBA_ca_api.create_event</code>, using the same parameters.</p><div class=\"highlight\"><pre><code class=\"language-sql\" data-lang=\"sql\"><span class=\"k\">create</span> <span class=\"k\">or</span> <span class=\"k\">replace</span> <span class=\"n\">package</span> <span class=\"n\">body</span> <span class=\"n\">PDT_OSC_cal_api</span><span class=\"k\">as</span><span class=\"c1\">--this signature mirrors the create_event in the Group Calendar packaged app; I didn&#39;t end up using all these fields</span><span class=\"k\">procedure</span> <span class=\"n\">create_event</span> <span class=\"p\">(</span>   <span class=\"n\">p_event_name</span>       <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_type_id</span>          <span class=\"nb\">number</span><span class=\"p\">,</span>   <span class=\"n\">p_new_event_type</span>   <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_event_date_time</span>  <span class=\"k\">timestamp</span> <span class=\"k\">with</span> <span class=\"k\">local</span> <span class=\"n\">time</span> <span class=\"k\">zone</span><span class=\"p\">,</span>   <span class=\"n\">p_duration</span>         <span class=\"nb\">number</span><span class=\"p\">,</span>   <span class=\"n\">p_event_desc</span>       <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_contact_person</span>   <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_contact_email</span>    <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_display_time</span>     <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_location</span>         <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_link_name_1</span>      <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_link_url_1</span>       <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_link_name_2</span>      <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_link_url_2</span>       <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_link_name_3</span>      <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_link_url_3</span>       <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_tags</span>             <span class=\"n\">varchar2</span> <span class=\"k\">default</span> <span class=\"k\">null</span><span class=\"p\">,</span>   <span class=\"c1\">-- here are two fields I added to the signature: they are passed in as parameters on the Sales Cloud-generated link and I passed them around as application items</span>   <span class=\"n\">p_contact_id</span>       <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_jwt_token</span>        <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"c1\">--</span>   <span class=\"n\">p_recur_flag</span>       <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_recur_freq</span>       <span class=\"n\">varchar2</span><span class=\"p\">,</span>   <span class=\"n\">p_recur_end_date</span>   <span class=\"k\">timestamp</span> <span class=\"k\">with</span> <span class=\"k\">local</span> <span class=\"n\">time</span> <span class=\"k\">zone</span> <span class=\"p\">)</span><span class=\"k\">is</span>   <span class=\"n\">l_event_type_id</span>    <span class=\"nb\">number</span>  <span class=\"k\">default</span> <span class=\"k\">null</span><span class=\"p\">;</span>   <span class=\"n\">l_series_id</span>        <span class=\"nb\">number</span><span class=\"p\">;</span>   <span class=\"n\">l_response_clob</span>    <span class=\"k\">clob</span><span class=\"p\">;</span>   <span class=\"c1\">--convert p_duration (hours) into timestamp for use in p_body</span>   <span class=\"n\">l_event_end_date</span>   <span class=\"k\">timestamp</span> <span class=\"k\">with</span> <span class=\"k\">local</span> <span class=\"n\">time</span> <span class=\"k\">zone</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">p_event_date_time</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">p_duration</span> <span class=\"o\">*</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">24</span><span class=\"p\">));</span>   <span class=\"c1\">--clean up and convert p_tags into Base64 for use in ActivityDescription</span>   <span class=\"c1\">--alas the REPLACE()s make newlines if needed </span>   <span class=\"c1\">--but you cant have multi-line JSON strings and something in the cast chain was splitting and inserting CRLFs</span>   <span class=\"n\">l_activitydesc</span>     <span class=\"n\">varchar2</span><span class=\"p\">(</span><span class=\"mi\">32767</span><span class=\"p\">)</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"k\">REPLACE</span><span class=\"p\">(</span>                              <span class=\"k\">REPLACE</span><span class=\"p\">(</span>                               <span class=\"n\">utl_raw</span><span class=\"p\">.</span><span class=\"n\">cast_to_varchar2</span><span class=\"p\">(</span><span class=\"n\">utl_encode</span><span class=\"p\">.</span><span class=\"n\">base64_encode</span><span class=\"p\">(</span><span class=\"n\">utl_raw</span><span class=\"p\">.</span><span class=\"n\">cast_to_raw</span><span class=\"p\">(</span><span class=\"s1\">&#39;Interest in CSG: &#39;</span><span class=\"o\">||</span> <span class=\"k\">REPLACE</span><span class=\"p\">(</span><span class=\"n\">p_tags</span><span class=\"p\">,</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;, &#39;</span><span class=\"p\">)))),</span>                               <span class=\"n\">CHR</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">),</span>                               <span class=\"s1\">&#39;\\n&#39;</span> <span class=\"p\">),</span>                           <span class=\"n\">CHR</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span>                            <span class=\"s1\">&#39;&#39;</span> <span class=\"p\">)</span> <span class=\"p\">;</span>   <span class=\"n\">l_pbody</span>            <span class=\"n\">varchar2</span><span class=\"p\">(</span><span class=\"mi\">4000</span><span class=\"p\">);</span>   <span class=\"n\">l_new_activity_id</span>  <span class=\"n\">varchar2</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">);</span><span class=\"k\">begin</span>          <span class=\"n\">if</span> <span class=\"n\">p_recur_flag</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Y&#39;</span> <span class=\"k\">then</span>      <span class=\"c1\">-- TODO: write recurring event logic in the future; code structure was &#39;borrowed&#39; liberally from the APEX packaged app codebase</span>      <span class=\"k\">NULL</span><span class=\"p\">;</span>   <span class=\"k\">else</span>            <span class=\"c1\">-- Headers necessary for Fusion RESTful API</span>      <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">g_request_headers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">name</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;Content-Type&#39;</span><span class=\"p\">;</span>      <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">g_request_headers</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">Value</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;application/vnd.oracle.adf.resourceitem+json&#39;</span><span class=\"p\">;</span>      <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">g_request_headers</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">name</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;Authorization&#39;</span><span class=\"p\">;</span>      <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">g_request_headers</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">Value</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;Bearer &#39;</span> <span class=\"o\">||</span> <span class=\"n\">p_jwt_token</span><span class=\"p\">;</span>      <span class=\"c1\">--build the payload, hardcoded to go to lisa.jones&#39; calendar because I didn&#39;t build out lookups in APEX against live Fusion OwnerIds</span>      <span class=\"n\">l_pbody</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;{</span><span class=\"s1\">                &quot;ActivityEndDate&quot;: &quot;&#39;</span> <span class=\"o\">||</span> <span class=\"n\">to_char</span><span class=\"p\">(</span><span class=\"n\">l_event_end_date</span><span class=\"p\">,</span> <span class=\"s1\">&#39;yyyy-mm-dd&#39;</span><span class=\"p\">)</span> <span class=\"o\">||</span><span class=\"s1\">&#39;T&#39;</span><span class=\"o\">||</span> <span class=\"n\">to_char</span><span class=\"p\">(</span><span class=\"n\">l_event_end_date</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hh24:mi:ss&#39;</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;-08:00&quot;,</span><span class=\"s1\">                &quot;Subject&quot;: &quot;&#39;</span> <span class=\"o\">||</span> <span class=\"n\">p_event_name</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;&quot;,</span><span class=\"s1\">                &quot;ActivityFunctionCode&quot;: &quot;APPOINTMENT&quot;,</span><span class=\"s1\">                &quot;ActivityTypeCode&quot;: &quot;MEETING&quot;,</span><span class=\"s1\">                &quot;ActivityStartDate&quot;: &quot;&#39;</span> <span class=\"o\">||</span> <span class=\"n\">to_char</span><span class=\"p\">(</span><span class=\"n\">p_event_date_time</span><span class=\"p\">,</span> <span class=\"s1\">&#39;yyyy-mm-dd&#39;</span><span class=\"p\">)</span> <span class=\"o\">||</span><span class=\"s1\">&#39;T&#39;</span><span class=\"o\">||</span> <span class=\"n\">to_char</span><span class=\"p\">(</span><span class=\"n\">p_event_date_time</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hh24:mi:ss&#39;</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;-08:00&quot;,</span><span class=\"s1\">                &quot;OwnerId&quot;: 300000047342468,</span><span class=\"s1\">                &quot;ActivityDescription&quot;: &quot;&#39;</span><span class=\"o\">||</span> <span class=\"n\">l_activitydesc</span> <span class=\"o\">||</span><span class=\"s1\">&#39;&quot;</span><span class=\"s1\">              }&#39;</span><span class=\"p\">;</span>      <span class=\"c1\">-- make the request using ?onlyData parameter</span>      <span class=\"n\">l_response_clob</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">make_rest_request</span><span class=\"p\">(</span>              <span class=\"n\">p_url</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">&#39;https://origin-adc2-fap1370-crm.oracledemos.com/salesApi/resources/latest/activities?onlyData&#39;</span><span class=\"p\">,</span>              <span class=\"n\">p_http_method</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span>              <span class=\"n\">p_body</span>  <span class=\"o\">=&gt;</span> <span class=\"n\">l_pbody</span>      <span class=\"p\">);</span>      <span class=\"c1\">-- log it</span>      <span class=\"k\">insert</span> <span class=\"k\">into</span> <span class=\"n\">PDT_OSC_CAL_API_LOG</span><span class=\"p\">(</span><span class=\"n\">RESPONSE_MSG</span><span class=\"p\">,</span> <span class=\"n\">P_BODY</span><span class=\"p\">)</span>      <span class=\"k\">values</span><span class=\"p\">(</span><span class=\"n\">l_response_clob</span><span class=\"p\">,</span> <span class=\"n\">l_pbody</span><span class=\"p\">);</span>      <span class=\"k\">commit</span><span class=\"p\">;</span>      <span class=\"c1\">-- parse the response so we can attach a contact</span>      <span class=\"n\">apex_json</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">l_response_clob</span><span class=\"p\">);</span>      <span class=\"n\">l_new_activity_id</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">apex_json</span><span class=\"p\">.</span><span class=\"n\">get_varchar2</span><span class=\"p\">(</span><span class=\"n\">p_path</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">&#39;ActivityNumber&#39;</span><span class=\"p\">);</span>      <span class=\"c1\">-- make the follow-up POST request to add a contactID to the just-created activity</span>      <span class=\"n\">l_pbody</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;{    </span><span class=\"s1\">              &quot;ContactId&quot; : &#39;</span> <span class=\"o\">||</span> <span class=\"n\">p_contact_id</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;</span><span class=\"s1\">      }&#39;</span><span class=\"p\">;</span>      <span class=\"n\">l_response_clob</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">apex_web_service</span><span class=\"p\">.</span><span class=\"n\">make_rest_request</span><span class=\"p\">(</span>              <span class=\"n\">p_url</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">&#39;https://origin-adc2-fap1370-crm.oracledemos.com/salesApi/resources/latest/activities/&#39;</span> <span class=\"o\">||</span> <span class=\"n\">l_new_activity_id</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;/child/ActivityContact?onlyData&#39;</span><span class=\"p\">,</span>              <span class=\"n\">p_http_method</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span>              <span class=\"n\">p_body</span>  <span class=\"o\">=&gt;</span> <span class=\"n\">l_pbody</span>      <span class=\"p\">);</span>            <span class=\"c1\">-- log it</span>      <span class=\"k\">insert</span> <span class=\"k\">into</span> <span class=\"n\">PDT_OSC_CAL_API_LOG</span><span class=\"p\">(</span><span class=\"n\">RESPONSE_MSG</span><span class=\"p\">,</span> <span class=\"n\">P_BODY</span><span class=\"p\">)</span>      <span class=\"k\">values</span><span class=\"p\">(</span><span class=\"n\">l_response_clob</span><span class=\"p\">,</span> <span class=\"n\">l_pbody</span><span class=\"p\">);</span>         <span class=\"k\">end</span> <span class=\"n\">if</span><span class=\"p\">;</span>   <span class=\"k\">commit</span><span class=\"p\">;</span><span class=\"k\">end</span> <span class=\"n\">create_event</span><span class=\"p\">;</span><span class=\"k\">end</span> <span class=\"n\">PDT_OSC_cal_api</span><span class=\"p\">;</span></code></pre></div>"
    },
  
    {
      "title": "Pouring JET Cookbook Code into QuickStart",
      "date_published": "2016-01-20T00:00:00+00:00",
      "date_modified": "2016-01-20T00:00:00+00:00",
      "id": "/2016/01/20/pouring-jet-cookbook-into-quickstart/",
      "url": "http://www.likeahouseafire.com/2016/01/20/pouring-jet-cookbook-into-quickstart/",
      
      
      
      "tags": ["Oracle JET","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Dealing with 'Uncaught Error: You cannot apply bindings multiple times to the same element' when pasting sample code directly into the QuickStart template",
      "content_text": "The Oracle JET Cookbook is filled with awesome examples of widgets and patterns. It’s great to see a working JET sample and then read the HTML view and JavaScript viewModel code that built that sample. It’s even cooler that the Cookbook UI lets you modify the code in its HTML and JS Editors: clicking Apply Changes will instantly update the sample at the top of your browser window.But there’s a problem with using the Cookbook like a scrapbook to paste code directly into your projects. If you’re going to copy-and-paste JET Cookbook code, you want to only take the parts you need.If you’re pasting Cookbook code verbatim into the templates and modules of the QuickStart codebase, you might run into issues with your Require.js modules or may throw strange Knockout binding errors.For example, let’s say you wanted to paste the code for an ojSlider into your QuickStart to see how it would look. Let’s assume you’re replacing the entire contents of the Home tab in the QuickStart with an ojSlider.So you copy the HTML Editor content into home.tmpl.html and the JS Editor code into home.js, replacing everything in the two QuickStart files with the Cookbook code. When you save the changes and run the QuickStart in NetBeans, you’ll get a bunch of errors in the Output - Browser Log (or in your browser’s console):Uncaught (in promise) ReferenceError: Unable to process binding &quot;ojComponent: function (){return {\t\t    component:&#39;ojSlider&#39;,max:max,min:min,step:step,value:currentValue} }&quot;Message: max is not defined (16:26:21:996 | error, javascript)Uncaught Error: You cannot apply bindings multiple times to the same element. (16:26:22:192 | error, javascript)Uggh, ErrorsSo what went wrong? Two things:First, the QuickStart code is setup to use Require.js to load the viewModel code as “defined” modules. But the Cookbook code is doing an inline Require call. Note the code you pasted in is a require() function, but what you need is a define() function that returns the viewModel that the QuickStart is expecting.Sure, the Cookbook require() code does help us to see what dependencies and code we need to include to get the ojSlider to work, we just need to make sure we’re setting our QuickStart code up as a defined module and also make sure we return the code as a viewModel function so that it works the way the QuickStart is expecting.Second, there’s another issue with our copied code. The require() code has a function in the jQuery $(document).ready that calls ko.applyBindings() explicitly on the slider-container-ID in your view’s HTML code. This makes sense in the Cookbook pages: Knockout needs to apply the right bindings to the elements in your HTML code. The problem is that our QuickStart scaffolding already has a call to ko.applyBindings(). It’s in the main.js file as part of the oj.Router.sync() promise, and it applies bindings to the whole page. So when you copy-paste the Cookbook JS verbatim and include the redundant applyBindings(), you get that Knockout error message about how you cannot apply bindings multiple times.How Do We Fix It?So we need to be surgical with our copy-and-paste from the Cookbook into our codebase. We can use the Cookbook as a guide, but we need to understand what code the QuickStart expects and where it should go.Let’s start with the define() versus require() structure. Looking at the Cookbook code, we see the array of dependencies as the first parameter to the require() call. A purist would pluck out the jQuery dependency, because we won’t be needing it in our viewModel function. So we’re left with the dependencies we need to pass into the existing define() call as its first parameter to support the ojSlider:define([&#39;ojs/ojcore&#39;, &#39;knockout&#39;, &#39;ojs/ojknockout&#39;, &#39;ojs/ojslider&#39;   ], ...If you were combining elements from multiple Cookbook examples, you’d want to list out all of the dependencies in that array parameter and separate them with commas.Next, we’ll grab the meat of the Cookbook’s SliderModel() function and pour it into our viewModel’s function that gets returned as part of the define() block. We won’t need to instantiate a new viewModel as in the Cookbook (main.js takes care of that with the Router code) and we don’t need the jQuery code to apply the bindings (again thanks to the QuickStart’s main.js).So after surgery, here’s what home.js should look like in our QuickStart:define([&#39;ojs/ojcore&#39;, &#39;knockout&#39;, &#39;ojs/ojknockout&#39;, &#39;ojs/ojslider&#39;   ], function(oj, ko) {   /**    * The view model for the main content view template    */            function mainContentViewModel() {                var self = this;                self.max = ko.observable(200);                self.min = ko.observable(0);                self.currentValue = ko.observable(100);                self.step = ko.observable(10);            }   return mainContentViewModel;});It turns out the view code from the Cookbook HTML Editor can be used as-is, so we’ll just leave it pasted it in to home.tmpl.html. That might not be true of every codebase, but the Cookbook HTML works unchanged in the QuickStart scaffolding in this case.Now when you run your QuickStart from NetBeans, you’ll get your slider and there won’t be any errors thrown in your console:",
      "content_html": "<p>The <a href=\"http://www.oracle.com/webfolder/technetwork/jet/uiComponents-dataVisualizations.html\">Oracle JET Cookbook</a> is filled with awesome examples of widgets and patterns. It’s great to see a working JET sample and then read the HTML view and JavaScript viewModel code that built that sample. It’s even cooler that the Cookbook UI lets you modify the code in its HTML and JS Editors: clicking <kbd>Apply Changes</kbd> will instantly update the sample at the top of your browser window.</p><p>But there’s a problem with using the Cookbook like a scrapbook to paste code directly into your projects. If you’re going to copy-and-paste JET Cookbook code, you want to only take the parts you need.</p><p>If you’re pasting Cookbook code verbatim into the templates and modules of the QuickStart codebase, you might run into issues with your Require.js modules or may throw strange Knockout binding errors.</p><p>For example, let’s say you wanted to paste the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/uiComponents-slider-slider.html\">code for an ojSlider</a> into your QuickStart to see how it would look. Let’s assume you’re replacing the entire contents of the Home tab in the QuickStart with an ojSlider.</p><p>So you copy the HTML Editor content into <code>home.tmpl.html</code> and the JS Editor code into <code>home.js</code>, replacing everything in the two QuickStart files with the Cookbook code. When you save the changes and run the QuickStart in NetBeans, you’ll get a bunch of errors in the Output - Browser Log (or in your browser’s console):</p><div class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\">Uncaught (in promise) ReferenceError: Unable to process binding &quot;ojComponent: function (){return {\t\t    component:&#39;ojSlider&#39;,max:max,min:min,step:step,value:currentValue} }&quot;Message: max is not defined (16:26:21:996 | error, javascript)Uncaught Error: You cannot apply bindings multiple times to the same element. (16:26:22:192 | error, javascript)</code></pre></div><h2 id=\"uggh-errors\">Uggh, Errors</h2><p>So what went wrong? Two things:</p><p>First, the QuickStart code is setup to use Require.js to load the viewModel code as <a href=\"http://requirejs.org/docs/api.html#define\">“defined” modules</a>. But the Cookbook code is doing an inline Require call. Note the code you pasted in is a <code>require()</code> function, but what you need is a <code>define()</code> function that <code>return</code>s the viewModel that the QuickStart is expecting.</p><p>Sure, the Cookbook <code>require()</code> code does help us to see what dependencies and code we need to include to get the ojSlider to work, we just need to make sure we’re setting our QuickStart code up as a <code>define</code>d module and also make sure we return the code as a viewModel function so that it works the way the QuickStart is expecting.</p><p>Second, there’s another issue with our copied code. The <code>require()</code> code has a function in the jQuery <code>$(document).ready</code> that calls <code>ko.applyBindings()</code> explicitly on the <code>slider-container</code>-ID in your view’s HTML code. This makes sense in the Cookbook pages: Knockout needs to apply the right bindings to the elements in your HTML code. </p><p>The problem is that our QuickStart scaffolding already has a call to <code>ko.applyBindings()</code>. It’s in the <code>main.js</code> file as part of the <code>oj.Router.sync()</code> promise, and it applies bindings to the whole page. So when you copy-paste the Cookbook JS verbatim and include the redundant <code>applyBindings()</code>, you get that Knockout error message about how you cannot apply bindings multiple times.</p><h2 id=\"how-do-we-fix-it\">How Do We Fix It?</h2><p>So we need to be surgical with our copy-and-paste from the Cookbook into our codebase. We can use the Cookbook as a guide, but we need to understand what code the QuickStart expects and where it should go.</p><p>Let’s start with the <code>define()</code> versus <code>require()</code> structure. Looking at the Cookbook code, we see the array of dependencies as the first parameter to the <code>require()</code> call. A purist would pluck out the jQuery dependency, because we won’t be needing it in our viewModel function. So we’re left with the dependencies we need to pass into the existing <code>define()</code> call as its first parameter to support the ojSlider:</p><div class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"nx\">define</span><span class=\"p\">([</span><span class=\"s1\">&#39;ojs/ojcore&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;knockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojknockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojslider&#39;</span>   <span class=\"p\">],</span> <span class=\"p\">...</span></code></pre></div><p>If you were combining elements from multiple Cookbook examples, you’d want to list out all of the dependencies in that array parameter and separate them with commas.</p><p>Next, we’ll grab the meat of the Cookbook’s <code>SliderModel()</code> function and pour it into our viewModel’s function that gets returned as part of the <code>define()</code> block. We won’t need to instantiate a new viewModel as in the Cookbook (<code>main.js</code> takes care of that with the Router code) and we don’t need the jQuery code to apply the bindings (again thanks to the QuickStart’s <code>main.js</code>).</p><p>So after surgery, here’s what <code>home.js</code> should look like in our QuickStart:</p><div class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"nx\">define</span><span class=\"p\">([</span><span class=\"s1\">&#39;ojs/ojcore&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;knockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojknockout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ojs/ojslider&#39;</span>   <span class=\"p\">],</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">oj</span><span class=\"p\">,</span> <span class=\"nx\">ko</span><span class=\"p\">)</span> <span class=\"p\">{</span>   <span class=\"cm\">/**</span><span class=\"cm\">    * The view model for the main content view template</span><span class=\"cm\">    */</span>            <span class=\"kd\">function</span> <span class=\"nx\">mainContentViewModel</span><span class=\"p\">()</span> <span class=\"p\">{</span>                <span class=\"kd\">var</span> <span class=\"nx\">self</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>                <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">observable</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>                <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">min</span> <span class=\"o\">=</span> <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">observable</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>                <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">currentValue</span> <span class=\"o\">=</span> <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">observable</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">);</span>                <span class=\"nx\">self</span><span class=\"p\">.</span><span class=\"nx\">step</span> <span class=\"o\">=</span> <span class=\"nx\">ko</span><span class=\"p\">.</span><span class=\"nx\">observable</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span>            <span class=\"p\">}</span>   <span class=\"k\">return</span> <span class=\"nx\">mainContentViewModel</span><span class=\"p\">;</span><span class=\"p\">});</span></code></pre></div><p>It turns out the view code from the Cookbook HTML Editor can be used as-is, so we’ll just leave it pasted it in to <code>home.tmpl.html</code>. That might not be true of every codebase, but the Cookbook HTML works unchanged in the QuickStart scaffolding in this case.</p><p>Now when you run your QuickStart from NetBeans, you’ll get your slider and there won’t be any errors thrown in your console:</p><div class=\"full zoomable\"><img src=\"/images/20160120/working-ojSlider.png\" /></div>"
    },
  
    {
      "title": "Bookmark Links to Multiple Oracle Public Cloud Identity Domains",
      "date_published": "2015-12-15T00:00:00+00:00",
      "date_modified": "2015-12-15T00:00:00+00:00",
      "id": "/2015/12/15/bookmark-links-to-muliple-opc-identity-domains/",
      "url": "http://www.likeahouseafire.com/2015/12/15/bookmark-links-to-muliple-opc-identity-domains/",
      
      
      
      
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Deeplinks straight to your services, bypassing the identity domain page and leveraging 1Password",
      "content_text": "As a sales consultant I have access to more than one Oracle Public Cloud instance, most of them trial environments and each one in its own identity domain.In the fall of 2015 the Oracle Public Cloud implemented a “feature” in the sign-on flow that prompted for an identity domain on its own page before asking for your username and password. Beyond adding an extra page to the sign-on process, this new form had a checkbox that would remember your identity domain for future logins and store it in a cookie. Bad for those of us who need to sign into more than one domain if you accidentally checked that box (see Problems Switching Identity Domains When Signing In to Oracle Java Cloud Service for help if you need to delete this cookie).So now I’m extra careful and I have to keep track of and paste the proper identity domain into the sign-on window, immediately followed by another page with the right username and password. That’s a lot of screens and page refreshes and it’s an error prone process just to get access to a service’s console.Until today, when I discovered URLs that take on this format:https://myservices.us2.oraclecloud.com/mycloud/your_identity_domain_name/faces/dashboard.jspxSo you can edit that URL to match your_identity_domain_name and use it to go straight to your services home page after entering the right password. No more interstitial page prompting for the identity domain. No navigating through the cloud.oracle.com sign-on pages. Plus, that URL is bookmarkable.This is great, because I had earlier tried to bookmark direct links in to the service consoles for my JCS-SX and APEX services, such as: https://javatrial_number_db-identity_domain_name.db.us2.oraclecloudapps.com/apex/I couldn’t get these to work reliably because they assume you’re already authenticated to the identity domain with an active session–if you are the bookmarks would work great, but if you’re not it would stop at that same set of signin pages prompting for the identity domain and then the username/password so the bookmark wasn’t saving me any steps or time.And the mycloud link above even works with my metered service domains as well, signing me straight in.  Once I’m authenticated to the domain then bookmarks such as dbaas.oraclecloud.com/dbaas/faces/dbRunner.jspxwork right too.The best part is that I can store these links in my password manager and let the “open and fill” feature take me right to the MyServices home page for the identity domain. I’ve even kept the old bookmarks that point straight to the consoles for after I’m authenticated.Click that website link and 1Password logs you straight in. Combined with Alfred or another password-manager-integrated launcher and my Oracle Cloud is just few keystrokes away.",
      "content_html": "<p>As a sales consultant I have access to more than one Oracle Public Cloud instance, most of them trial environments and each one in its own identity domain.</p><p>In the fall of 2015 the Oracle Public Cloud implemented a “feature” in the sign-on flow that prompted for an identity domain on its own page before asking for your username and password. Beyond adding an extra page to the sign-on process, this new form had a checkbox that would remember your identity domain for future logins and store it in a cookie. Bad for those of us who need to sign into more than one domain if you accidentally checked that box (see <a href=\"https://docs.oracle.com/cloud/latest/jcs_gs/JSCUG/GUID-57C58820-B690-4C1C-AAA4-4C3615227FB5.htm#JSCUG-GUID-57C58820-B690-4C1C-AAA4-4C3615227FB5\">Problems Switching Identity Domains When Signing In to Oracle Java Cloud Service</a> for help if you need to delete this cookie).</p><div class=\"full zoomable\"><img src=\"/images/20151215/opcsignin.png\" /></div><p>So now I’m extra careful and I have to keep track of and paste the proper identity domain into the sign-on window, immediately followed by another page with the right username and password. That’s a lot of screens and page refreshes and it’s an error prone process just to get access to a service’s console.</p><p>Until today, when I discovered URLs that take on this format:</p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">https://myservices.us2.oraclecloud.com/mycloud/your_identity_domain_name/faces/dashboard.jspx</code></pre></div><p>So you can edit that URL to match your_identity_domain_name and use it to go straight to your services home page after entering the right password. No more interstitial page prompting for the identity domain. No navigating through the cloud.oracle.com sign-on pages. Plus, that URL is bookmarkable.</p><p>This is great, because I had earlier tried to bookmark direct links in to the service consoles for my JCS-SX and APEX services, such as: </p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">https://javatrial_number_db-identity_domain_name.db.us2.oraclecloudapps.com/apex/</code></pre></div><p>I couldn’t get these to work reliably because they assume you’re already authenticated to the identity domain with an active session–if you are the bookmarks would work great, but if you’re not it would stop at that same set of signin pages prompting for the identity domain and then the username/password so the bookmark wasn’t saving me any steps or time.</p><p>And the mycloud link above even works with my metered service domains as well, signing me straight in.  Once I’m authenticated to the domain then bookmarks such as </p><div class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">dbaas.oraclecloud.com/dbaas/faces/dbRunner.jspx</code></pre></div><p>work right too.</p><div class=\"full zoomable\"><img src=\"/images/20151215/myhome.png\" /></div><p>The best part is that I can store these links in <a href=\"https://agilebits.com/onepassword\">my password manager</a> and let the “open and fill” feature take me right to the MyServices home page for the identity domain. I’ve even kept the old bookmarks that point straight to the consoles for after I’m authenticated.</p><div class=\"full zoomable\"><img src=\"/images/20151215/1password.png\" /></div><p>Click that website link and 1Password logs you straight in. Combined with <a href=\"https://www.alfredapp.com/help/features/1password/\">Alfred</a> or another password-manager-integrated launcher and my Oracle Cloud is just few keystrokes away.</p>"
    },
  
    {
      "title": "Sample OracleJET Codebases In the Wild",
      "date_published": "2015-12-12T00:00:00+00:00",
      "date_modified": "2015-12-12T00:00:00+00:00",
      "id": "/2015/12/12/sample-oraclejet-codebases/",
      "url": "http://www.likeahouseafire.com/2015/12/12/sample-oraclejet-codebases/",
      
      
      
      "tags": ["Oracle JET","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "A collection of downloadable OracleJET samples",
      "content_text": "If you want to get started with OracleJET, the purest way is to download only the base distribution package and then create a HTML5/JS app in NetBeans. This creates a very plain app: an empty canvas ready for you to pour your code into from scratch.But if you’re looking to see (and possibly steal ideas from) some working code, the easiest way is to use NetBeans 8.1’s QuickStart Template and let it download the Basic Starter Template zip file to build out a project for you. The wizard uses the same Quickstart basic starter code that you can download by hand from OTN if you don’t want to use NetBeans.As I’ve been ramping up on JET I’ve stumbled on a few other examples of working JET code that can be imported as HTML5/JS apps into NetBeans following the same steps in Geertjan’s blog above. Here’s a list of some JET samples in the wild:WorkBetter AppThe WorkBetter demo is a great showcase of what you can do with JET and stands in contrast to the QuickStart template with fancy styling and masonry layout on the home page. If it looks familiar it’s because this is the JET version of the ADF WorkBetter sample app. The beautiful thing is that you can look at the code by downloading the zip file:  Working copy: JET WorkBetter Demo  Code zip file: WorkBetter.zipmoviesJETBlogger Kenneth Lange wrote an excellent JET tutorial that mirrors an Angular.js exercise out on the Internets. He builds a CRUD app up from the base distribution and documents the process.  Code zip file: oracle_jet_demo_app.zipOracleJET-CommonModel-CRUDBuried deep in the JET documentation is another CRUD sample app. This one is based on the JET Common Model and also is an example of how to use the REST mock server. That documentation page is a rundown of the code, but it’s nice to have a working copy in NetBeans to follow along with and hack on.  Code zip file: OraclerJET-CommonModel-CRUDSPA-ojModule-ojRouterAnother code sample can be found in the docs at the bottom of Designing Single-Page Applications Using Oracle JET. This page walks through creating a SPA with ojModule and ojRouter to create a bookmarkable website and talks about when to use query parameters versus URI path segments.I hope they keep posting downloadable code samples from the documentation, as it illuminates the docs and proves that the steps work.  Code zip file: SPA-ojModule-ojRouterComponentsInteractionsThere’s another code sample on the JET OTN Downloads page named “Components Interactions” and you can download the source code from there, but I strongly recommend you instead follow the OpenWorld Hands-On-Lab instructions and build this code yourself from scratch. The HOL instructions will walk you through it and you’ll end up with the same code as below but will learn a lot more from the experience.  Working copy: JET-ComponentInteraction  Code zip file: Components Interactions: Sample Application for Oracle JavaScript Extension ToolkitI’m on the lookout for more sample code, so please let me know if you have links to any other good codebases.",
      "content_html": "<p>If you want to get started with OracleJET, the <em>purest</em> way is to download <a href=\"https://blogs.oracle.com/geertjan/entry/starting_with_the_oracle_jet\">only the base distribution package and then create a HTML5/JS app in NetBeans</a>. This creates a very plain app: an empty canvas ready for you to pour your code into from scratch.</p><p>But if you’re looking to see (and possibly steal ideas from) some working code, the <em>easiest</em> way is to use NetBeans 8.1’s <a href=\"http://www.oracle.com/webfolder/technetwork/jet/public_samples/OracleJET_QuickStartBasic/public_html/index.html\">QuickStart Template</a> and let it download the Basic Starter Template zip file to build out a project for you. The wizard uses the same <a href=\"http://www.oracle.com/technetwork/developer-tools/jet/downloads/index.html\">Quickstart basic starter code that you can download by hand from OTN</a> if you don’t want to use NetBeans.</p><p>As I’ve been ramping up on JET I’ve stumbled on a few other examples of working JET code that can be imported as HTML5/JS apps into NetBeans following the same steps in Geertjan’s blog above. Here’s a list of some JET samples in the wild:</p><h2 id=\"workbetter-app\">WorkBetter App</h2><p>The <a href=\"http://www.oracle.com/webfolder/technetwork/jet/public_samples/WorkBetter/public_html/index.html\">WorkBetter demo</a> is a great showcase of what you can do with JET and stands in contrast to the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/public_samples/OracleJET_QuickStartBasic/public_html/index.html\">QuickStart template</a> with fancy styling and masonry layout on the home page. If it looks familiar it’s because this is the JET version of <a href=\"http://jdevadf.oracle.com/workbetter/faces/index.jsf\">the ADF WorkBetter sample app</a>. The beautiful thing is that you can look at the code by downloading the zip file:</p><ul>  <li>Working copy: <a href=\"http://www.oracle.com/webfolder/technetwork/jet/public_samples/WorkBetter/public_html/index.html\">JET WorkBetter Demo</a></li>  <li>Code zip file: <a href=\"http://www.oracle.com/technetwork/developer-tools/jet/downloads/index.html\">WorkBetter.zip</a></li></ul><h2 id=\"moviesjet\">moviesJET</h2><p>Blogger <a href=\"http://www.kennethlange.com/\">Kenneth Lange</a> wrote an <a href=\"http://www.kennethlange.com/posts/oracle_jet.html\">excellent JET tutorial that mirrors an Angular.js exercise</a> out on the Internets. He builds a CRUD app up from the base distribution and documents the process.</p><ul>  <li>Code zip file: <a href=\"http://www.kennethlange.com/resources/oracle_jet_demo_app.zip\">oracle_jet_demo_app.zip</a></li></ul><h2 id=\"oraclejet-commonmodel-crud\">OracleJET-CommonModel-CRUD</h2><p>Buried <a href=\"https://docs.oracle.com/middleware/jet112/jet/developer/GUID-0C0D187C-CDCB-4235-ADA8-7AE9D93FFA08.htm#JETDG552\">deep in the JET documentation</a> is another CRUD sample app. This one is based on the JET Common Model and also is an example of how to use the REST mock server. That documentation page is a rundown of the code, but it’s nice to have a working copy in NetBeans to follow along with and hack on.</p><ul>  <li>Code zip file: <a href=\"http://www.oracle.com/webfolder/technetwork/jet/public_samples/JET-CommonModel-CRUD.zip\">OraclerJET-CommonModel-CRUD</a></li></ul><h2 id=\"spa-ojmodule-ojrouter\">SPA-ojModule-ojRouter</h2><p>Another code sample can be found in the docs at the bottom of <a href=\"https://docs.oracle.com/middleware/jet112/jet/developer/GUID-307B5D75-4D96-413B-A8FB-2212ED401061.htm#JETDG327\">Designing Single-Page Applications Using Oracle JET</a>. This page walks through creating a SPA with ojModule and ojRouter to create a bookmarkable website and talks about when to use query parameters versus URI path segments.</p><p>I hope they keep posting downloadable code samples from the documentation, as it illuminates the docs and proves that the steps work.</p><ul>  <li>Code zip file: <a href=\"http://www.oracle.com/webfolder/technetwork/jet/public_samples/SPA-ojModule-ojRouter.zip\">SPA-ojModule-ojRouter</a></li></ul><h2 id=\"componentsinteractions\">ComponentsInteractions</h2><p>There’s another code sample on the JET OTN Downloads page named “Components Interactions” and you can download the source code from there, but I strongly recommend you instead follow the <a href=\"http://www.oracle.com/webfolder/technetwork/jet/globalExamples-HOL.html\">OpenWorld Hands-On-Lab instructions</a> and build this code yourself from scratch. The HOL instructions will walk you through it and you’ll end up with the same code as below but will learn a lot more from the experience.</p><ul>  <li>Working copy: <a href=\"http://www.oracle.com/webfolder/technetwork/jet/public_samples/JET-ComponentInteraction/public_html/index.html\">JET-ComponentInteraction</a></li>  <li>Code zip file: <a href=\"http://www.oracle.com/technetwork/developer-tools/jet/downloads/index.html\">Components Interactions: Sample Application for Oracle JavaScript Extension Toolkit</a></li></ul><hr /><p>I’m on the lookout for more sample code, so please let me know if you have links to any other good codebases.</p>"
    },
  
    {
      "title": "Adding FontAwesome to Oracle JET QuickStart",
      "date_published": "2015-12-03T00:00:00+00:00",
      "date_modified": "2015-12-03T00:00:00+00:00",
      "id": "/2015/12/03/adding-fontawesome-to-oracle-jet-quickstart/",
      "url": "http://www.likeahouseafire.com/2015/12/03/adding-fontawesome-to-oracle-jet-quickstart/",
      
      
      
      "tags": ["Oracle JET","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Getting cute pictures in your menubar and support for icon fonts",
      "content_text": "NetBeans 8.1 has a plugin for Oracle JET that makes it absolutely simple to create a project modeled off the Oracle JET QuickStart template. Just choose File &gt;&gt; New Project... &gt;&gt; HTML5/JavaScript &gt;&gt; Oracle JET QuickStart Basic. Give it a name and a location, click Finish, then click the Run Project button. You should be looking at a three-column, responsive, single-page app with a menubar that swaps out the content in the middle mainContent area. Notice those icons on the menubar for Home, People, Library, etc.:Those icons come from a custom font named App_iconfont.woff in the /css/fonts/ directory. If you open that font up, you’ll find that it only includes about 10 custom glyphs. What if you need different icons in your menubar?We can add the awesome FontAwesome project to our QuickStart project and use their myriad of icons in our own menubar.Get the FontAwesome filesFirst download the latest zip file from the main FontAwesome page. I’m using version 4.5.0 for this lab.Unzip this file and then pluck out the resources to copy into your JET QuickStart folder hierarchy. Copy the font files in  font-awesome-4.5.0/fonts/ to JETQuickStart/css/fonts/. Next, copy the CSS files in font-awesome-4.5.0/css to a newly-created directory at JETQuickStart/css/libs/fa/. Your project should look like this in NetBeans:Modify the CSS to match OracleJETWe need to tweak the FontAwesome CSS files to point to the proper locations in your project.Open the JETQuickStart/css/libs/fa/font-awesome.css in NetBeans. Do an Edit &gt;&gt; Replace... and search for the text ../fonts/fontawesome, replacing it with the text ../../fonts/fontawesome. You should get 6 hits. Click Replace All.Now do the same for the minified version of the file JETQuickStart/css/libs/fa/font-awesome.min.css. If you open it right away in NetBeans, it will remember your Find/Replace strings and you can just click Replace All again.Close and save both files. This points the FontAwesome stylesheets in the right direction to find the actual font files in your project structure.Link everything into your projectNow we need to tell the QuickStart project about the FontAwesome CSS files. Open the index.html file out of the Site Root by double-clicking on it. Find the line in the &lt;head&gt; section just above the override.css line (line 32 in my file). This is where we will insert the reference to the FontAwesome CSS file.The easiest way is to grab the font-awesome.min.css file in the Projects hierarchy with the mouse and drag it to the blank line you want to add it into. NetBeans will create the proper &lt;link ... &gt; tag for you. You can add spacing and a comment if you like.Modify the icons in your menubar codeEverything is in place to use the FontAwesome icons. Now we just need to know what style classes to use and where to put them.If you are looking to swap out the menubar icons in the QuickStart project, you’ll find the icon style classes are defined in the js/modules/header.js viewmodel. See down in the appNavData definition (lines 92-117) that each menu entry is represented by an object, and each of those objects has a key for iconClass: which is a string that gets passed into the header template and used for the icon styling.The first entry in that iconClass: string takes the form demo-xxxxx-icon-24 (you can find the CSS that defines these classes in the css/demo-alta-patterns-min file). We’re going to replace that portion of the style with FontAwesome style references.You can pick the icon you want by perusing the FontAwesome cheatsheet. Drill down on your favorite icon and notice that the class names take the format fa-iconname. We also need to add the fa class to the mix, and I’ve found that playing with the sizes is necessary: I needed fa-lg to make things look right in the QuickStart menubar. So to swap out the People tab’s icon for something else, remove the demo-education-icon-24 from  line 101 of the header.js and replace it with fa fa-users fa-lg:Revel in your new iconsYou’re now using the FontAwesome icons in your menubar for the People tab:You can now use FontAwesome styles anywhere in your view templates or even build up the same convention as in the QuickStart’s header.js and header.tmpl.html files by passing them in as data-bound elements. Or if you’re really handy with fonts, you could make your own custom gylphs and set them up similar to the way the QuickStart did, with only the few gylphs you want to include instead of the big FontAwesome files.",
      "content_html": "<p>NetBeans 8.1 has a <a href=\"https://blogs.oracle.com/geertjan/entry/available_oracle_jet_plugin_for\">plugin for Oracle JET</a> that makes it absolutely simple to create a project modeled off the Oracle JET QuickStart template. Just choose <kbd>File &gt;&gt; New Project... &gt;&gt; HTML5/JavaScript &gt;&gt; Oracle JET QuickStart Basic</kbd>. Give it a name and a location, click <kbd><kbd>Finish</kbd></kbd>, then click the <kbd>Run Project</kbd> button. </p><p>You should be looking at a three-column, responsive, single-page app with a menubar that swaps out the content in the middle mainContent area. Notice those icons on the menubar for Home, People, Library, etc.:</p><div class=\"full zoomable\"><img src=\"/images/20151203/menubar.png\" /></div><p>Those icons come from a custom font named <code>App_iconfont.woff</code> in the <code>/css/fonts/</code> directory. If you open that font up, you’ll find that it only includes about 10 custom glyphs. What if you need different icons in your menubar?</p><p>We can add the awesome <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\">FontAwesome project</a> to our QuickStart project and use their myriad of icons in our own menubar.</p><h2 id=\"get-the-fontawesome-files\">Get the FontAwesome files</h2><p>First download the latest zip file from the <a href=\"https://fortawesome.github.io/Font-Awesome/#modal-download\">main FontAwesome page</a>. I’m using version 4.5.0 for this lab.</p><p>Unzip this file and then pluck out the resources to copy into your JET QuickStart folder hierarchy. Copy the font files in  <code>font-awesome-4.5.0/fonts/</code> to <code>JETQuickStart/css/fonts/</code>. Next, copy the CSS files in <code>font-awesome-4.5.0/css</code> to a newly-created directory at <code>JETQuickStart/css/libs/fa/</code>. Your project should look like this in NetBeans:</p><div class=\"full zoomable\"><img src=\"/images/20151203/projectfiles.png\" /></div><h2 id=\"modify-the-css-to-match-oraclejet\">Modify the CSS to match OracleJET</h2><p>We need to tweak the FontAwesome CSS files to point to the proper locations in your project.</p><p>Open the <code>JETQuickStart/css/libs/fa/font-awesome.css</code> in NetBeans. Do an <kbd>Edit &gt;&gt; Replace...</kbd> and search for the text <code>../fonts/fontawesome</code>, replacing it with the text <code>../../fonts/fontawesome</code>. You should get 6 hits. Click <kbd>Replace All</kbd>.</p><p>Now do the same for the minified version of the file <code>JETQuickStart/css/libs/fa/font-awesome.min.css</code>. If you open it right away in NetBeans, it will remember your Find/Replace strings and you can just click <kbd>Replace All</kbd> again.</p><p>Close and save both files. </p><p>This points the FontAwesome stylesheets in the right direction to find the actual font files in your project structure.</p><h2 id=\"link-everything-into-your-project\">Link everything into your project</h2><p>Now we need to tell the QuickStart project about the FontAwesome CSS files. </p><p>Open the <code>index.html</code> file out of the Site Root by double-clicking on it. Find the line in the <code>&lt;head&gt;</code> section just above the <code>override.css</code> line (line 32 in my file). This is where we will insert the reference to the FontAwesome CSS file.</p><p>The easiest way is to grab the <code>font-awesome.min.css</code> file in the Projects hierarchy with the mouse and drag it to the blank line you want to add it into. NetBeans will create the proper <code>&lt;link ... &gt;</code> tag for you. You can add spacing and a comment if you like.</p><div class=\"full zoomable\"><img src=\"/images/20151203/newcss.png\" /></div><h2 id=\"modify-the-icons-in-your-menubar-code\">Modify the icons in your menubar code</h2><p>Everything is in place to use the FontAwesome icons. Now we just need to know what style classes to use and where to put them.</p><p>If you are looking to swap out the menubar icons in the QuickStart project, you’ll find the icon style classes are defined in the <code>js/modules/header.js</code> viewmodel. See down in the <code>appNavData</code> definition (lines 92-117) that each menu entry is represented by an object, and each of those objects has a key for <code>iconClass:</code> which is a string that gets passed into the header template and used for the icon styling.</p><p>The first entry in that <code>iconClass:</code> string takes the form <code>demo-xxxxx-icon-24</code> (you can find the CSS that defines these classes in the <code>css/demo-alta-patterns-min</code> file). We’re going to replace that portion of the style with FontAwesome style references.</p><p>You can pick the icon you want by <a href=\"https://fortawesome.github.io/Font-Awesome/icons/\">perusing the FontAwesome cheatsheet</a>. Drill down on your favorite icon and notice that the class names take the format <code>fa-iconname</code>. We also need to add the <code>fa</code> class to the mix, and I’ve found that playing with the sizes is necessary: I needed <code>fa-lg</code> to make things look right in the QuickStart menubar. </p><p>So to swap out the People tab’s icon for something else, remove the <code>demo-education-icon-24</code> from  line 101 of the <code>header.js</code> and replace it with <code>fa fa-users fa-lg</code>:</p><div class=\"full zoomable\"><img src=\"/images/20151203/newpeoplestyle.png\" /></div><h2 id=\"revel-in-your-new-icons\">Revel in your new icons</h2><p>You’re now using the FontAwesome icons in your menubar for the People tab:</p><div class=\"full zoomable\"><img src=\"/images/20151203/newmenubar.png\" /></div><p>You can now use FontAwesome styles anywhere in your view templates or even build up the same convention as in the QuickStart’s <code>header.js</code> and <code>header.tmpl.html</code> files by passing them in as data-bound elements. </p><p>Or if you’re really handy with fonts, you could make your own custom gylphs and set them up similar to the way the QuickStart did, with only the few gylphs you want to include instead of the big FontAwesome files.</p>"
    },
  
    {
      "title": "Learning Knockout.js",
      "date_published": "2015-11-23T00:00:00+00:00",
      "date_modified": "2015-11-23T00:00:00+00:00",
      "id": "/2015/11/23/learning-knockout-js/",
      "url": "http://www.likeahouseafire.com/2015/11/23/learning-knockout-js/",
      
      
      
      "tags": ["Knockout","Oracle JET","JavaScript"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Oracle JET leans on Knockout.js for data binding.  It's not an absolute requirement because JET is modular, but...",
      "content_text": "Oracle JET leans on Knockout.js for data binding.  It’s not an absolute requirement because JET is modular, but the JET sample apps and templates do come with Knockout baked in.This is a decent intro to Knockout.js:Learning Knockout.js from Packt Publishing.  In the video tutorials Robert Gaut reviews some design patterns and uses his foundation code to discuss bindings, context, and custom functions. They even gave me a fancy certificate!The video doesn’t introduce AMD and RequireJS until the end and then only brushes on it in a quick lesson, so you’ll need to take that in consideration when looking at the Oracle JET sample code.For that, you could take a look at Building Large, Maintainable, and Testable Knockout.js Applications by Jonathan Creamer.  He starts his article with coverage of require.js and builds up an app from there. He also discusses “the this problem” to give some background on why you keep seeing var self = this in code samples.Another couple articles (ht Jim Marion) are The Top 10 Mistakes That KnockoutJS Developers Make by Mike Mellenthin and 10 Things to Know About KnockoutJS on Day One. Sometimes reading what people much smarter than me and farther along in their adoption of tools or techniques helps me get a feel for what I need to learn.Here’s a video straight from the horse’s mouth:  Steve Sanderson himself discusses building a single page app with Knockout in Architecting large Single Page Applications with Knockout.js. Sanderson has a few other recorded videos out there, but I haven’t gotten to them all yet.Also, there’s the Knockout.js website itself, with a series of tutorials that walk through the basics of data binding.",
      "content_html": "<p>Oracle JET leans on Knockout.js for data binding.  It’s <a href=\"https://blogs.oracle.com/geertjan/entry/data_binding_with_oracle_jet\">not an absolute requirement</a> because JET is modular, but the JET sample apps and templates do come with Knockout baked in.</p><p>This is a decent intro to Knockout.js:<a href=\"https://www.udemy.com/learning-knockoutjs/learn/#/\">Learning Knockout.js from Packt Publishing</a>.  In the video tutorials Robert Gaut reviews some design patterns and uses his foundation code to discuss bindings, context, and custom functions. They even gave me a fancy certificate!</p><div class=\"full zoomable\"><img width=\"300\" src=\"/images/20151123/certificate.jpg\" /></div><p>The video doesn’t introduce AMD and RequireJS until the end and then only brushes on it in a quick lesson, so you’ll need to take that in consideration when looking at the Oracle JET sample code.</p><p>For that, you could take a look at <a href=\"https://code.tutsplus.com/tutorials/building-large-maintainable-and-testable-knockoutjs-applications--net-30996\">Building Large, Maintainable, and Testable Knockout.js Applications</a> by Jonathan Creamer.  He starts his article with coverage of require.js and builds up an app from there. He also discusses “the <code>this</code> problem” to give some background on why you keep seeing <code>var self = this</code> in code samples.</p><p>Another couple articles (ht <a href=\"http://jjmpsj.blogspot.com/\">Jim Marion</a>) are <a href=\"https://www.airpair.com/knockout/posts/top-10-mistakes-knockoutjs\">The Top 10 Mistakes That KnockoutJS Developers Make</a> by Mike Mellenthin and <a href=\"http://www.knockmeout.net/2011/06/10-things-to-know-about-knockoutjs-on.html\">10 Things to Know About KnockoutJS on Day One</a>. Sometimes reading what people much smarter than me and farther along in their adoption of tools or techniques helps me get a feel for what I need to learn.</p><p>Here’s a video straight from the horse’s mouth:  Steve Sanderson himself discusses building a single page app with Knockout in <a href=\"https://vimeo.com/97519516\">Architecting large Single Page Applications with Knockout.js</a>. Sanderson has a few other recorded videos out there, but I haven’t gotten to them all yet.</p><p>Also, there’s the <a href=\"http://learn.knockoutjs.com/\">Knockout.js website itself</a>, with a series of tutorials that walk through the basics of data binding.</p>"
    },
  
    {
      "title": "X-APEX-STATUS-CODE and APEX RESTful Services",
      "date_published": "2015-06-17T00:00:00+00:00",
      "date_modified": "2015-06-17T00:00:00+00:00",
      "id": "/2015/06/17/x-apex-status-code-and-restful-services/",
      "url": "http://www.likeahouseafire.com/2015/06/17/x-apex-status-code-and-restful-services/",
      
      
      
      "tags": ["APEX","REST"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Sending back the HTTP Status Code you want to send",
      "content_text": "When using the APEX RESTful Services to develop endpoints, you can get pretty funky and create entire PL/SQL handlers for your RESTful endpoints. This is especially useful for POSTs because you can pluck off inbound HTTP headers and stuff them into parameters in the RESTful handler, and then reference those parameters as bind variables in your PL/SQL. You can also send back bind variables in the outbound response, either as headers or in the body.We ran into an issue where we were using the header values to insert into a table. The problem came when a row already existed in the table: the SQL insert would fail, but the RESTful handler didn’t handle it gracefully or pass on the error. Instead, it would throw a 500 status code and send back HTML generated by the RESTful listener. The HTML was generic and not very helpful, and we couldn’t put the RESTful listener into debug mode because we were running on DBSchema Service (and who wants to send debug responses to consumers of their RESTful APIs, anyway?).Instead, we wanted to send an HTTP status code that more accurately reflected the error on the insert, and perhaps even included a description in the message body. Turns out you can explicitly set the HTTP status code on the RESTful handler’s response using the documentation for X-APEX-STATUS-CODE. We were able to hack up the PL/SQL for our POST handler and get it to trap for the database constraint that was preventing duplicate rows with an EXCEPTION block. Now instead of a horrible HTML 500 error page, the service returns a nice 422 (seemed like the right error code for duplicate row) and it also returns a json text object for good measure:The trick was to flesh out the code for the handler into a proper pl/sql block. There’s also that special OUT parameter named X-APEX-STATUS-CODE that the APEX listener will put into the HTTP headers if you ask it real nice.Here’s the code that did the trick:/* original code: insert into im_favorites (server, engagement_name) values (:server_name, :engagement) */ /* fancy new code from here: http://www.oracle.com/technetwork/database/database-cloud/public/restful-wp-1844130.pdf */ DECLARE--setup variables to hold the post-process queries from the database v_en im_favorites.engagement_name%type; v_existing_en im_favorites.engagement_name%type; BEGIN--regular insert from the parameters passed in on URL and header INSERT into im_favorites(server, engagement_name) values(:server_name, :engagement) returning engagement_name into v_en;--set the http status code :status := 201;--put the database&#39;s new data into the returned json :engagement_response := v_en; commit; EXCEPTION--if there&#39;s a row already in the database, will throw a dup_val_on_index exception    when dup_val_on_index then      select engagement_name        into v_existing_en        from im_favorites        where server = :server_name;--set the http status code to 422      :status := 422;--create a descriptive message to put in the returned json      :engagement_response := &#39;Attempted to enter: &#39;&#39;&#39; || :engagement || &#39;&#39;&#39;.  Already exists as: &#39;&#39;&#39; || v_existing_en || &#39;&#39;&#39; for server: &#39; || :server_name; END;And for good measure, here’s the parameters as defined for the RESTful handler:",
      "content_html": "<p>When using the <a href=\"http://www.oracle.com/technetwork/developer-tools/rest-data-services/documentation/listener-dev-guide-1979546.html\">APEX RESTful Services</a> to develop endpoints, you can get pretty funky and create entire PL/SQL handlers for your RESTful endpoints. </p><p>This is especially useful for POSTs because you can pluck off inbound HTTP headers and stuff them into parameters in the RESTful handler, and then reference those parameters as bind variables in your PL/SQL. You can also send back bind variables in the outbound response, either as headers or in the body.</p><p>We ran into an issue where we were using the header values to insert into a table. The problem came when a row already existed in the table: the SQL insert would fail, but the RESTful handler didn’t handle it gracefully or pass on the error. Instead, it would throw a <code>500</code> status code and send back HTML generated by the RESTful listener. The HTML was generic and not very helpful, and we couldn’t put the RESTful listener into debug mode because we were running on DBSchema Service (and who wants to send debug responses to consumers of their RESTful APIs, anyway?).</p><div class=\"full zoomable\"><img src=\"/images/20150617/500error.png\" /></div><p>Instead, we wanted to send an HTTP status code that more accurately reflected the error on the insert, and perhaps even included a description in the message body. Turns out you can explicitly set the HTTP status code on the RESTful handler’s response using the <a href=\"https://docs.oracle.com/cd/E21611_01/doc.11/e21058/rest_api.htm#AELIG7136\">documentation for X-APEX-STATUS-CODE</a>. </p><p>We were able to hack up the PL/SQL for our POST handler and get it to trap for the database constraint that was preventing duplicate rows with an <code>EXCEPTION</code> block. Now instead of a horrible HTML <code>500</code> error page, the service returns a nice <code>422</code> (seemed like the right error code for duplicate row) and it also returns a json text object for good measure:</p><div class=\"full zoomable\"><img src=\"/images/20150617/422error.png\" /></div><p>The trick was to flesh out the code for the handler into a proper pl/sql block. There’s also that special OUT parameter named X-APEX-STATUS-CODE that the APEX listener will put into the HTTP headers if you ask it real nice.</p><p>Here’s the code that did the trick:</p><div class=\"highlight\"><pre><code class=\"language-sql\" data-lang=\"sql\"><span class=\"cm\">/* original code: </span><span class=\"cm\">insert into im_favorites (server, engagement_name) values (:server_name, :engagement) */</span> <span class=\"cm\">/* fancy new code from here: http://www.oracle.com/technetwork/database/database-cloud/public/restful-wp-1844130.pdf */</span> <span class=\"k\">DECLARE</span><span class=\"c1\">--setup variables to hold the post-process queries from the database</span> <span class=\"n\">v_en</span> <span class=\"n\">im_favorites</span><span class=\"p\">.</span><span class=\"n\">engagement_name</span><span class=\"o\">%</span><span class=\"k\">type</span><span class=\"p\">;</span> <span class=\"n\">v_existing_en</span> <span class=\"n\">im_favorites</span><span class=\"p\">.</span><span class=\"n\">engagement_name</span><span class=\"o\">%</span><span class=\"k\">type</span><span class=\"p\">;</span> <span class=\"k\">BEGIN</span><span class=\"c1\">--regular insert from the parameters passed in on URL and header</span> <span class=\"k\">INSERT</span> <span class=\"k\">into</span> <span class=\"n\">im_favorites</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"n\">engagement_name</span><span class=\"p\">)</span> <span class=\"k\">values</span><span class=\"p\">(:</span><span class=\"k\">server_name</span><span class=\"p\">,</span> <span class=\"p\">:</span><span class=\"n\">engagement</span><span class=\"p\">)</span> <span class=\"n\">returning</span> <span class=\"n\">engagement_name</span> <span class=\"k\">into</span> <span class=\"n\">v_en</span><span class=\"p\">;</span><span class=\"c1\">--set the http status code</span> <span class=\"p\">:</span><span class=\"n\">status</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"mi\">201</span><span class=\"p\">;</span><span class=\"c1\">--put the database&#39;s new data into the returned json</span> <span class=\"p\">:</span><span class=\"n\">engagement_response</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"n\">v_en</span><span class=\"p\">;</span> <span class=\"k\">commit</span><span class=\"p\">;</span> <span class=\"k\">EXCEPTION</span><span class=\"c1\">--if there&#39;s a row already in the database, will throw a dup_val_on_index exception</span>    <span class=\"k\">when</span> <span class=\"n\">dup_val_on_index</span> <span class=\"k\">then</span>      <span class=\"k\">select</span> <span class=\"n\">engagement_name</span>        <span class=\"k\">into</span> <span class=\"n\">v_existing_en</span>        <span class=\"k\">from</span> <span class=\"n\">im_favorites</span>        <span class=\"k\">where</span> <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"p\">:</span><span class=\"k\">server_name</span><span class=\"p\">;</span><span class=\"c1\">--set the http status code to 422</span>      <span class=\"p\">:</span><span class=\"n\">status</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"mi\">422</span><span class=\"p\">;</span><span class=\"c1\">--create a descriptive message to put in the returned json</span>      <span class=\"p\">:</span><span class=\"n\">engagement_response</span> <span class=\"p\">:</span><span class=\"o\">=</span> <span class=\"s1\">&#39;Attempted to enter: &#39;&#39;&#39;</span> <span class=\"o\">||</span> <span class=\"p\">:</span><span class=\"n\">engagement</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;&#39;&#39;.  Already exists as: &#39;&#39;&#39;</span> <span class=\"o\">||</span> <span class=\"n\">v_existing_en</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;&#39;&#39; for server: &#39;</span> <span class=\"o\">||</span> <span class=\"p\">:</span><span class=\"k\">server_name</span><span class=\"p\">;</span> <span class=\"k\">END</span><span class=\"p\">;</span></code></pre></div><p>And for good measure, here’s the parameters as defined for the RESTful handler:</p><div class=\"full zoomable\"><img width=\"100%\" src=\"/images/20150617/parameters.png\" /></div>"
    },
  
    {
      "title": "How do you add a play/pause bar in Swift?",
      "date_published": "2015-06-04T00:00:00+00:00",
      "date_modified": "2015-06-04T00:00:00+00:00",
      "id": "/2015/06/04/how-do-you-add-a-play-pause-bar-in-Swift/",
      "url": "http://www.likeahouseafire.com/2015/06/04/how-do-you-add-a-play-pause-bar-in-Swift/",
      
      
      
      "tags": ["iOS","Swift"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "So let's say you're building a iOS app that plays back an audio file, perhaps as an assignment for...",
      "content_text": "So let’s say you’re building a iOS app that plays back an audio file, perhaps as an assignment for the Udacity iOS Nanodegree course…Well, first you’ll need a game plan:  We need a toolbar to hold the buttons  We need fast-forward and reverse buttons  These buttons need to be wired up to actions   Those actions need to jump forward or rewind the playing audioAlso, some hints will be good.  We’ll be back to scour Google and StackOverflow in time, but first there’s a nice (albeit dated) bit of sample code on Apple’s Developer Website.  Sure, it’s written in Objective C and predates iOS 8, but it will at least give us something to look at. Download the avTouch sample code and after unzipping, open it in Xcode.Will it build?  Of course not, it’s a year and a half old and is full of deprecated methods and other warnings.  Our biggest problem is a error in the awakeFromNib method of avTouchController: “Cannot initialize a parameter of type ‘id' with an lvalue of type 'avTouchController *'\"What to do?  Hey, it’s not my code, and I don’t know enough about iOS or Objective C to troubleshoot this.  But I know how to comment out a line, and after putting in two slashes at the front of the troublesome line the project runs in the simulator!  Clicking around back in Xcode we find avTouchViewController.xib, and it confirms that the UI is just a bunch of controls wired up to outlets and events.  The forward and rewind buttons are, well, buttons wrapped in a toolbar, and the timeline is just a horizontal slider with labels on either end.  We’ll do similar with our code.Back in the Pitch Perfect app we started for the Udacity project, we’ll open the Play Sounds View Controller and add the UI components.   Add a Toolbar to the bottom of the view.  Next add four Flexible Space Bar Button Items and three Buttons to the toolbar, alternating between them.   Notice how Xcode wraps the buttons inside of Bar Button Items for us.  Delete the Bar Button Item that was a placeholder in the toolbar it was first created. Now let’s replace the text of those items with buttons.  In fact, we can drag our current stop button onto the outline and then delete the item that was there.  Xcode will create a Bar Button Item to wrap our button for us.We’ll import two images for forward and back.  Create image sets and then change the properties for the two buttons, removing the text and then using the new images.  You may find it easier to click on the buttons themselves in the view’s document outline.  forward@2x-iphone.png  back@2x-iphone.pngNow to wire these up to do something.Change Xcode’s view to show the Assistant Editor and reveal the PlaySoundsViewController.swift file for this view.  We need a method to fast forward when we tap the forward button.   Control-drag from the forward button into the view controller code window (again, maybe easier to drag from the document outline), and release in the proper place to insert an action.  After releasing the drag, change the connection to Action and name it jumpForward and make it Type UIButton.We’ll start with a simple use case:  tapping the button makes it go forward 0.2 seconds.  Use this code for your action:@IBAction func jumpForward(sender: UIButton) {if (audioPlayer.currentTime &gt; 0.0 &amp;&amp; audioPlayer.currentTime &lt; audioPlayer.duration) {         audioPlayer.currentTime = audioPlayer.currentTime + 0.2        }    }Give it a try in the simulator.  It works!  Sort of.  Tapping the button over and over again isn’t the behavior we expect.  We want to hold down the forward button and have it shuttle forward, and then resume play when we let go.    We’ll have to change our code a bit, plus hook up actions to the other events for the button, such as Touch Up Inside and Outside.  What we want is to have the button repeatedly call a function to jump forward 0.2 seconds.  Although we also want a slight pause in between jumps so that we can hear a bit of audio play.  We need a timer event to fire over and over again until we let go.We can use an NSTimer to do this (stole that idea from the Apple sample code).  We have to call it a little differently in Swift.Scroll to the top of your view controller class and declare this variable:var timer = NSTimer()Now we need a new Action for the touch down event.  Drag from our forward button’s Connection Inspector handle to our view controller and create a new action named ffwPressed.  We’ll reuse the jumpForward code as the function that ffwPressed will repeatedly call.  But we need to change it so that any object can call it, so change the sender to AnyObject.Now we’ll add the code to schedule a timer when ffwPressed is called.  When you’re done your code for these two methods should look like this:@IBAction func ffwPressed(sender: UIButton) {        timer = NSTimer.scheduledTimerWithTimeInterval(0.2, target:self, selector: Selector(&quot;jumpForward&quot;), userInfo: nil, repeats: true)    }        func jumpForward() {        if (audioPlayer.currentTime &gt; 0.0 &amp;&amp; audioPlayer.currentTime &lt; audioPlayer.duration) {            audioPlayer.currentTime = audioPlayer.currentTime + 0.2        }    }This will be great!  When we press down, the timer will repeatedly call the jumpForward function every 0.2 seconds.  Now we need a function to stop the timer when we let go.From the Connections Inspector find the Touch Up Inside event and click the tiny X to delete the existing mapping to jumpForward().  Now drag the handle for Touch Up Inside to create a new action to give it a new mapping.  Name this Action ffwReleased. When we let go, we want the timer to stop firing, so we can just invalidate the timer.  Add this code to the view controller:@IBAction func ffwReleased(sender: UIButton) {        timer.invalidate()    }While we’re at it, we should map this same function to Touch Up Outside and Touch Drag Outside so that ffwReleased() runs no matter how your finger leaves the button.  Connect these events to the ffwReleased() action too.Test it in the simulator:  it works!Last thing to do is repeat all that with the rewind button.  Now you’ve got a working toolbar!",
      "content_html": "<p>So let’s say you’re building a iOS app that plays back an audio file, perhaps as an assignment for the <a href=\"https://www.udacity.com/course/ios-developer-nanodegree--nd003\">Udacity iOS Nanodegree</a> course…</p><p>Well, first you’ll need a game plan:</p><ul>  <li>We need a toolbar to hold the buttons</li>  <li>We need fast-forward and reverse buttons</li>  <li>These buttons need to be wired up to actions </li>  <li>Those actions need to jump forward or rewind the playing audio</li></ul><p>Also, some hints will be good.  We’ll be back to scour Google and StackOverflow in time, but first there’s a nice (albeit dated) bit of sample code on <a href=\"https://developer.apple.com/library/ios/samplecode/avTouch/Introduction/Intro.html\">Apple’s Developer Website</a>.  Sure, it’s written in Objective C and predates iOS 8, but it will at least give us something to look at. Download the avTouch sample code and after unzipping, open it in Xcode.</p><p>Will it build?  Of course not, it’s a year and a half old and is full of deprecated methods and other warnings.  Our biggest problem is a error in the awakeFromNib method of avTouchController: “Cannot initialize a parameter of type ‘id<avaudiosessiondelegate>' with an lvalue of type 'avTouchController *'\"</avaudiosessiondelegate></p><div class=\"full zoomable\"><img width=\"800\" src=\"/images/20150604/xcodeerror.jpg\" /></div><p>What to do?  Hey, it’s not my code, and I don’t know enough about iOS or Objective C to troubleshoot this.  But I know how to comment out a line, and after putting in two slashes at the front of the troublesome line the project runs in the simulator!  </p><div class=\"full zoomable\"><img width=\"300\" src=\"/images/20150604/avTouch.jpg\" /></div><p>Clicking around back in Xcode we find avTouchViewController.xib, and it confirms that the UI is just a bunch of controls wired up to outlets and events.  The forward and rewind buttons are, well, buttons wrapped in a toolbar, and the timeline is just a horizontal slider with labels on either end.  We’ll do similar with our code.</p><div class=\"full zoomable\"><img width=\"700\" src=\"/images/20150604/avTouchViewController.xib.jpg\" /></div><p>Back in the Pitch Perfect app we started for the Udacity project, we’ll open the Play Sounds View Controller and add the UI components.   Add a Toolbar to the bottom of the view.  Next add four Flexible Space Bar Button Items and three Buttons to the toolbar, alternating between them.   Notice how Xcode wraps the buttons inside of Bar Button Items for us.  Delete the Bar Button Item that was a placeholder in the toolbar it was first created. </p><div class=\"full zoomable\"><img src=\"/images/20150604/toolbar.jpg\" /></div><p>Now let’s replace the text of those items with buttons.  In fact, we can drag our current stop button onto the outline and then delete the item that was there.  Xcode will create a Bar Button Item to wrap our button for us.</p><p>We’ll import two images for forward and back.  Create image sets and then change the properties for the two buttons, removing the text and then using the new images.  You may find it easier to click on the buttons themselves in the view’s document outline.</p><ul>  <li><a href=\"/images/20150604/forward@2x-iphone.png\">forward@2x-iphone.png</a></li>  <li><a href=\"/images/20150604/back@2x-iphone.png\">back@2x-iphone.png</a></li></ul><div class=\"full zoomable\"><img width=\"700\" src=\"/images/20150604/buttons.jpg\" /></div><p>Now to wire these up to do something.</p><p>Change Xcode’s view to show the Assistant Editor and reveal the PlaySoundsViewController.swift file for this view.  We need a method to fast forward when we tap the forward button.   Control-drag from the forward button into the view controller code window (again, maybe easier to drag from the document outline), and release in the proper place to insert an action.  After releasing the drag, change the connection to Action and name it jumpForward and make it Type UIButton.</p><div class=\"full zoomable\"><img width=\"500\" src=\"/images/20150604/jumpForward.jpg\" /></div><p>We’ll start with a simple use case:  tapping the button makes it go forward 0.2 seconds.  Use this code for your action:</p><div class=\"highlight\"><pre><code class=\"language-obj-c\" data-lang=\"obj-c\"><span class=\"p\">@</span><span class=\"kt\">IBAction</span> <span class=\"n\">func</span> <span class=\"n\">jumpForward</span><span class=\"p\">(</span><span class=\"nl\">sender</span><span class=\"p\">:</span> <span class=\"bp\">UIButton</span><span class=\"p\">)</span> <span class=\"p\">{</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">audioPlayer</span><span class=\"p\">.</span><span class=\"n\">currentTime</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">audioPlayer</span><span class=\"p\">.</span><span class=\"n\">currentTime</span> <span class=\"o\">&lt;</span> <span class=\"n\">audioPlayer</span><span class=\"p\">.</span><span class=\"n\">duration</span><span class=\"p\">)</span> <span class=\"p\">{</span>         <span class=\"n\">audioPlayer</span><span class=\"p\">.</span><span class=\"n\">currentTime</span> <span class=\"o\">=</span> <span class=\"n\">audioPlayer</span><span class=\"p\">.</span><span class=\"n\">currentTime</span> <span class=\"o\">+</span> <span class=\"mf\">0.2</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span></code></pre></div><p>Give it a try in the simulator.  It works!  Sort of.  Tapping the button over and over again isn’t the behavior we expect.  We want to hold down the forward button and have it shuttle forward, and then resume play when we let go.    We’ll have to change our code a bit, plus hook up actions to the other events for the button, such as Touch Up Inside and Outside.  </p><p>What we want is to have the button repeatedly call a function to jump forward 0.2 seconds.  Although we also want a slight pause in between jumps so that we can hear a bit of audio play.  We need a timer event to fire over and over again until we let go.</p><p>We can use an NSTimer to do this (stole that idea from the Apple sample code).  We have to call it a little differently in Swift.</p><p>Scroll to the top of your view controller class and declare this variable:</p><div class=\"highlight\"><pre><code class=\"language-obj-c\" data-lang=\"obj-c\"><span class=\"n\">var</span> <span class=\"n\">timer</span> <span class=\"o\">=</span> <span class=\"bp\">NSTimer</span><span class=\"p\">()</span></code></pre></div><p>Now we need a new Action for the touch down event.  Drag from our forward button’s Connection Inspector handle to our view controller and create a new action named ffwPressed.  </p><p>We’ll reuse the jumpForward code as the function that ffwPressed will repeatedly call.  But we need to change it so that any object can call it, so change the sender to AnyObject.</p><p>Now we’ll add the code to schedule a timer when ffwPressed is called.  When you’re done your code for these two methods should look like this:</p><div class=\"highlight\"><pre><code class=\"language-obj-c\" data-lang=\"obj-c\"><span class=\"p\">@</span><span class=\"kt\">IBAction</span> <span class=\"n\">func</span> <span class=\"n\">ffwPressed</span><span class=\"p\">(</span><span class=\"nl\">sender</span><span class=\"p\">:</span> <span class=\"bp\">UIButton</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">timer</span> <span class=\"o\">=</span> <span class=\"bp\">NSTimer</span><span class=\"p\">.</span><span class=\"n\">scheduledTimerWithTimeInterval</span><span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"nl\">target</span><span class=\"p\">:</span><span class=\"nb\">self</span><span class=\"p\">,</span> <span class=\"nl\">selector</span><span class=\"p\">:</span> <span class=\"n\">Selector</span><span class=\"p\">(</span><span class=\"s\">&quot;jumpForward&quot;</span><span class=\"p\">),</span> <span class=\"nl\">userInfo</span><span class=\"p\">:</span> <span class=\"nb\">nil</span><span class=\"p\">,</span> <span class=\"nl\">repeats</span><span class=\"p\">:</span> <span class=\"nb\">true</span><span class=\"p\">)</span>    <span class=\"p\">}</span>        <span class=\"n\">func</span> <span class=\"n\">jumpForward</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">audioPlayer</span><span class=\"p\">.</span><span class=\"n\">currentTime</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">audioPlayer</span><span class=\"p\">.</span><span class=\"n\">currentTime</span> <span class=\"o\">&lt;</span> <span class=\"n\">audioPlayer</span><span class=\"p\">.</span><span class=\"n\">duration</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"n\">audioPlayer</span><span class=\"p\">.</span><span class=\"n\">currentTime</span> <span class=\"o\">=</span> <span class=\"n\">audioPlayer</span><span class=\"p\">.</span><span class=\"n\">currentTime</span> <span class=\"o\">+</span> <span class=\"mf\">0.2</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span></code></pre></div><p>This will be great!  When we press down, the timer will repeatedly call the jumpForward function every 0.2 seconds.  Now we need a function to stop the timer when we let go.</p><p>From the Connections Inspector find the Touch Up Inside event and click the tiny X to delete the existing mapping to jumpForward().  Now drag the handle for Touch Up Inside to create a new action to give it a new mapping.  Name this Action ffwReleased. </p><p>When we let go, we want the timer to stop firing, so we can just invalidate the timer.  Add this code to the view controller:</p><div class=\"highlight\"><pre><code class=\"language-obj-c\" data-lang=\"obj-c\"><span class=\"p\">@</span><span class=\"kt\">IBAction</span> <span class=\"n\">func</span> <span class=\"n\">ffwReleased</span><span class=\"p\">(</span><span class=\"nl\">sender</span><span class=\"p\">:</span> <span class=\"bp\">UIButton</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">timer</span><span class=\"p\">.</span><span class=\"n\">invalidate</span><span class=\"p\">()</span>    <span class=\"p\">}</span></code></pre></div><p>While we’re at it, we should map this same function to Touch Up Outside and Touch Drag Outside so that ffwReleased() runs no matter how your finger leaves the button.  Connect these events to the ffwReleased() action too.</p><p>Test it in the simulator:  it works!</p><p>Last thing to do is repeat all that with the rewind button.  Now you’ve got a working toolbar!</p><div class=\"full zoomable\"><img width=\"300\" src=\"/images/20150604/finished.jpg\" /></div>"
    },
  
    {
      "title": "Create a Stock Ticker WebService in Oracle Sales Cloud R9",
      "date_published": "2015-01-20T00:00:00+00:00",
      "date_modified": "2015-01-20T00:00:00+00:00",
      "id": "/2015/01/20/create-stock-ticker-webservice-osc-r9/",
      "url": "http://www.likeahouseafire.com/2015/01/20/create-stock-ticker-webservice-osc-r9/",
      
      
      
      "tags": ["Sales Cloud","Web Services"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "How to hook up a Sales Cloud to an external SOAP Web Service",
      "content_text": "How to hook up a Sales Cloud to an external SOAP Web Service:StockQuote Web ServiceWe’ll use the StockQuote SOAP web service available online as of 20-Jan-2015 at:  http://www.webservicex.net/stockquote.asmx?op=GetQuoteCreate the Web Service in Sales Cloud App ComposerLog into Sales Cloud as matt.hooper and create and activate a sandbox.  Launch App Composer and click on Web Services in the Common Setup tree.Click the Create Web Service Reference button on the toolbar to create a new entry.Create SOAP Web Service ConnectionFill in the details for the new web service:Name:  StockQuoteWSDL URL:  http://www.webservicex.net/stockquote.asmx?wsdlClick Read WSDL and give it a moment to retrieve the service details.Refine SOAP Connection DetailsThe Service should be automatically selected as {http://www.webserviceX.NET/}StockQuote Change the Port to StockQuoteSoap12.Click None for the Security Scheme and then click Save and CloseAdd a custom field to the Account ObjectNavigate to the Application Common, Standard Objects tree and select Account » Fields.In the Custom tab, click on the Create a Custom Field button in the toolbar, then choose Formula and click OK.Formula Field AttributesCreate the field with the following details:Formula Type:  TextDisplay Label: Latest Stock PriceDisplay Width: 30 charactersDisplay Type:  Multiline Text AreaName: LatestStockPriceClick NextBuild the formulaUse the palette to build the formula, or simplly paste this text into the expression editor:/* * StockTicker field formula * last updated 20-Jan-2015 * see [http://www.webservicex.net/stockquote.asmx?op=GetQuote](http://www.webservicex.net/stockquote.asmx?op=GetQuote) * */// intialize return variabledef lastPrice = &quot;UNKNOWN&quot;// build SOAP call with Account&#39;s StockSymbol field// wrapped in a nvl() in case the StockSymbol field is emptydef out = adf.webServices.StockQuote.GetQuote(nvl(StockSymbol,&quot;&quot;))// these will be used to parse the CDATA returned by the calldef sLast = &#39;&lt;Last&gt;&#39;def eLast = &#39;&lt;/Last&gt;&#39;def sChange = &#39;&lt;Change&gt;&#39;def eChange = &#39;&lt;/Change&gt;&#39;def sTime = &#39;&lt;Time&gt;&#39;def eTime = &#39;&lt;/Time&gt;&#39;def sDate = &#39;&lt;Date&gt;&#39;def eDate = &#39;&lt;/Date&gt;&#39;// find the starting position for last pricedef sPosition = out.indexOf(sLast)def ePosition = out.indexOf(eLast)// parse out just the sections of the out string between the tags only if &lt;Last&gt; was foundif ( sPosition != -1 ) {    lastPrice = out.substring(sPosition + 6, ePosition)     sPosition = out.indexOf(sChange)  ePosition = out.indexOf(eChange)  lastPrice += &#39; (&#39; + out.substring(sPosition + 8, ePosition)+ &#39;)\\n&#39;  sPosition = out.indexOf(sTime)  ePosition = out.indexOf(eTime)  lastPrice += &#39; as of &#39; + out.substring(sPosition + 6, ePosition)    sPosition = out.indexOf(sDate)  ePosition = out.indexOf(eDate)  lastPrice += &#39;,  &#39; + out.substring(sPosition + 6, ePosition)  }return lastPricePlace the Formula Field on the Right SUI PageNavigate to Account » Pages in the App Composer.Under Details Page Layouts, highlight the Default Layout and click the Edit Layout buttonEdit the Profile SubtabClick on the Profile sidebar subtab, and then click the Edit pencil next to SummaryPosition Field on PageScroll down the Available Fields to Latest Stock Price and click the right shuttle button to move it over.Use the Up button to positiion the new field underneath Stock Symbol.Click Save and Close.Test your new fieldNavigate back to the home page, and then into Accounts.Search for an account name such as A. C. Networks or define a saved search.  Click on the account name link.On the Account subtabs, click the Profile tab (second from the top).The first time in, your Latest Stock Price will be UNKNOWN, because there is no ticker in the Stock Symbol field.Ticker Data!Fill in the Stock Symbol field with a valid stock ticker symbol. Click **Save and Close **to return to the Accounts listing.Click again on the account name link and then on the Profile subtab.Note the updated stock price info in the Latest Stock Price field!",
      "content_html": "<p>How to hook up a Sales Cloud to an external SOAP Web Service:</p><h2 id=\"stockquote-web-service\">StockQuote Web Service</h2><p>We’ll use the StockQuote SOAP web service available online as of 20-Jan-2015 at:  <a href=\"http://www.webservicex.net/stockquote.asmx?op=GetQuote\">http://www.webservicex.net/stockquote.asmx?op=GetQuote</a></p><div class=\"full zoomable\"><img src=\"/images/20150120/stockquote-web-service.png\" /></div><h2 id=\"create-the-web-service-in-sales-cloud-app-composer\">Create the Web Service in Sales Cloud App Composer</h2><p>Log into Sales Cloud as matt.hooper and create and activate a sandbox.  </p><p>Launch App Composer and click on <strong>Web Services</strong> in the Common Setup tree.</p><p>Click the <strong>Create Web Service Reference</strong> button on the toolbar to create a new entry.</p><div class=\"full zoomable\"><img src=\"/images/20150120/create-the-web-service-in-sales-cloud-app-composer.png\" /></div><h2 id=\"create-soap-web-service-connection\">Create SOAP Web Service Connection</h2><p>Fill in the details for the new web service:</p><p>Name:  <strong>StockQuote</strong></p><p>WSDL URL:  <a href=\"http://www.webservicex.net/stockquote.asmx?wsdl\"><strong>http://www.webservicex.net/stockquote.asmx?wsdl</strong></a></p><p>Click <strong>Read WSDL</strong> and give it a moment to retrieve the service details.</p><div class=\"full zoomable\"><img src=\"/images/20150120/create-soap-web-service-connection.png\" /></div><h2 id=\"refine-soap-connection-details\">Refine SOAP Connection Details</h2><p>The Service should be automatically selected as <a href=\"{http://www.webserviceX.NET/}StockQuote\">{http://www.webserviceX.NET/}StockQuote</a> </p><p>Change the <strong>Port</strong> to StockQuoteSoap12.</p><p>Click <strong>None</strong> for the Security Scheme and then click <strong>Save and Close</strong></p><div class=\"full zoomable\"><img src=\"/images/20150120/refine-soap-connection-details.png\" /></div><h2 id=\"add-a-custom-field-to-the-account-object\">Add a custom field to the Account Object</h2><p>Navigate to the Application Common, Standard Objects tree and select <strong>Account » Fields</strong>.</p><p>In the Custom tab, click on the <strong>Create a Custom Field</strong> button in the toolbar, then choose <strong>Formula</strong> and click OK.</p><div class=\"full zoomable\"><img src=\"/images/20150120/add-a-custom-field-to-the-account-object.png\" /></div><h2 id=\"formula-field-attributes\">Formula Field Attributes</h2><p>Create the field with the following details:</p><p>Formula Type:  <strong>Text</strong></p><p>Display Label: <strong>Latest Stock Price</strong></p><p>Display Width: <strong>30</strong> characters</p><p>Display Type:  <strong>Multiline Text Area</strong></p><p>Name: <strong>LatestStockPrice</strong></p><p>Click <strong>Next</strong></p><div class=\"full zoomable\"><img src=\"/images/20150120/formula-field-attributes.png\" /></div><h2 id=\"build-the-formula\">Build the formula</h2><p>Use the palette to build the formula, or simplly paste this text into the expression editor:</p><div class=\"highlight\"><pre><code class=\"language-groovy\" data-lang=\"groovy\"><span class=\"cm\">/*</span><span class=\"cm\"> * StockTicker field formula</span><span class=\"cm\"> * last updated 20-Jan-2015</span><span class=\"cm\"> * see [http://www.webservicex.net/stockquote.asmx?op=GetQuote](http://www.webservicex.net/stockquote.asmx?op=GetQuote)</span><span class=\"cm\"> *</span><span class=\"cm\"> */</span><span class=\"c1\">// intialize return variable</span><span class=\"kt\">def</span> <span class=\"n\">lastPrice</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;UNKNOWN&quot;</span><span class=\"c1\">// build SOAP call with Account&#39;s StockSymbol field</span><span class=\"c1\">// wrapped in a nvl() in case the StockSymbol field is empty</span><span class=\"kt\">def</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">adf</span><span class=\"o\">.</span><span class=\"na\">webServices</span><span class=\"o\">.</span><span class=\"na\">StockQuote</span><span class=\"o\">.</span><span class=\"na\">GetQuote</span><span class=\"o\">(</span><span class=\"n\">nvl</span><span class=\"o\">(</span><span class=\"n\">StockSymbol</span><span class=\"o\">,</span><span class=\"s2\">&quot;&quot;</span><span class=\"o\">))</span><span class=\"c1\">// these will be used to parse the CDATA returned by the call</span><span class=\"kt\">def</span> <span class=\"n\">sLast</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;Last&gt;&#39;</span><span class=\"kt\">def</span> <span class=\"n\">eLast</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;/Last&gt;&#39;</span><span class=\"kt\">def</span> <span class=\"n\">sChange</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;Change&gt;&#39;</span><span class=\"kt\">def</span> <span class=\"n\">eChange</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;/Change&gt;&#39;</span><span class=\"kt\">def</span> <span class=\"n\">sTime</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;Time&gt;&#39;</span><span class=\"kt\">def</span> <span class=\"n\">eTime</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;/Time&gt;&#39;</span><span class=\"kt\">def</span> <span class=\"n\">sDate</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;Date&gt;&#39;</span><span class=\"kt\">def</span> <span class=\"n\">eDate</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;/Date&gt;&#39;</span><span class=\"c1\">// find the starting position for last price</span><span class=\"kt\">def</span> <span class=\"n\">sPosition</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">sLast</span><span class=\"o\">)</span><span class=\"kt\">def</span> <span class=\"n\">ePosition</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">eLast</span><span class=\"o\">)</span><span class=\"c1\">// parse out just the sections of the out string between the tags only if &lt;Last&gt; was found</span><span class=\"k\">if</span> <span class=\"o\">(</span> <span class=\"n\">sPosition</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">)</span> <span class=\"o\">{</span>    <span class=\"n\">lastPrice</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">sPosition</span> <span class=\"o\">+</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">ePosition</span><span class=\"o\">)</span>     <span class=\"n\">sPosition</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">sChange</span><span class=\"o\">)</span>  <span class=\"n\">ePosition</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">eChange</span><span class=\"o\">)</span>  <span class=\"n\">lastPrice</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; (&#39;</span> <span class=\"o\">+</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">sPosition</span> <span class=\"o\">+</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"n\">ePosition</span><span class=\"o\">)+</span> <span class=\"s1\">&#39;)\\n&#39;</span>  <span class=\"n\">sPosition</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">sTime</span><span class=\"o\">)</span>  <span class=\"n\">ePosition</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">eTime</span><span class=\"o\">)</span>  <span class=\"n\">lastPrice</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; as of &#39;</span> <span class=\"o\">+</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">sPosition</span> <span class=\"o\">+</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">ePosition</span><span class=\"o\">)</span>    <span class=\"n\">sPosition</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">sDate</span><span class=\"o\">)</span>  <span class=\"n\">ePosition</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">eDate</span><span class=\"o\">)</span>  <span class=\"n\">lastPrice</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;,  &#39;</span> <span class=\"o\">+</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">sPosition</span> <span class=\"o\">+</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"n\">ePosition</span><span class=\"o\">)</span>  <span class=\"o\">}</span><span class=\"k\">return</span> <span class=\"n\">lastPrice</span></code></pre></div><div class=\"full zoomable\"><img src=\"/images/20150120/build-the-formula.png\" /></div><h2 id=\"place-the-formula-field-on-the-right-sui-page\">Place the Formula Field on the Right SUI Page</h2><p>Navigate to <strong>Account » Pages</strong> in the App Composer.</p><p>Under <strong>Details Page Layouts</strong>, highlight the <strong>Default Layout</strong> and click the <strong>Edit Layout</strong> button</p><div class=\"full zoomable\"><img src=\"/images/20150120/place-the-formula-field-on-the-right-sui-page.png\" /></div><h2 id=\"edit-the-profile-subtab\">Edit the Profile Subtab</h2><p>Click on the <strong>Profile</strong> sidebar subtab, and then click the <strong>Edit</strong> pencil next to <strong>Summary</strong></p><div class=\"full zoomable\"><img src=\"/images/20150120/edit-the-profile-subtab.png\" /></div><h2 id=\"position-field-on-page\">Position Field on Page</h2><p>Scroll down the Available Fields to <strong>Latest Stock Price</strong> and click the right shuttle button to move it over.</p><p>Use the <strong>Up</strong> button to positiion the new field underneath <strong>Stock Symbol</strong>.</p><p>Click <strong>Save and Close</strong>.</p><div class=\"full zoomable\"><img src=\"/images/20150120/position-field-on-page.png\" /></div><h2 id=\"test-your-new-field\">Test your new field</h2><p>Navigate back to the home page, and then into <strong>Accounts</strong>.</p><p>Search for an account name such as <strong>A. C. Networks</strong> or define a saved search.  Click on the account name link.</p><p>On the Account subtabs, click the <strong>Profile</strong> tab (second from the top).</p><p>The first time in, your Latest Stock Price will be UNKNOWN, because there is no ticker in the Stock Symbol field.</p><div class=\"full zoomable\"><img src=\"/images/20150120/test-your-new-field.png\" /></div><h2 id=\"ticker-data\">Ticker Data!</h2><p>Fill in the <strong>Stock Symbol</strong> field with a valid stock ticker symbol. </p><p>Click **Save and Close **to return to the Accounts listing.</p><p>Click again on the account name link and then on the Profile subtab.</p><p>Note the updated stock price info in the <strong>Latest Stock Price</strong> field!</p><div class=\"full zoomable\"><img src=\"/images/20150120/ticker-data-.png\" /></div>"
    },
  
    {
      "title": "How I got Started on Oracle Java Cloud",
      "date_published": "2014-04-23T00:00:00+00:00",
      "date_modified": "2014-04-23T00:00:00+00:00",
      "id": "/2014/04/23/how-i-got-started-on-oracle-java-cloud/",
      "url": "http://www.likeahouseafire.com/2014/04/23/how-i-got-started-on-oracle-java-cloud/",
      
      
      
      
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "Thought to type up how I got NetBeans deploying to Java Cloud today.  There are some...",
      "content_text": "Thought to type up how I got NetBeans deploying to Java Cloud today.  There are some good videos buried under the Resources menu at cloud.oracle.com, along with a few other good resources in there.  I’m kicking myself, because I didn’t stumble onto these resources until I saw them on the demo app that gets deployed by default when your Java Cloud gets provisioned. This despite the well-labeled Resources menu at the top of the Cloud home page that literally pointed at these resources.Resources.  Who knew?Scroll down past the customer stories videos and you’ll find some short vignettes such as:Getting Started with the Oracle Java Cloud Service Using the NetBeans IDE for Developing Oracle Java Cloud Service Applications Deploy an application to an Oracle Java Cloud Service Those three videos were 22 minutes well spent.Meanwhile, here are the steps I followed to get up and running with NetBeans and Java Cloud:Get a Java Cloud trialYou need to get provisioned, and this will take a little while as it’s a two-stage process.  First, you sign up for a trial Java instance at cloud.oracle.com/tryit.  Fill out the forms and request the service.Now wait.  For a while.  You’ll eventually get an email from Oracle Cloud Admin asking you to activate your Trial.  Don’t dilly-dally: you need to activate the trial before you can access the cloud and the activation button is only active for a few days.  Click the Activate My Trial button in your email to do the actual provisioning.Now wait again.  For not nearly as long.  You’ll get another email from Oracle Cloud Admin, but this time with details on accessing your newly-spun up instance.  There are a lot of vital links and details in the email: your temporary password for the new instance, a link to your account dashboard (which is pretty much the same place) but with the all-important Identity Domain identifier listed, and direct links to the Java console URL and the Database ApEx instance that comes with your trial.  Take note of your Data Center listed in this section, just in case it comes in handy later.These direct links are useful, but I personally got messed up later on when I went to sign in directly at cloud.oracle.com/sign_in and tried to map up to this four-quadrant login screen:My Account in the top right takes your Oracle SSO sign in and gives you the dashboard of services you’re subscribed to.  This one was easy.  My Services in the top left will sign you into your services, but you need to make sure you’ve picked the right Data Center in the drop down.  I got hung up on this:  my trial is on the US Commercial 2 data center, but the page defaults to a different data center.  The login page that shows after you click Sign In to My Services will challenge you for your username, password and identity domain but it doesn’t draw attention to the fact that you might be signing into the wrong datacenter.  The only hint I had was that my password and identity domain wouldn’t get me in, and the forgot password link and challenge questions wouldn’t work either.  This was all because I had picked the wrong data center instead of clicking the direct links in my provisioning email.Identity Self Service is where you can change your identity domain password and set up those challenge questions.  Again, make sure you’ve selected the right datacenter or you won’t be able to sign into your identity domain.Have a look at the Java consoleIn your provisioning email, you should have a deep link to your Java Trial Service URL.  You can also get to this console URL from your My Services pages by drilling into the Overview page for your Java trial and then clicking the Java Console button:In the Java console you’ll have a sample app already deployed and running, named welcome-app.  You can click the Test Application button to get the URL for this sample app and have a look at the resources that sample page links off to.You can also use this console UI to deploy an app’s WAR or EAR file by hand, assuming your code passes all the Java Cloud whitelist tests.  But we’re going to set up the IDE to deploy directly.Downloading the SDK and configuring NetBeansThere are Oracle Cloud plugins for NetBeans, JDeveloper and Eclipse to enable deploying directly to the cloud.  I’ll walk through the steps that worked for me in NetBeans 8.0 for Mac. First, install the plugin into NetBeans via Tools &gt;&gt; Plugins &gt;&gt; Available Plugins.  Select the Oracle Cloud plugin in the Java EE category and click Install.Next, you need the Oracle Cloud SDK installed on your harddrive.  You can get to it from the links at cloud.oracle.com &gt;&gt; Downloads or from this direct link.  I chose the oracle-javacloud-sdk-14100.zip SDK because my Java Cloud service is running version 14.1.0.0.0 (you can find this stat in the Additional Information section at the bottom of your Java trial My Services Overview page).  Unzip this SDK into a folder on your harddrive and have it ready for the next step. Return to NetBeans and click on the Services tab (or pull down Window &gt;&gt; Services).  There should be an icon for Cloud.  Right-click it and choose Add Cloud...Choose Oracle Cloud and click Next.Fill in the details to match your provisioning email.  The Java and Database Service names are probably pre-filled, but not with the unique service names in your trial details, so be sure to update these fields. You are the service administrator, so use your login name and password.  Finally, navigate to the folder that contains the unzipped SDK you downloaded in the last step.I don’t have Weblogic installed on my Mac yet, so I ignored the warning about registering a local server instance first and clicked Next and then Finish.Create a web app and deployLast steps are to create a web app and deploy it to the Cloud.  In NetBeans, choose File &gt;&gt; New Project..., then pick from the Java Web category a Web Application project.  Click Next.Name the project TestJavaCloud and click Next.Choose Oracle Cloud Remote for your server and click Finish.This is a simple JSP app that doesn’t do much.  You can navigate in the project to Web Pages &gt;&gt;  index.jsp and double-click to modify the Hello World code.Also, before we deploy we need to make one change to the security settings in the WEB-INF/web.xml file in order to allow anyone to access the URL without being challenged for signin details for your identity domain.  Add a empty &lt;login-config/&gt; tag to this file. (see MOS article 1531715.1 for more details).Now to deploy:  Right click on your TestJavaCloud project and choose Run.  This will take a few minutes as it builds the app locally and then deploys it to the Cloud.  You can view the activity via Window &gt;&gt; Output if it’s not already showing.  Eventually your default browser should launch a URL something like https://javatrial1762-usoracletrial15878.java.us2.oraclecloudapps.com/TestJavaCloud and you’ll see your beautiful creation:Congratulations!",
      "content_html": "<p>Thought to type up how I got NetBeans deploying to Java Cloud today.  </p><p>There are some <a href=\"https://cloud.oracle.com/videos?subcatID=1383678927161\">good videos</a> buried under the <code>Resources</code> menu at <a href=\"https://cloud.oracle.com/home\">cloud.oracle.com</a>, along with a few other good resources in there.  I’m kicking myself, because I didn’t stumble onto these resources until I saw them on the demo app that gets deployed by default when your Java Cloud gets provisioned. This despite the well-labeled Resources menu at the top of the Cloud home page that literally pointed at these resources.</p><p>Resources.  Who knew?</p><p>Scroll down past the customer stories videos and you’ll find some short vignettes such as:</p><h5 id=\"getting-started-with-the-oracle-java-cloud-service\">Getting Started with the Oracle Java Cloud Service</h5><iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/WiSiwP1O0Jc\" frameborder=\"0\"> </iframe><h5 id=\"using-the-netbeans-ide-for-developing-oracle-java-cloud-service-applications\">Using the NetBeans IDE for Developing Oracle Java Cloud Service Applications</h5><iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/niYUdzq1PBM\" frameborder=\"0\"> </iframe><h5 id=\"deploy-an-application-to-an-oracle-java-cloud-service\">Deploy an application to an Oracle Java Cloud Service</h5><iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/kG3H4S7hdy0\" frameborder=\"0\"> </iframe><p>Those three videos were 22 minutes well spent.</p><p>Meanwhile, here are the steps I followed to get up and running with NetBeans and Java Cloud:</p><h2 id=\"get-a-java-cloud-trial\">Get a Java Cloud trial</h2><p>You need to get provisioned, and this will take a little while as it’s a two-stage process.  First, you sign up for a trial Java instance at <a href=\"https://cloud.oracle.com/tryit\">cloud.oracle.com/tryit</a>.  Fill out the forms and request the service.</p><p>Now wait.  For a while.  You’ll eventually get an email from Oracle Cloud Admin asking you to activate your Trial.  Don’t dilly-dally: you need to activate the trial before you can access the cloud and the activation button is only active for a few days.  Click the <code>Activate My Trial</code> button in your email to do the actual provisioning.</p><p>Now wait again.  For not nearly as long.  You’ll get another email from Oracle Cloud Admin, but this time with details on accessing your newly-spun up instance.  There are a lot of vital links and details in the email: your temporary password for the new instance, a link to your account dashboard (which is pretty much the same place) but with the all-important Identity Domain identifier listed, and direct links to the Java console URL and the Database ApEx instance that comes with your trial.  Take note of your Data Center listed in this section, just in case it comes in handy later.</p><p>These direct links are useful, but I personally got messed up later on when I went to sign in directly at <a href=\"https://cloud.oracle.com/sign_in\">cloud.oracle.com/sign_in</a> and tried to map up to this four-quadrant login screen:</p><div class=\"full zoomable\"><img src=\"/images/Sign_In_Oracle_Cloud.jpg\" /></div><p><strong>My Account</strong> in the top right takes your Oracle SSO sign in and gives you the dashboard of services you’re subscribed to.  This one was easy.  </p><p><strong>My Services</strong> in the top left will sign you into your services, but you need to <em>make sure you’ve picked the right Data Center</em> in the drop down.  I got hung up on this:  my trial is on the US Commercial 2 data center, but the page defaults to a different data center.  The login page that shows after you click <code>Sign In to My Services</code> will challenge you for your username, password and identity domain but it doesn’t draw attention to the fact that you might be signing into the wrong datacenter.  The only hint I had was that my password and identity domain wouldn’t get me in, and the forgot password link and challenge questions wouldn’t work either.  This was all because I had picked the wrong data center instead of clicking the direct links in my provisioning email.</p><div class=\"full zoomable\"><img src=\"/images/Java_Cloud_datacenter_choose_wisely.jpg\" /></div><p><strong>Identity Self Service</strong> is where you can change your identity domain password and set up those challenge questions.  Again, make sure you’ve selected the right datacenter or you won’t be able to sign into your identity domain.</p><h2 id=\"have-a-look-at-the-java-console\">Have a look at the Java console</h2><p>In your provisioning email, you should have a deep link to your Java Trial Service URL.  You can also get to this console URL from your My Services pages by drilling into the Overview page for your Java trial and then clicking the Java Console button:</p><div class=\"full zoomable\"><img src=\"/images/Java_Cloud_Service_Detail.jpg\" /></div><p>In the Java console you’ll have a sample app already deployed and running, named <code>welcome-app</code>.  You can click the Test Application button to get the URL for this sample app and have a look at the resources that sample page links off to.</p><div class=\"full zoomable\"><img src=\"/images/Java_Cloud_Console.jpg\" /></div><p>You can also use this console UI to deploy an app’s WAR or EAR file by hand, assuming your code passes all the Java Cloud whitelist tests.  But we’re going to set up the IDE to deploy directly.</p><h2 id=\"downloading-the-sdk-and-configuring-netbeans\">Downloading the SDK and configuring NetBeans</h2><p>There are <a href=\"http://www.oracle.com/technetwork/topics/cloud/downloads/index.html\">Oracle Cloud plugins</a> for NetBeans, JDeveloper and Eclipse to enable deploying directly to the cloud.  I’ll walk through the steps that worked for me in NetBeans 8.0 for Mac. </p><p>First, install the plugin into NetBeans via <code>Tools &gt;&gt; Plugins &gt;&gt; Available Plugins</code>.  Select the <code>Oracle Cloud</code> plugin in the Java EE category and click <code>Install</code>.</p><p>Next, you need the Oracle Cloud SDK installed on your harddrive.  You can get to it from the links at <code>cloud.oracle.com &gt;&gt; Downloads</code> or from <a href=\"http://www.oracle.com/technetwork/topics/cloud/downloads/index.html#cloudsdk\">this direct link</a>.  I chose the <code>oracle-javacloud-sdk-14100.zip</code> SDK because my Java Cloud service is running version 14.1.0.0.0 (you can find this stat in the Additional Information section at the bottom of your Java trial My Services Overview page).  Unzip this SDK into a folder on your harddrive and have it ready for the next step. </p><p>Return to NetBeans and click on the Services tab (or pull down <code>Window &gt;&gt; Services</code>).  There should be an icon for Cloud.  Right-click it and choose <code>Add Cloud...</code></p><div class=\"full zoomable\"><img src=\"/images/Java_Cloud_Netbeans_Services.jpg\" /></div><p>Choose <code>Oracle Cloud</code> and click Next.</p><p>Fill in the details to match your provisioning email.  The Java and Database Service names are probably pre-filled, but not with the unique service names in your trial details, so be sure to update these fields. You are the service administrator, so use your login name and password.  Finally, navigate to the folder that contains the unzipped SDK you downloaded in the last step.</p><div class=\"full zoomable\"><img src=\"/images/Java_Cloud_Add_Cloud_Provider.jpg\" /></div><p>I don’t have Weblogic installed on my Mac yet, so I ignored the warning about registering a local server instance first and clicked Next and then Finish.</p><h2 id=\"create-a-web-app-and-deploy\">Create a web app and deploy</h2><p>Last steps are to create a web app and deploy it to the Cloud.  </p><p>In NetBeans, choose <code>File &gt;&gt; New Project...</code>, then pick from the Java Web category a <code>Web Application</code> project.  Click Next.</p><div class=\"full zoomable\"><img src=\"/images/Java_Cloud_New_Project.jpg\" /></div><p>Name the project <code>TestJavaCloud</code> and click Next.</p><div class=\"full zoomable\"><img src=\"/images/Java_Cloud_New_Web_Application_2.jpg\" /></div><p>Choose <code>Oracle Cloud Remote</code> for your server and click Finish.</p><div class=\"full zoomable\"><img src=\"/images/Java_Cloud_New_Web_Application_3.jpg\" /></div><p>This is a simple JSP app that doesn’t do much.  You can navigate in the project to <code>Web Pages &gt;&gt;  index.jsp</code> and double-click to modify the Hello World code.</p><div class=\"full zoomable\"><img src=\"/images/Java_Cloud_hello_cloud_jsp.jpg\" /></div><p>Also, before we deploy we need to make one change to the security settings in the <code>WEB-INF/web.xml</code> file in order to allow anyone to access the URL without being challenged for signin details for your identity domain.  Add a empty <code>&lt;login-config/&gt;</code> tag to this file. (see <a href=\"https://support.oracle.com/epmos/faces/DocumentDisplay?id=1531715.1&amp;displayIndex=3\">MOS article 1531715.1</a> for more details).</p><div class=\"full zoomable\"><img src=\"/images/Java_Cloud_web.xml_additions.jpg\" /></div><p>Now to deploy:  Right click on your TestJavaCloud project and choose Run.  This will take a few minutes as it builds the app locally and then deploys it to the Cloud.  You can view the activity via <code>Window &gt;&gt; Output</code> if it’s not already showing.  Eventually your default browser should launch a URL something like <a href=\"https://javatrial1762-usoracletrial15878.java.us2.oraclecloudapps.com/TestJavaCloud\">https://javatrial1762-usoracletrial15878.java.us2.oraclecloudapps.com/TestJavaCloud</a> and you’ll see your beautiful creation:</p><div class=\"full zoomable\"><img src=\"/images/Java_Cloud_My_first_Java_Cloud_Page.jpg\" /></div><p>Congratulations!</p>"
    },
  
    {
      "title": "The First iPhone",
      "date_published": "2014-04-22T00:00:00+00:00",
      "date_modified": "2014-04-22T00:00:00+00:00",
      "id": "/2014/04/22/the-first-iphone/",
      "url": "http://www.likeahouseafire.com/2014/04/22/the-first-iphone/",
      
      
      
      
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "From a story on NPR, check out this photo of one of the first iPhone prototypes...",
      "content_text": "From a story on NPR, check out this photo of one of the first iPhone prototypes:How cool is it that the first iPhone had a subwoofer?",
      "content_html": "<p>From a <a href=\"http://www.npr.org/blogs/alltechconsidered/2014/03/26/294877279/from-the-birth-of-the-iphone-to-an-era-of-lawsuits\">story on NPR</a>, check out this photo of one of the first iPhone prototypes:</p><div class=\"full zoomable\"><img src=\"/images/very-early-iphone.jpg\" /></div><p>How cool is it that the first iPhone had a subwoofer?</p>"
    },
  
    {
      "title": "Applescript Workflow Fails When No Safari Window Open",
      "date_published": "2014-04-11T00:00:00+00:00",
      "date_modified": "2014-04-11T00:00:00+00:00",
      "id": "/2014/04/11/applescript-workflow-fails-when-no-safari-window-open/",
      "url": "http://www.likeahouseafire.com/2014/04/11/applescript-workflow-fails-when-no-safari-window-open/",
      
      
      
      "tags": ["Apple","Dev"],
      
      "author": {"name":"Paul Thaden","twitter":"pthaden","gplus":111502137181170252947,"bio":"Dad to twin boys and twin girls; Retooling in my 40s around front-end dev and JavaScript; Oracle CX Apps Sales Consultant; all-around guy","image":"Avatar.png"},
      "summary": "The action “Run AppleScript” encountered an error....",
      "content_text": "Found an error with an AppleScript Workflow that I’ve had installed to my ~/Library/Services for a long time, but only now noticed that it doesn’t work when there are no Safari windows open.My little workflow is something I’ve hacked from others’ work for automating an internal employee directory that doesn’t have any APIs but does let you hit a search URL which executes and returns in a browser window.  If you want to look up someone mentioned in an email or other document you simply highlight the text, right click and choose the workflow from the Services context menu.Now I’ll admit that I keep a whole lot of windows open on my desktop.  So it’s pretty rare that I’ve closed every window in Safari.  Even Safari itself will open a blank window of Top Sites when it starts up if you had all windows closed in the last session, and thus my workflow has never broken down until I discovered this unique (for me) use case:  Safari is running, but all windows are closed.  Only then would I get a non-descript message from  Automator:The action “Run AppleScript” encountered an errorThanks to this StackOverflow answer I learned that the JavaScript in my workflow needs a window to do its work in.  When there’s no window open in Safari there’s no destination for my JavaScript.  I found that reopen works much better for me, and once I replaced the activate code my little service works fine.Here’s the code with my little regex that extracts out only an email address if it finds one in the text you highlight, but otherwise just submits the text you highlighted:on run {inText}\ttell application &quot;Safari&quot;\t\treopen -- unlike activate, this opens a window\t\tset searchTerm to inText\t\tset xNow to do JavaScript &quot; \t\tfunction extractEmails ( text ){\t\t\treturn text.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\\\.[a-zA-Z0-9._-]+)/gi);\t\t};\t\tvar x,\t\tz,\t\ti;\t\tx = &#39;&quot; &amp; searchTerm &amp; &quot;&#39;;\t\tif (x) {\t\tif (extractEmails(x)) {\t\t\tx = (extractEmails(x));\t\t\t};\t\t     z = 1;    \t\tfor (i = 0; i &lt; 1; ++i) {\t\t\tsndT = &#39;https://people.us.oracle.com/pls/oracle/f?p=8000:1::::RP,RIR:P1_SEARCH,P1_SEARCH_TYPE:&#39; + x + &#39;,People&#39;;\t\t\tpopup_window = window.open(sndT);\t\t}\t\t};\t\t&quot; in document 1\tend tellend run",
      "content_html": "<p>Found an error with an AppleScript Workflow that I’ve had installed to my ~/Library/Services for a long time, but only now noticed that it doesn’t work when there are no Safari windows open.</p><p>My little workflow is something I’ve hacked from others’ work for automating an internal employee directory that doesn’t have any APIs but does let you hit a search URL which executes and returns in a browser window.  If you want to look up someone mentioned in an email or other document you simply highlight the text, right click and choose the workflow from the Services context menu.</p><p>Now I’ll admit that I keep a whole lot of windows open on my desktop.  So it’s pretty rare that I’ve closed every window in Safari.  Even Safari itself will open a blank window of Top Sites when it starts up if you had all windows closed in the last session, and thus my workflow has never broken down until I discovered this unique (for me) use case:  Safari is running, but all windows are closed.  Only then would I get a non-descript message from  Automator:</p><p><code>The action “Run AppleScript” encountered an error</code></p><p>Thanks to <a href=\"http://stackoverflow.com/a/9082574\">this StackOverflow answer</a> I learned that the JavaScript in my workflow needs a window to do its work in.  When there’s no window open in Safari there’s no destination for my JavaScript.  I found that <code>reopen</code> works much better for me, and once I replaced the <code>activate</code> code my little service works fine.</p><p>Here’s the code with my little regex that extracts out only an email address if it finds one in the text you highlight, but otherwise just submits the text you highlighted:</p><div class=\"highlight\"><pre><code class=\"language-applescript\" data-lang=\"applescript\"><span class=\"k\">on</span> <span class=\"nb\">run</span> <span class=\"p\">{</span><span class=\"nv\">inText</span><span class=\"p\">}</span>\t<span class=\"k\">tell</span> <span class=\"nb\">application</span> <span class=\"s2\">&quot;Safari&quot;</span>\t\t<span class=\"nv\">reopen</span> <span class=\"c\">-- unlike activate, this opens a window</span>\t\t<span class=\"k\">set</span> <span class=\"nv\">searchTerm</span> <span class=\"k\">to</span> <span class=\"nv\">inText</span>\t\t<span class=\"k\">set</span> <span class=\"nv\">xNow</span> <span class=\"k\">to</span> <span class=\"nv\">do</span> <span class=\"nv\">JavaScript</span> <span class=\"s2\">&quot; </span><span class=\"s2\">\t\tfunction extractEmails ( text ){</span><span class=\"s2\">\t\t\treturn text.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\\\.[a-zA-Z0-9._-]+)/gi);</span><span class=\"s2\">\t\t};</span><span class=\"s2\">\t\tvar x,</span><span class=\"s2\">\t\tz,</span><span class=\"s2\">\t\ti;</span><span class=\"s2\">\t\tx = &#39;&quot;</span> <span class=\"o\">&amp;</span> <span class=\"nv\">searchTerm</span> <span class=\"o\">&amp;</span> <span class=\"s2\">&quot;&#39;;</span><span class=\"s2\">\t\tif (x) {</span><span class=\"s2\">\t\tif (extractEmails(x)) {</span><span class=\"s2\">\t\t\tx = (extractEmails(x));</span><span class=\"s2\">\t\t\t};</span><span class=\"s2\">\t\t     z = 1;    </span><span class=\"s2\">\t\tfor (i = 0; i &lt; 1; ++i) {</span><span class=\"s2\">\t\t\tsndT = &#39;https://people.us.oracle.com/pls/oracle/f?p=8000:1::::RP,RIR:P1_SEARCH,P1_SEARCH_TYPE:&#39; + x + &#39;,People&#39;;</span><span class=\"s2\">\t\t\tpopup_window = window.open(sndT);</span><span class=\"s2\">\t\t}</span><span class=\"s2\">\t\t};</span><span class=\"s2\">\t\t&quot;</span> <span class=\"k\">in</span> <span class=\"na\">document</span> <span class=\"mi\">1</span>\t<span class=\"k\">end</span> <span class=\"k\">tell</span><span class=\"k\">end</span> <span class=\"nb\">run</span></code></pre></div>"
    }
  
  ]
}
